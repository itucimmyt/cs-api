type Query {findWorkflowNode(id:ID!):WorkflowNode
findWorkflowNodeList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowNodeConnection
findAction(id:ID!):Action
findActionList( page: PageInput, sort:SortInput,filters:[FilterInput]):ActionConnection
findAddress(id:ID!):Address
findAddressList( page: PageInput, sort:SortInput,filters:[FilterInput]):AddressConnection
findAlert(id:ID!):Alert
findAlertList( page: PageInput, sort:SortInput,filters:[FilterInput]):AlertConnection
findAlertRule(id:ID!):AlertRule
findAlertRuleList( page: PageInput, sort:SortInput,filters:[FilterInput]):AlertRuleConnection
findAttributes(id:ID!):Attributes
findAttributesList( page: PageInput, sort:SortInput,filters:[FilterInput]):AttributesConnection
findAuditLogs(id:ID!):AuditLogs
findAuditLogsList( page: PageInput, sort:SortInput,filters:[FilterInput]):AuditLogsConnection
findAuthenticationType(id:ID!):AuthenticationType
findAuthenticationTypeList( page: PageInput, sort:SortInput,filters:[FilterInput]):AuthenticationTypeConnection
findCollaborator(id:ID!):Collaborator
findCollaboratorList( page: PageInput, sort:SortInput,filters:[FilterInput]):CollaboratorConnection
findComponent(id:ID!):Component
findComponentList( page: PageInput, sort:SortInput,filters:[FilterInput]):ComponentConnection
findCountry(id:ID!):Country
findCountryList( page: PageInput, sort:SortInput,filters:[FilterInput]):CountryConnection
findCrop(id:ID!):Crop
findCropList( page: PageInput, sort:SortInput,filters:[FilterInput]):CropConnection
findCustomer(id:ID!):Customer
findCustomerList( page: PageInput, sort:SortInput,filters:[FilterInput]):CustomerConnection
findDelegation(id:ID!):Delegation
findDelegationList( page: PageInput, sort:SortInput,filters:[FilterInput]):DelegationConnection
findDonor(id:ID!):Donor
findDonorList( page: PageInput, sort:SortInput,filters:[FilterInput]):DonorConnection
findHtmlTag(id:ID!):HtmlTag
findHtmlTagList( page: PageInput, sort:SortInput,filters:[FilterInput]):HtmlTagConnection
findInstance(id:ID!):Instance
findInstanceList( page: PageInput, sort:SortInput,filters:[FilterInput]):InstanceConnection
findLanguage(id:ID!):Language
findLanguageList( page: PageInput, sort:SortInput,filters:[FilterInput]):LanguageConnection
findMessage(id:ID!):Message
findMessageList( page: PageInput, sort:SortInput,filters:[FilterInput]):MessageConnection
findModule(id:ID!):Module
findModuleList( page: PageInput, sort:SortInput,filters:[FilterInput]):ModuleConnection
findOrganization(id:ID!):Organization
findOrganizationList( page: PageInput, sort:SortInput,filters:[FilterInput]):OrganizationConnection
findPartner(id:ID!):Partner
findPartnerList( page: PageInput, sort:SortInput,filters:[FilterInput]):PartnerConnection
findPermission(id:ID!):Permission
findPermissionList( page: PageInput, sort:SortInput,filters:[FilterInput]):PermissionConnection
findPerson(id:ID!):Person
findPersonList( page: PageInput, sort:SortInput,filters:[FilterInput]):PersonConnection
findPreference(id:ID!):Preference
findPreferenceList( page: PageInput, sort:SortInput,filters:[FilterInput]):PreferenceConnection
findProcess(id:ID!):Process
findProcessList( page: PageInput, sort:SortInput,filters:[FilterInput]):ProcessConnection
findProgram(id:ID!):Program
findProgramList( page: PageInput, sort:SortInput,filters:[FilterInput]):ProgramConnection
findProject(id:ID!):Project
findProjectList( page: PageInput, sort:SortInput,filters:[FilterInput]):ProjectConnection
findRole(id:ID!):Role
findRoleList( page: PageInput, sort:SortInput,filters:[FilterInput]):RoleConnection
findRoleAction(id:ID!):RoleAction
findRoleActionList( page: PageInput, sort:SortInput,filters:[FilterInput]):RoleActionConnection
findScheme(id:ID!):Scheme
findSchemeList( page: PageInput, sort:SortInput,filters:[FilterInput]):SchemeConnection
findSeason(id:ID!):Season
findSeasonList( page: PageInput, sort:SortInput,filters:[FilterInput]):SeasonConnection
findSession(id:ID!):Session
findSessionList( page: PageInput, sort:SortInput,filters:[FilterInput]):SessionConnection
findTenant(id:ID!):Tenant
findTenantList( page: PageInput, sort:SortInput,filters:[FilterInput]):TenantConnection
findTranslation(id:ID!):Translation
findTranslationList( page: PageInput, sort:SortInput,filters:[FilterInput]):TranslationConnection
findUser(id:ID!):User
findUserList( page: PageInput, sort:SortInput,filters:[FilterInput]):UserConnection
findVendor(id:ID!):Vendor
findVendorList( page: PageInput, sort:SortInput,filters:[FilterInput]):VendorConnection
findWorkflow(id:ID!):Workflow
findWorkflowList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowConnection
findStyleTheme(id:ID!):StyleTheme
findStyleThemeList( page: PageInput, sort:SortInput,filters:[FilterInput]):StyleThemeConnection
findStage(id:ID!):Stage
findStageList( page: PageInput, sort:SortInput,filters:[FilterInput]):StageConnection
findBreedingZone(id:ID!):BreedingZone
findBreedingZoneList( page: PageInput, sort:SortInput,filters:[FilterInput]):BreedingZoneConnection
findPhase(id:ID!):Phase
findPhaseList( page: PageInput, sort:SortInput,filters:[FilterInput]):PhaseConnection
findPipeline(id:ID!):Pipeline
findPipelineList( page: PageInput, sort:SortInput,filters:[FilterInput]):PipelineConnection
findSchema(id:ID!):Schema
findSchemaList( page: PageInput, sort:SortInput,filters:[FilterInput]):SchemaConnection
findTraitClass(id:ID!):TraitClass
findTraitClassList( page: PageInput, sort:SortInput,filters:[FilterInput]):TraitClassConnection
findAssayclass(id:ID!):Assayclass
findAssayclassList( page: PageInput, sort:SortInput,filters:[FilterInput]):AssayclassConnection
findAssayGene(id:ID!):AssayGene
findAssayGeneList( page: PageInput, sort:SortInput,filters:[FilterInput]):AssayGeneConnection
findDataFormat(id:ID!):DataFormat
findDataFormatList( page: PageInput, sort:SortInput,filters:[FilterInput]):DataFormatConnection
findMarker(id:ID!):Marker
findMarkerList( page: PageInput, sort:SortInput,filters:[FilterInput]):MarkerConnection
findMarkerSynonym(id:ID!):MarkerSynonym
findMarkerSynonymList( page: PageInput, sort:SortInput,filters:[FilterInput]):MarkerSynonymConnection
findPurpose(id:ID!):Purpose
findPurposeList( page: PageInput, sort:SortInput,filters:[FilterInput]):PurposeConnection
findService(id:ID!):Service
findServiceList( page: PageInput, sort:SortInput,filters:[FilterInput]):ServiceConnection
findServiceProvider(id:ID!):ServiceProvider
findServiceProviderList( page: PageInput, sort:SortInput,filters:[FilterInput]):ServiceProviderConnection
findServiceType(id:ID!):ServiceType
findServiceTypeList( page: PageInput, sort:SortInput,filters:[FilterInput]):ServiceTypeConnection
findTechnologyPlatform(id:ID!):TechnologyPlatform
findTechnologyPlatformList( page: PageInput, sort:SortInput,filters:[FilterInput]):TechnologyPlatformConnection
findTrait(id:ID!):Trait
findTraitList( page: PageInput, sort:SortInput,filters:[FilterInput]):TraitConnection
}
type Mutation {createWorkflowNode(WorkflowNodeTo:WorkflowNodeInput!):WorkflowNode
modifyWorkflowNode(WorkflowNodeTo:WorkflowNodeInput!):WorkflowNode
deleteWorkflowNode(idworkflownode:Int!):Int
createAction(ActionTo:ActionInput!):Action
modifyAction(ActionTo:ActionInput!):Action
deleteAction(idaction:Int!):Int
createAddress(AddressTo:AddressInput!):Address
modifyAddress(AddressTo:AddressInput!):Address
deleteAddress(idaddress:Int!):Int
createAlert(AlertTo:AlertInput!):Alert
modifyAlert(AlertTo:AlertInput!):Alert
deleteAlert(idalert:Int!):Int
createAlertRule(AlertRuleTo:AlertRuleInput!):AlertRule
modifyAlertRule(AlertRuleTo:AlertRuleInput!):AlertRule
deleteAlertRule(idalertrule:Int!):Int
createAttributes(AttributesTo:AttributesInput!):Attributes
modifyAttributes(AttributesTo:AttributesInput!):Attributes
deleteAttributes(idattributes:Int!):Int
createAuditLogs(AuditLogsTo:AuditLogsInput!):AuditLogs
modifyAuditLogs(AuditLogsTo:AuditLogsInput!):AuditLogs
deleteAuditLogs(idauditlogs:Int!):Int
createAuthenticationType(AuthenticationTypeTo:AuthenticationTypeInput!):AuthenticationType
modifyAuthenticationType(AuthenticationTypeTo:AuthenticationTypeInput!):AuthenticationType
deleteAuthenticationType(idauthenticationtype:Int!):Int
createCollaborator(CollaboratorTo:CollaboratorInput!):Collaborator
modifyCollaborator(CollaboratorTo:CollaboratorInput!):Collaborator
deleteCollaborator(idcollaborator:Int!):Int
createComponent(ComponentTo:ComponentInput!):Component
modifyComponent(ComponentTo:ComponentInput!):Component
deleteComponent(idcomponent:Int!):Int
createCountry(CountryTo:CountryInput!):Country
modifyCountry(CountryTo:CountryInput!):Country
deleteCountry(idcountry:Int!):Int
createCrop(CropTo:CropInput!):Crop
modifyCrop(CropTo:CropInput!):Crop
deleteCrop(idcrop:Int!):Int
createCustomer(CustomerTo:CustomerInput!):Customer
modifyCustomer(CustomerTo:CustomerInput!):Customer
deleteCustomer(idcustomer:Int!):Int
createDelegation(DelegationTo:DelegationInput!):Delegation
modifyDelegation(DelegationTo:DelegationInput!):Delegation
deleteDelegation(iddelegation:Int!):Int
createDonor(DonorTo:DonorInput!):Donor
modifyDonor(DonorTo:DonorInput!):Donor
deleteDonor(iddonor:Int!):Int
createHtmlTag(HtmlTagTo:HtmlTagInput!):HtmlTag
modifyHtmlTag(HtmlTagTo:HtmlTagInput!):HtmlTag
deleteHtmlTag(idhtmltag:Int!):Int
createInstance(InstanceTo:InstanceInput!):Instance
modifyInstance(InstanceTo:InstanceInput!):Instance
deleteInstance(idinstance:Int!):Int
createLanguage(LanguageTo:LanguageInput!):Language
modifyLanguage(LanguageTo:LanguageInput!):Language
deleteLanguage(idlanguage:Int!):Int
createMessage(MessageTo:MessageInput!):Message
modifyMessage(MessageTo:MessageInput!):Message
deleteMessage(idmessage:Int!):Int
createModule(ModuleTo:ModuleInput!):Module
modifyModule(ModuleTo:ModuleInput!):Module
deleteModule(idmodule:Int!):Int
createOrganization(OrganizationTo:OrganizationInput!):Organization
modifyOrganization(OrganizationTo:OrganizationInput!):Organization
deleteOrganization(idorganization:Int!):Int
createPartner(PartnerTo:PartnerInput!):Partner
modifyPartner(PartnerTo:PartnerInput!):Partner
deletePartner(idpartner:Int!):Int
createPermission(PermissionTo:PermissionInput!):Permission
modifyPermission(PermissionTo:PermissionInput!):Permission
deletePermission(idpermission:Int!):Int
createPerson(PersonTo:PersonInput!):Person
modifyPerson(PersonTo:PersonInput!):Person
deletePerson(idperson:Int!):Int
createPreference(PreferenceTo:PreferenceInput!):Preference
modifyPreference(PreferenceTo:PreferenceInput!):Preference
deletePreference(idpreference:Int!):Int
createProcess(ProcessTo:ProcessInput!):Process
modifyProcess(ProcessTo:ProcessInput!):Process
deleteProcess(idprocess:Int!):Int
createProgram(ProgramTo:ProgramInput!):Program
modifyProgram(ProgramTo:ProgramInput!):Program
deleteProgram(idprogram:Int!):Int
createProject(ProjectTo:ProjectInput!):Project
modifyProject(ProjectTo:ProjectInput!):Project
deleteProject(idproject:Int!):Int
createRole(RoleTo:RoleInput!):Role
modifyRole(RoleTo:RoleInput!):Role
deleteRole(idrole:Int!):Int
createRoleAction(RoleActionTo:RoleActionInput!):RoleAction
modifyRoleAction(RoleActionTo:RoleActionInput!):RoleAction
deleteRoleAction(idroleaction:Int!):Int
createScheme(SchemeTo:SchemeInput!):Scheme
modifyScheme(SchemeTo:SchemeInput!):Scheme
deleteScheme(idscheme:Int!):Int
createSeason(SeasonTo:SeasonInput!):Season
modifySeason(SeasonTo:SeasonInput!):Season
deleteSeason(idseason:Int!):Int
createSession(SessionTo:SessionInput!):Session
modifySession(SessionTo:SessionInput!):Session
deleteSession(idsession:Int!):Int
createTenant(TenantTo:TenantInput!):Tenant
modifyTenant(TenantTo:TenantInput!):Tenant
deleteTenant(idtenant:Int!):Int
createTranslation(TranslationTo:TranslationInput!):Translation
modifyTranslation(TranslationTo:TranslationInput!):Translation
deleteTranslation(idtranslation:Int!):Int
createUser(UserTo:UserInput!):User
modifyUser(UserTo:UserInput!):User
deleteUser(iduser:Int!):Int
createVendor(VendorTo:VendorInput!):Vendor
modifyVendor(VendorTo:VendorInput!):Vendor
deleteVendor(idvendor:Int!):Int
createWorkflow(WorkflowTo:WorkflowInput!):Workflow
modifyWorkflow(WorkflowTo:WorkflowInput!):Workflow
deleteWorkflow(idworkflow:Int!):Int
createStyleTheme(StyleThemeTo:StyleThemeInput!):StyleTheme
modifyStyleTheme(StyleThemeTo:StyleThemeInput!):StyleTheme
deleteStyleTheme(idstyletheme:Int!):Int
createStage(StageTo:StageInput!):Stage
modifyStage(StageTo:StageInput!):Stage
deleteStage(idstage:Int!):Int
createBreedingZone(BreedingZoneTo:BreedingZoneInput!):BreedingZone
modifyBreedingZone(BreedingZoneTo:BreedingZoneInput!):BreedingZone
deleteBreedingZone(idbreedingzone:Int!):Int
createPhase(PhaseTo:PhaseInput!):Phase
modifyPhase(PhaseTo:PhaseInput!):Phase
deletePhase(idphase:Int!):Int
createPipeline(PipelineTo:PipelineInput!):Pipeline
modifyPipeline(PipelineTo:PipelineInput!):Pipeline
deletePipeline(idpipeline:Int!):Int
createSchema(SchemaTo:SchemaInput!):Schema
modifySchema(SchemaTo:SchemaInput!):Schema
deleteSchema(idschema:Int!):Int
createTraitClass(TraitClassTo:TraitClassInput!):TraitClass
modifyTraitClass(TraitClassTo:TraitClassInput!):TraitClass
deleteTraitClass(idtraitclass:Int!):Int
createAssayclass(AssayclassTo:AssayclassInput!):Assayclass
modifyAssayclass(AssayclassTo:AssayclassInput!):Assayclass
deleteAssayclass(idassayclass:Int!):Int
createAssayGene(AssayGeneTo:AssayGeneInput!):AssayGene
modifyAssayGene(AssayGeneTo:AssayGeneInput!):AssayGene
deleteAssayGene(idassaygene:Int!):Int
createDataFormat(DataFormatTo:DataFormatInput!):DataFormat
modifyDataFormat(DataFormatTo:DataFormatInput!):DataFormat
deleteDataFormat(iddataformat:Int!):Int
createMarker(MarkerTo:MarkerInput!):Marker
modifyMarker(MarkerTo:MarkerInput!):Marker
deleteMarker(idmarker:Int!):Int
createMarkerSynonym(MarkerSynonymTo:MarkerSynonymInput!):MarkerSynonym
modifyMarkerSynonym(MarkerSynonymTo:MarkerSynonymInput!):MarkerSynonym
deleteMarkerSynonym(idmarkersynonym:Int!):Int
createPurpose(PurposeTo:PurposeInput!):Purpose
modifyPurpose(PurposeTo:PurposeInput!):Purpose
deletePurpose(idpurpose:Int!):Int
createService(ServiceTo:ServiceInput!):Service
modifyService(ServiceTo:ServiceInput!):Service
deleteService(idservice:Int!):Int
createServiceProvider(ServiceProviderTo:ServiceProviderInput!):ServiceProvider
modifyServiceProvider(ServiceProviderTo:ServiceProviderInput!):ServiceProvider
deleteServiceProvider(idserviceprovider:Int!):Int
createServiceType(ServiceTypeTo:ServiceTypeInput!):ServiceType
modifyServiceType(ServiceTypeTo:ServiceTypeInput!):ServiceType
deleteServiceType(idservicetype:Int!):Int
createTechnologyPlatform(TechnologyPlatformTo:TechnologyPlatformInput!):TechnologyPlatform
modifyTechnologyPlatform(TechnologyPlatformTo:TechnologyPlatformInput!):TechnologyPlatform
deleteTechnologyPlatform(idtechnologyplatform:Int!):Int
createTrait(TraitTo:TraitInput!):Trait
modifyTrait(TraitTo:TraitInput!):Trait
deleteTrait(idtrait:Int!):Int
}

type WorkflowNodeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowNode]
}
#
type WorkflowNode {
#
name: String
#
description: String
#
help: String
tenant_id: Int
id: ID!
workflow:Workflow
workflows:[Workflow]
processs:[Process]
modules:[Module]
}
type ActionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Action]
}
#
type Action {
#
description: Int
#
actionType: Int
id: ID!
roleactions:[RoleAction]
module:Module
}
type AddressConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Address]
}
#
type Address {
#
country: Int
#
locality: String
#
region: String
#
postOfficeBoxNumber: String
#
postalCode: String
#
streetAddress: String
tenant_id: Int
id: ID!
persons:[Person]
}
type AlertConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Alert]
}
#Management of the user alerts
type Alert {
#
description: String
tenant_id: Int
id: ID!
alertrules:[AlertRule]
translations:[Translation]
preferences:[Preference]
}
type AlertRuleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AlertRule]
}
#
type AlertRule {
#
name: String
#
sql: String
#
filterClause: String
tenant_id: Int
id: ID!
alert:Alert
}
type AttributesConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Attributes]
}
#
type Attributes {
#
name: String
#
description: String
#
help: String
#
sortno: Int
id: ID!
translations:[Translation]
}
type AuditLogsConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AuditLogs]
}
#register events of the users and applications
type AuditLogs {
#
correlationId: String
#
message: String
tenant_id: Int
id: ID!
instance:Instance
}
type AuthenticationTypeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AuthenticationType]
}
#
type AuthenticationType {
#
name: String
#
protocol: String
#
clientId: String
#
tenantId: String
#
keySecret: String
#
objectId: String
#
isDefault: Boolean
tenant_id: Int
id: ID!
tenants:[Tenant]
}
type CollaboratorConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Collaborator]
}
#
type Collaborator {
#
affiliation: String
#
contactPoint: String
#
identifier: String
tenant_id: Int
id: ID!
person:Person
}
type ComponentConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Component]
}
#register all components or microservices availables for the user
type Component {
#
name: String
#
version: String
#
releaseNo: String
#
info: String
id: ID!
instances:[Instance]
messages:[Message]
modules:[Module]
}
type CountryConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Country]
}
#Country names
type Country {
#Name of the Country
name: String
#Abbreviation of the country
iso3: String
#
number: Int
#
full_name: String
#
code: String
id: ID!
vendors:[Vendor]
}
type CropConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Crop]
}
#Cultivated plant that is grown as food and is the subject of research and development conducted by various programs.
type Crop {
#
crop_code: String
#
crop_name: String
#
description: String
id: ID!
serviceProvider: [ServiceProvider]
programs:[Program]
seasons:[Season]
}
type CustomerConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Customer]
}
#register a client of the application, that client can be a individual or a company
type Customer {
#
name: String
#
phone: String
#
officialEmail: String
#
alternateEmail: String
#
jobTitle: String
#
languagePreference: String
#
phoneExtension: String
#
isActive: String
id: ID!
organizations:[Organization]
organization:Organization
tenants:[Tenant]
}
type DelegationConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Delegation]
}
#
type Delegation {
#
startDate: Date
#
endDate: Date
#
DelegateTo: String
tenant_id: Int
id: ID!
user:User
}
type DonorConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Donor]
}
#
type Donor {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant_id: Int
id: ID!
person:Person
}
type HtmlTagConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [HtmlTag]
}
#
type HtmlTag {
#
tagName: String
id: ID!
translations:[Translation]
}
type InstanceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Instance]
}
#instance management of all services liked with the client
type Instance {
#
server: String
#
port: String
#
health: String
id: ID!
sessions:[Session]
auditlogss:[AuditLogs]
component:Component
tenant:Tenant
}
type LanguageConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Language]
}
#management the globalization of the application
type Language {
#
name: String
#
codeISO: String
#
isbase: String
id: ID!
translations:[Translation]
}
type MessageConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Message]
}
#management the message text that the user receive from application
type Message {
#
Description: String
#
sql: String
#
filterClause: String
id: ID!
translations:[Translation]
component:Component
}
type ModuleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Module]
}
#register the menu list of each component or services depend of the component registers
type Module {
#
name: String
#
description: String
#
help: String
#
route: String
id: ID!
workflownode:WorkflowNode
actions:[Action]
component:Component
translations:[Translation]
}
type OrganizationConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Organization]
}
#
type Organization {
#
legalName: String
#
phone: String
#
webpage: String
#
slogan: String
#
name: String
#
taxID: String
#
logo: String
#
isActive: String
#
defaultAuthentication: Int
#
defaultTheme: Int
#
organization_code: Int
id: ID!
tenants:[Tenant]
customer:Customer
customers:[Customer]
}
type PartnerConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Partner]
}
#
type Partner {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant_id: Int
id: ID!
person:Person
}
type PermissionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Permission]
}
#
type Permission {
tenant_id: Int
id: ID!
roleaction:RoleAction
}
type PersonConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Person]
}
#
type Person {
#
giveName: String
#
familyName: String
#
additionalName: String
#
email: String
#
officialEmail: String
#
gender: String
#
hasCredential: Boolean
#
jobTitle: String
#
knowsAbout: String
#
language: Int
#
phone: String
#
status: String
id: ID!
address:Address
tenant:Tenant
collaborators:[Collaborator]
donors:[Donor]
partners:[Partner]
vendors:[Vendor]
projects:[Project]
}
type PreferenceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Preference]
}
#
type Preference {
tenant_id: Int
id: ID!
user:User
alert:Alert
styletheme:StyleTheme
}
type ProcessConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Process]
}
#register all process that can be executed by any component or workflow
type Process {
#
name: String
#
description: String
#
code: String
#
isBackground: Boolean
#
dbFunction: String
#
callReport: Boolean
#
path: String
tenant_id: Int
id: ID!
workflownode:WorkflowNode
}
type ProgramConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Program]
}
#Entity that conducts defined objectives for the production of the next generation of crops with desired characteristics
type Program {
#Textual identifier of the program 
program_code: String
#Full name of the program
program_name: String
#Type of the program {breeding, molecular, seed health, etc.}
program_type: String
#Status of the program
program_status: String
#Additional information about the program
description: String
tenant: Tenant
id: ID!
projects:[Project]
crop:Crop
}
type ProjectConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Project]
}
#
type Project {
#
leader_id: Int
#
project_code: String
#
project_name: String
#
project_status: String
#
description: String
tenant_id: Int
id: ID!
program:Program
pipeline:Pipeline
person:Person
}
type RoleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Role]
}
#
type Role {
#
description: String
#
securityGroup: String
tenant_id: Int
id: ID!
roleactions:[RoleAction]
user:[User]
}
type RoleActionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [RoleAction]
}
#
type RoleAction {
#
allow: Int
tenant_id: Int
id: ID!
action:Action
permissions:[Permission]
role:Role
}
type SchemeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Scheme]
}
#
type Scheme {
#
scheme_code: String
#
scheme_name: String
#
description: String
tenant_id: Int
id: ID!
phase:[Phase]
stages:[Stage]
pipeline:Pipeline
}
type SeasonConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Season]
}
#
type Season {
#
season_code: String
#
season_name: String
#
description: String
tenant_id: Int
id: ID!
crop:[Crop]
}
type SessionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Session]
}
#management the user sessions
type Session {
#
webSession: String
#
remote_Address: String
#
remote_host: String
tenant_id: Int
id: ID!
user:User
instance:Instance
}
type TenantConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Tenant]
}
#
type Tenant {
#
name: String
#
expiration: Date
#
expire: Boolean
id: ID!
users:[User]
instances:[Instance]
workflows:[Workflow]
organization:Organization
authenticationtype:AuthenticationType
customer:Customer
persons:[Person]
programs:[Program]
}
type TranslationConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Translation]
}
#
type Translation {
#
translation: String
#
languageTo: Int
id: ID!
alert:Alert
attributes:Attributes
language:Language
message:Message
htmltag:HtmlTag
module:Module
}
type UserConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [User]
}
#user management 
type User {
#
userName: String
#
userPassword: String
#
lastAccess: Date
#
defaultRole: Int
#
isIS: Int
id: ID!
sessions:[Session]
delegations:[Delegation]
tenant:Tenant
preferences:[Preference]
roles:[Role]
}
type VendorConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Vendor]
}
#External Service Units that process clients' service requests.
type Vendor {
#Code identifier for the Vendor

code: String
#Reference for the Vendor
reference: String
#
status: String
tenant_id: Int
id: ID!
technologyplatforms:[TechnologyPlatform]
markers:[Marker]
country:Country
dataFormat:DataFormat
service:[Service]
person:Person
}
type WorkflowConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Workflow]
}
#define the different workflow that interact with the process
type Workflow {
#
description: String
#
help: String
#
sortno: Int
id: ID!
tenant:Tenant
workflownodes:[WorkflowNode]
workflownode:WorkflowNode
}
type StyleThemeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [StyleTheme]
}
#
type StyleTheme {
#
description: String
#
path: String
#
physicalName: String
#
isDefault: Boolean
tenant_id: Int
id: ID!
preferences:[Preference]
}
type StageConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Stage]
}
#
type Stage {
#
stage_code: String
#
stage_name: String
#
description: String
#
order_number: Int
tenant_id: Int
id: ID!
scheme:[Scheme]
schema:[Schema]
}
type BreedingZoneConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [BreedingZone]
}
#
type BreedingZone {
#
geospatial_object_id: Int
tenant_id: Int
id: ID!
pipeline:Pipeline
}
type PhaseConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Phase]
}
#
type Phase {
#
phase_code: String
#
phase_name: String
#
description: String
tenant_id: Int
id: ID!
schemes:[Scheme]
pipeline:Pipeline
}
type PipelineConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Pipeline]
}
#
type Pipeline {
#
pipeline_code: String
#
pipeline_name: String
#
pipeline_status: String
#
description: String
tenant_id: Int
id: ID!
schemes:[Scheme]
phases:[Phase]
projects:[Project]
breedingzones:[BreedingZone]
schemas:[Schema]
}
type SchemaConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Schema]
}
#
type Schema {
#
code: String
#
name: String
#
description: String
tenant_id: Int
id: ID!
pipeline:Pipeline
stages:[Stage]
}
type TraitClassConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [TraitClass]
}
#Classification of the traits into groups such as agronomic, biotic, abiotic, quality, 
type TraitClass {
#name for the trait_class
name: String
#description of the trait

description: String
tenant_id: Int
id: ID!
traits:[Trait]
}
type AssayclassConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Assayclass]
}
#Fixed assay, user defined assay, random assay
type Assayclass {
#Name of the assayClass
name: String
#Description of the assay class
description: String
tenant_id: Int
id: ID!
technologyplatform:[TechnologyPlatform]
service:Service
}
type AssayGeneConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AssayGene]
}
#List of genes
type AssayGene {
#Name of the assay gene
name: String
#Description of the assay gene
description: String
tenant_id: Int
id: ID!
trait:Trait
markers:[Marker]
}
type DataFormatConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [DataFormat]
}
#Data formats preferred to receive per vendor spec, such as CSV, VCF, tab delimited, EXCEL. 
type DataFormat {
#Name of the data format
name: String
#Description of the data format
description: String
tenant_id: Int
id: ID!
vendors:[Vendor]
}
type MarkerConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Marker]
}
#Production marker IDs based on vendor spec
type Marker {
#Name of the marker
name: String
#Description of the marker
description: String
tenant_id: Int
id: ID!
vendor:[Vendor]
markersynonyms:[MarkerSynonym]
assaygene:AssayGene
}
type MarkerSynonymConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [MarkerSynonym]
}
#Stores the alias of the markers
type MarkerSynonym {
#Alias name
synonym: Int
tenant_id: Int
id: ID!
marker:Marker
}
type PurposeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Purpose]
}
#High level buiness needs that the service to address. For genotyping, values include MAS, QC, GS/GWAS, germplasm characterization
type Purpose {
#Name of the purpose
name: String
#Identifier for each purpose

code: String
#description of the purpose

description: String
tenant_id: Int
id: ID!
service:[Service]
}
type ServiceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Service]
}
#Service or product name, corresponding to a specific vendor catalog product or service identifier
type Service {
#Name of the Service

name: String
#Description of the Service

description: String
tenant_id: Int
id: ID!
serviceType:ServiceType
purposes:[Purpose]
serviceProvider:ServiceProvider
assayclasss:[Assayclass]
vendors:[Vendor]
}
type ServiceProviderConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [ServiceProvider]
}
#Internal service unit that triage, and/or process clients' service requests.
type ServiceProvider {
#Code identifier for the Service Provider
code: String
#Name of the Service Provider
name: String
tenant_id: Int
id: ID!
serviceTypes:[ServiceType]
}
type ServiceTypeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [ServiceType]
}
#Type of services, such as Genotyping (G), Phytosanitary (P), seed quality (G), pathology including MLN screening
type ServiceType {
#Name of the service_type
name: String
#Code identifier for the service type

code: String
#Description of the Service type
description: String
tenant_id: Int
id: ID!
serviceProvider:ServiceProvider
purposes:[Purpose]
crop:Crop

}
type TechnologyPlatformConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [TechnologyPlatform]
}
#Technology or platform based on vendor spec
type TechnologyPlatform {
#Name of the technology
name: String
#Description of the technology 
description: String
tenant_id: Int
id: ID!
assayclasss:[Assayclass]
vendor:[Vendor]
}
type TraitConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Trait]
}
#Detailed trait names such as MLN, Rust, Zinc, protein, plant height, 
type Trait {
#Name of the trait
name: String
#Description of the trait

description: String
tenant_id: Int
id: ID!
traitclass:TraitClass
assaygenes:[AssayGene]
}

input WorkflowNodeInput {
#
name: String
#
description: String
#
help: String
tenant_id: Int
id: ID!
workflow:WorkflowInput
}
input ActionInput {
#
description: Int
#
actionType: Int
id: ID!
module:ModuleInput
}
input AddressInput {
#
country: Int
#
locality: String
#
region: String
#
postOfficeBoxNumber: String
#
postalCode: String
#
streetAddress: String
tenant_id: Int
id: ID!
}
input AlertInput {
#
description: String
tenant_id: Int
id: ID!
}
input AlertRuleInput {
#
name: String
#
sql: String
#
filterClause: String
tenant_id: Int
id: ID!
alert:AlertInput
}
input AttributesInput {
#
name: String
#
description: String
#
help: String
#
sortno: Int
id: ID!
}
input AuditLogsInput {
#
correlationId: String
#
message: String
tenant_id: Int
id: ID!
instance:InstanceInput
}
input AuthenticationTypeInput {
#
name: String
#
protocol: String
#
clientId: String
#
tenantId: String
#
keySecret: String
#
objectId: String
#
isDefault: Boolean
tenant_id: Int
id: ID!
}
input CollaboratorInput {
#
affiliation: String
#
contactPoint: String
#
identifier: String
tenant_id: Int
id: ID!
person:PersonInput
}
input ComponentInput {
#
name: String
#
version: String
#
releaseNo: String
#
info: String
id: ID!
}
input CountryInput {
#Name of the Country
name: String
#Abbreviation of the country
iso3: String
#
number: Int
#
full_name: String
#
code: String
id: ID!
}
input CropInput {
#
crop_code: String
#
crop_name: String
#
description: String
id: ID!
}
input CustomerInput {
#
name: String
#
phone: String
#
officialEmail: String
#
alternateEmail: String
#
jobTitle: String
#
languagePreference: String
#
phoneExtension: String
#
isActive: String
id: ID!
organization:OrganizationInput
}
input DelegationInput {
#
startDate: Date
#
endDate: Date
#
DelegateTo: String
tenant_id: Int
id: ID!
user:UserInput
}
input DonorInput {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant_id: Int
id: ID!
person:PersonInput
}
input HtmlTagInput {
#
tagName: String
id: ID!
}
input InstanceInput {
#
server: String
#
port: String
#
health: String
id: ID!
component:ComponentInput
tenant:TenantInput
}
input LanguageInput {
#
name: String
#
codeISO: String
#
isbase: String
id: ID!
}
input MessageInput {
#
Description: String
#
sql: String
#
filterClause: String
id: ID!
component:ComponentInput
}
input ModuleInput {
#
name: String
#
description: String
#
help: String
#
route: String
id: ID!
workflownode:WorkflowNodeInput
component:ComponentInput
}
input OrganizationInput {
#
legalName: String
#
phone: String
#
webpage: String
#
slogan: String
#
name: String
#
taxID: String
#
logo: String
#
isActive: String
#
defaultAuthentication: Int
#
defaultTheme: Int
#
organization_code: Int
id: ID!
customer:CustomerInput
}
input PartnerInput {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant_id: Int
id: ID!
person:PersonInput
}
input PermissionInput {
tenant_id: Int
id: ID!
roleaction:RoleActionInput
}
input PersonInput {
#
giveName: String
#
familyName: String
#
additionalName: String
#
email: String
#
officialEmail: String
#
gender: String
#
hasCredential: Boolean
#
jobTitle: String
#
knowsAbout: String
#
language: Int
#
phone: String
#
status: String
id: ID!
address:AddressInput
tenant:TenantInput
}
input PreferenceInput {
tenant_id: Int
id: ID!
user:UserInput
alert:AlertInput
styletheme:StyleThemeInput
}
input ProcessInput {
#
name: String
#
description: String
#
code: String
#
isBackground: Boolean
#
dbFunction: String
#
callReport: Boolean
#
path: String
tenant_id: Int
id: ID!
workflownode:WorkflowNodeInput
}
input ProgramInput {
#Textual identifier of the program 
program_code: String
#Full name of the program
program_name: String
#Type of the program {breeding, molecular, seed health, etc.}
program_type: String
#Status of the program
program_status: String
#Additional information about the program
description: String
tenant: TenantInput
id: ID!
crop:CropInput
}
input ProjectInput {
#
leader_id: Int
#
project_code: String
#
project_name: String
#
project_status: String
#
description: String
tenant_id: Int
id: ID!
program:ProgramInput
pipeline:PipelineInput
person:PersonInput
}
input RoleInput {
#
description: String
#
securityGroup: String
tenant_id: Int
id: ID!
user:[UserInput]
}
input RoleActionInput {
#
allow: Int
tenant_id: Int
id: ID!
action:ActionInput
role:RoleInput
}
input SchemeInput {
#
scheme_code: String
#
scheme_name: String
#
description: String
tenant_id: Int
id: ID!
phase:[PhaseInput]
pipeline:PipelineInput
}
input SeasonInput {
#
season_code: String
#
season_name: String
#
description: String
tenant_id: Int
id: ID!
crop:[CropInput]
}
input SessionInput {
#
webSession: String
#
remote_Address: String
#
remote_host: String
tenant_id: Int
id: ID!
user:UserInput
instance:InstanceInput
}
input TenantInput {
#
name: String
#
expiration: Date
#
expire: Boolean
id: ID!
organization:OrganizationInput
authenticationtype:AuthenticationTypeInput
customer:CustomerInput
}
input TranslationInput {
#
translation: String
#
languageTo: Int
id: ID!
alert:AlertInput
attributes:AttributesInput
language:LanguageInput
message:MessageInput
htmltag:HtmlTagInput
module:ModuleInput
}
input UserInput {
#
userName: String
#
userPassword: String
#
lastAccess: Date
#
defaultRole: Int
#
isIS: Int
id: ID!
tenant:TenantInput
}
input VendorInput {
#Code identifier for the Vendor

code: String
#Reference for the Vendor
reference: String
#
status: String
tenant_id: Int
id: ID!
country:CountryInput
dataformat:DataFormatInput
service:[ServiceInput]
person:PersonInput
}
input WorkflowInput {
#
description: String
#
help: String
#
sortno: Int
id: ID!
tenant:TenantInput
workflownode:WorkflowNodeInput
}
input StyleThemeInput {
#
description: String
#
path: String
#
physicalName: String
#
isDefault: Boolean
tenant_id: Int
id: ID!
}
input StageInput {
#
stage_code: String
#
stage_name: String
#
description: String
#
order_number: Int
tenant_id: Int
id: ID!
scheme:[SchemeInput]
schema:[SchemaInput]
}
input BreedingZoneInput {
#
geospatial_object_id: Int
tenant_id: Int
id: ID!
pipeline:PipelineInput
}
input PhaseInput {
#
phase_code: String
#
phase_name: String
#
description: String
tenant_id: Int
id: ID!
pipeline:PipelineInput
}
input PipelineInput {
#
pipeline_code: String
#
pipeline_name: String
#
pipeline_status: String
#
description: String
tenant_id: Int
id: ID!
}
input SchemaInput {
#
code: String
#
name: String
#
description: String
tenant_id: Int
id: ID!
pipeline:PipelineInput
}
input TraitClassInput {
#name for the trait_class
name: String
#description of the trait

description: String
tenant_id: Int
id: ID!
}
input AssayclassInput {
#Name of the assayClass
name: String
#Description of the assay class
description: String
tenant_id: Int
id: ID!
technologyplatform:[TechnologyPlatformInput]
service:ServiceInput
}
input AssayGeneInput {
#Name of the assay gene
name: String
#Description of the assay gene
description: String
tenant_id: Int
id: ID!
trait:TraitInput
}
input DataFormatInput {
#Name of the data format
name: String
#Description of the data format
description: String
tenant_id: Int
id: ID!
}
input MarkerInput {
#Name of the marker
name: String
#Description of the marker
description: String
tenant_id: Int
id: ID!
vendor:[VendorInput]
assaygene:AssayGeneInput
}
input MarkerSynonymInput {
#Alias name
synonym: Int
tenant_id: Int
id: ID!
marker:MarkerInput
}
input PurposeInput {
#Name of the purpose
name: String
#Identifier for each purpose

code: String
#description of the purpose

description: String
tenant_id: Int
id: ID!
service:[ServiceInput]
}
input ServiceInput {
#Name of the Service

name: String
#Description of the Service

description: String
tenant_id: Int
id: ID!
servicetype:ServiceTypeInput
purpose:PurposeInput
}
input ServiceProviderInput {
#Code identifier for the Service Provider
code: String
#Name of the Service Provider
name: String
tenant_id: Int
id: ID!
}
input ServiceTypeInput {
#Name of the service_type
name: String
#Code identifier for the service type

code: String
#Description of the Service type
description: String
tenant_id: Int
id: ID!
serviceprovider:ServiceProviderInput
crop:CropInput
}
input TechnologyPlatformInput {
#Name of the technology
name: String
#Description of the technology 
description: String
tenant_id: Int
id: ID!
vendor:[VendorInput]
}
input TraitInput {
#Name of the trait
name: String
#Description of the trait

description: String
tenant_id: Int
id: ID!
traitclass:TraitClassInput
}

input FilterInput { 
mod: FilterMod = EQ
col: String!
val: String!
}

input SortInput {
col: String!
mod: SortMod = ASC
}

input PageInput {
number: Int! = 0
size: Int!=1
}

enum FilterMod {
EQ
LK
}

enum SortMod {
ASC
DES
}

scalar Date

