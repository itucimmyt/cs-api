scalar Uuid;
scalar Date
scalar Datetime

type Query {
  findExample(id:ID!): ExampleParentTO
  findExampleList(filters:[FilterInput], sort:SortInput, page: PageInput): ExampleParentTOConnection
  createExample(exampleParent: ExampleParentInput!):ExampleParentTO
}

# Analytical Request, with information about the dataset to use(experiment locations)
# and the analysis to apply on it (model, patterns, etc)
type ExampleParentTO {
  # DB identifier
  id: ID! 
  # Documentation for attribute 'name'
  name: String
  # Documentation for attribute 'stockCode'
  stockCode: String
  children:[ExampleChildTO!]
}

type ExampleChildTO {
  id: ID!
  aNumber: Int
  customField: String
}

type ExampleParentTOConnection {
  totalPages: Int
  totalElements: Int
  numberOfElements: Int
  size: Int
  number: Int
  content: [ExampleParentTO]!
}

input ExampleParentInput {
  name: String!
  stockCode: String!
  children:[Int!]
}

input FilterInput {
  #mode of comparison
  mod: FilterMod = EQ
  #column to use for filtering
  col: String!
  #value to compare against in the filter
  val: String!
} 

input SortInput {
  #column to use for sorting
  col: String!
  #mode of sorting
  mod: SortMod = ASC
}

input PageInput {
  #number of page, starting in 0
  number: Int! = 0
  #size of the page
  size: Int! = 1
}

enum FilterMod {
  #equals filter mode
  EQ
  #like filter mode
  LK
}

enum SortMod {
  # ascendant sort mode
  ASC
  # descendant sort mode
  DES
}
