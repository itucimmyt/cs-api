type Query {findWorkflowStatusType(id:ID!):WorkflowStatusType
findWorkflowStatusTypeList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowStatusTypeConnection
findAction(id:ID!):Action
findActionList( page: PageInput, sort:SortInput,filters:[FilterInput]):ActionConnection
findAddress(id:ID!):Address
findAddressList( page: PageInput, sort:SortInput,filters:[FilterInput]):AddressConnection
findAlert(id:ID!):Alert
findAlertList( page: PageInput, sort:SortInput,filters:[FilterInput]):AlertConnection
findAlertRule(id:ID!):AlertRule
findAlertRuleList( page: PageInput, sort:SortInput,filters:[FilterInput]):AlertRuleConnection
findAttributes(id:ID!):Attributes
findAttributesList( page: PageInput, sort:SortInput,filters:[FilterInput]):AttributesConnection
findAuditLogs(id:ID!):AuditLogs
findAuditLogsList( page: PageInput, sort:SortInput,filters:[FilterInput]):AuditLogsConnection
findAuthenticationType(id:ID!):AuthenticationType
findAuthenticationTypeList( page: PageInput, sort:SortInput,filters:[FilterInput]):AuthenticationTypeConnection
findCollaborator(id:ID!):Collaborator
findCollaboratorList( page: PageInput, sort:SortInput,filters:[FilterInput]):CollaboratorConnection
findComponent(id:ID!):Component
findComponentList( page: PageInput, sort:SortInput,filters:[FilterInput]):ComponentConnection
findCountry(id:ID!):Country
findCountryList( page: PageInput, sort:SortInput,filters:[FilterInput]):CountryConnection
findCrop(id:ID!):Crop
findCropList( page: PageInput, sort:SortInput,filters:[FilterInput]):CropConnection
findCustomer(id:ID!):Customer
findCustomerList( page: PageInput, sort:SortInput,filters:[FilterInput]):CustomerConnection
findDelegation(id:ID!):Delegation
findDelegationList( page: PageInput, sort:SortInput,filters:[FilterInput]):DelegationConnection
findDonor(id:ID!):Donor
findDonorList( page: PageInput, sort:SortInput,filters:[FilterInput]):DonorConnection
findEmailTemplate(id:ID!):EmailTemplate
findEmailTemplateList( page: PageInput, sort:SortInput,filters:[FilterInput]):EmailTemplateConnection
findEntityReference(id:ID!):EntityReference
findEntityReferenceList( page: PageInput, sort:SortInput,filters:[FilterInput]):EntityReferenceConnection
findHtmlTag(id:ID!):HtmlTag
findHtmlTagList( page: PageInput, sort:SortInput,filters:[FilterInput]):HtmlTagConnection
findInstance(id:ID!):Instance
findInstanceList( page: PageInput, sort:SortInput,filters:[FilterInput]):InstanceConnection
findLanguage(id:ID!):Language
findLanguageList( page: PageInput, sort:SortInput,filters:[FilterInput]):LanguageConnection
findMessage(id:ID!):Message
findMessageList( page: PageInput, sort:SortInput,filters:[FilterInput]):MessageConnection
findModule(id:ID!):Module
findModuleList( page: PageInput, sort:SortInput,filters:[FilterInput]):ModuleConnection
findNumberSequenceRule(id:ID!):NumberSequenceRule
findNumberSequenceRuleList( page: PageInput, sort:SortInput,filters:[FilterInput]):NumberSequenceRuleConnection
findNumberSequenceRuleSegment(id:ID!):NumberSequenceRuleSegment
findNumberSequenceRuleSegmentList( page: PageInput, sort:SortInput,filters:[FilterInput]):NumberSequenceRuleSegmentConnection
findOrganization(id:ID!):Organization
findOrganizationList( page: PageInput, sort:SortInput,filters:[FilterInput]):OrganizationConnection
findPartner(id:ID!):Partner
findPartnerList( page: PageInput, sort:SortInput,filters:[FilterInput]):PartnerConnection
findPerson(id:ID!):Person
findPersonList( page: PageInput, sort:SortInput,filters:[FilterInput]):PersonConnection
findPreference(id:ID!):Preference
findPreferenceList( page: PageInput, sort:SortInput,filters:[FilterInput]):PreferenceConnection
findProcess(id:ID!):Process
findProcessList( page: PageInput, sort:SortInput,filters:[FilterInput]):ProcessConnection
findProgram(id:ID!):Program
findProgramList( page: PageInput, sort:SortInput,filters:[FilterInput]):ProgramConnection
findProject(id:ID!):Project
findProjectList( page: PageInput, sort:SortInput,filters:[FilterInput]):ProjectConnection
findRequest(id:ID!):Request
findRequestList( page: PageInput, sort:SortInput,filters:[FilterInput]):RequestConnection
findRole(id:ID!):Role
findRoleList( page: PageInput, sort:SortInput,filters:[FilterInput]):RoleConnection
findRoleAction(id:ID!):RoleAction
findRoleActionList( page: PageInput, sort:SortInput,filters:[FilterInput]):RoleActionConnection
findScheme(id:ID!):Scheme
findSchemeList( page: PageInput, sort:SortInput,filters:[FilterInput]):SchemeConnection
findSeason(id:ID!):Season
findSeasonList( page: PageInput, sort:SortInput,filters:[FilterInput]):SeasonConnection
findSegment(id:ID!):Segment
findSegmentList( page: PageInput, sort:SortInput,filters:[FilterInput]):SegmentConnection
findSession(id:ID!):Session
findSessionList( page: PageInput, sort:SortInput,filters:[FilterInput]):SessionConnection
findStyleTheme(id:ID!):StyleTheme
findStyleThemeList( page: PageInput, sort:SortInput,filters:[FilterInput]):StyleThemeConnection
findTenant(id:ID!):Tenant
findTenantList( page: PageInput, sort:SortInput,filters:[FilterInput]):TenantConnection
findTranslation(id:ID!):Translation
findTranslationList( page: PageInput, sort:SortInput,filters:[FilterInput]):TranslationConnection
findUser(id:ID!):User
findUserList( page: PageInput, sort:SortInput,filters:[FilterInput]):UserConnection
findVendor(id:ID!):Vendor
findVendorList( page: PageInput, sort:SortInput,filters:[FilterInput]):VendorConnection
findWorkflow(id:ID!):Workflow
findWorkflowList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowConnection
findWorkflowCFType(id:ID!):WorkflowCFType
findWorkflowCFTypeList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowCFTypeConnection
findWorkflowCFValue(id:ID!):WorkflowCFValue
findWorkflowCFValueList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowCFValueConnection
findWorkflowEvent(id:ID!):WorkflowEvent
findWorkflowEventList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowEventConnection
findWorkflowInstance(id:ID!):WorkflowInstance
findWorkflowInstanceList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowInstanceConnection
findWorkflowNode(id:ID!):WorkflowNode
findWorkflowNodeList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowNodeConnection
findWorkflowNodeCF(id:ID!):WorkflowNodeCF
findWorkflowNodeCFList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowNodeCFConnection
findWorkflowPhase(id:ID!):WorkflowPhase
findWorkflowPhaseList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowPhaseConnection
findWorkflowStage(id:ID!):WorkflowStage
findWorkflowStageList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowStageConnection
findWorkflowStatus(id:ID!):WorkflowStatus
findWorkflowStatusList( page: PageInput, sort:SortInput,filters:[FilterInput]):WorkflowStatusConnection
}
type Mutation {createWorkflowStatusType(WorkflowStatusTypeTo:WorkflowStatusTypeInput!):WorkflowStatusType
modifyWorkflowStatusType(WorkflowStatusTypeTo:WorkflowStatusTypeInput!):WorkflowStatusType
deleteWorkflowStatusType(idworkflowstatustype:Int!):Int
createAction(ActionTo:ActionInput!):Action
modifyAction(ActionTo:ActionInput!):Action
deleteAction(idaction:Int!):Int
createAddress(AddressTo:AddressInput!):Address
modifyAddress(AddressTo:AddressInput!):Address
deleteAddress(idaddress:Int!):Int
createAlert(AlertTo:AlertInput!):Alert
modifyAlert(AlertTo:AlertInput!):Alert
deleteAlert(idalert:Int!):Int
createAlertRule(AlertRuleTo:AlertRuleInput!):AlertRule
modifyAlertRule(AlertRuleTo:AlertRuleInput!):AlertRule
deleteAlertRule(idalertrule:Int!):Int
createAttributes(AttributesTo:AttributesInput!):Attributes
modifyAttributes(AttributesTo:AttributesInput!):Attributes
deleteAttributes(idattributes:Int!):Int
createAuditLogs(AuditLogsTo:AuditLogsInput!):AuditLogs
modifyAuditLogs(AuditLogsTo:AuditLogsInput!):AuditLogs
deleteAuditLogs(idauditlogs:Int!):Int
createAuthenticationType(AuthenticationTypeTo:AuthenticationTypeInput!):AuthenticationType
modifyAuthenticationType(AuthenticationTypeTo:AuthenticationTypeInput!):AuthenticationType
deleteAuthenticationType(idauthenticationtype:Int!):Int
createCollaborator(CollaboratorTo:CollaboratorInput!):Collaborator
modifyCollaborator(CollaboratorTo:CollaboratorInput!):Collaborator
deleteCollaborator(idcollaborator:Int!):Int
createComponent(ComponentTo:ComponentInput!):Component
modifyComponent(ComponentTo:ComponentInput!):Component
deleteComponent(idcomponent:Int!):Int
createCountry(CountryTo:CountryInput!):Country
modifyCountry(CountryTo:CountryInput!):Country
deleteCountry(idcountry:Int!):Int
createCrop(CropTo:CropInput!):Crop
modifyCrop(CropTo:CropInput!):Crop
deleteCrop(idcrop:Int!):Int
createCustomer(CustomerTo:CustomerInput!):Customer
modifyCustomer(CustomerTo:CustomerInput!):Customer
deleteCustomer(idcustomer:Int!):Int
createDelegation(DelegationTo:DelegationInput!):Delegation
modifyDelegation(DelegationTo:DelegationInput!):Delegation
deleteDelegation(iddelegation:Int!):Int
createDonor(DonorTo:DonorInput!):Donor
modifyDonor(DonorTo:DonorInput!):Donor
deleteDonor(iddonor:Int!):Int
createEmailTemplate(EmailTemplateTo:EmailTemplateInput!):EmailTemplate
modifyEmailTemplate(EmailTemplateTo:EmailTemplateInput!):EmailTemplate
deleteEmailTemplate(idemailtemplate:Int!):Int
createEntityReference(EntityReferenceTo:EntityReferenceInput!):EntityReference
modifyEntityReference(EntityReferenceTo:EntityReferenceInput!):EntityReference
deleteEntityReference(identityreference:Int!):Int
createHtmlTag(HtmlTagTo:HtmlTagInput!):HtmlTag
modifyHtmlTag(HtmlTagTo:HtmlTagInput!):HtmlTag
deleteHtmlTag(idhtmltag:Int!):Int
createInstance(InstanceTo:InstanceInput!):Instance
modifyInstance(InstanceTo:InstanceInput!):Instance
deleteInstance(idinstance:Int!):Int
createLanguage(LanguageTo:LanguageInput!):Language
modifyLanguage(LanguageTo:LanguageInput!):Language
deleteLanguage(idlanguage:Int!):Int
createMessage(MessageTo:MessageInput!):Message
modifyMessage(MessageTo:MessageInput!):Message
deleteMessage(idmessage:Int!):Int
createModule(ModuleTo:ModuleInput!):Module
modifyModule(ModuleTo:ModuleInput!):Module
deleteModule(idmodule:Int!):Int
createNumberSequenceRule(NumberSequenceRuleTo:NumberSequenceRuleInput!):NumberSequenceRule
modifyNumberSequenceRule(NumberSequenceRuleTo:NumberSequenceRuleInput!):NumberSequenceRule
deleteNumberSequenceRule(idnumbersequencerule:Int!):Int
createNumberSequenceRuleSegment(NumberSequenceRuleSegmentTo:NumberSequenceRuleSegmentInput!):NumberSequenceRuleSegment
modifyNumberSequenceRuleSegment(NumberSequenceRuleSegmentTo:NumberSequenceRuleSegmentInput!):NumberSequenceRuleSegment
deleteNumberSequenceRuleSegment(idnumbersequencerulesegment:Int!):Int
createOrganization(OrganizationTo:OrganizationInput!):Organization
modifyOrganization(OrganizationTo:OrganizationInput!):Organization
deleteOrganization(idorganization:Int!):Int
createPartner(PartnerTo:PartnerInput!):Partner
modifyPartner(PartnerTo:PartnerInput!):Partner
deletePartner(idpartner:Int!):Int
createPerson(PersonTo:PersonInput!):Person
modifyPerson(PersonTo:PersonInput!):Person
deletePerson(idperson:Int!):Int
createPreference(PreferenceTo:PreferenceInput!):Preference
modifyPreference(PreferenceTo:PreferenceInput!):Preference
deletePreference(idpreference:Int!):Int
createProcess(ProcessTo:ProcessInput!):Process
modifyProcess(ProcessTo:ProcessInput!):Process
deleteProcess(idprocess:Int!):Int
createProgram(ProgramTo:ProgramInput!):Program
modifyProgram(ProgramTo:ProgramInput!):Program
deleteProgram(idprogram:Int!):Int
createProject(ProjectTo:ProjectInput!):Project
modifyProject(ProjectTo:ProjectInput!):Project
deleteProject(idproject:Int!):Int
createRequest(RequestTo:RequestInput!):Request
modifyRequest(RequestTo:RequestInput!):Request
deleteRequest(idrequest:Int!):Int
createRole(RoleTo:RoleInput!):Role
modifyRole(RoleTo:RoleInput!):Role
deleteRole(idrole:Int!):Int
createRoleAction(RoleActionTo:RoleActionInput!):RoleAction
modifyRoleAction(RoleActionTo:RoleActionInput!):RoleAction
deleteRoleAction(idroleaction:Int!):Int
createScheme(SchemeTo:SchemeInput!):Scheme
modifyScheme(SchemeTo:SchemeInput!):Scheme
deleteScheme(idscheme:Int!):Int
createSeason(SeasonTo:SeasonInput!):Season
modifySeason(SeasonTo:SeasonInput!):Season
deleteSeason(idseason:Int!):Int
createSegment(SegmentTo:SegmentInput!):Segment
modifySegment(SegmentTo:SegmentInput!):Segment
deleteSegment(idsegment:Int!):Int
createSession(SessionTo:SessionInput!):Session
modifySession(SessionTo:SessionInput!):Session
deleteSession(idsession:Int!):Int
createStyleTheme(StyleThemeTo:StyleThemeInput!):StyleTheme
modifyStyleTheme(StyleThemeTo:StyleThemeInput!):StyleTheme
deleteStyleTheme(idstyletheme:Int!):Int
createTenant(TenantTo:TenantInput!):Tenant
modifyTenant(TenantTo:TenantInput!):Tenant
deleteTenant(idtenant:Int!):Int
createTranslation(TranslationTo:TranslationInput!):Translation
modifyTranslation(TranslationTo:TranslationInput!):Translation
deleteTranslation(idtranslation:Int!):Int
createUser(UserTo:UserInput!):User
modifyUser(UserTo:UserInput!):User
deleteUser(iduser:Int!):Int
createVendor(VendorTo:VendorInput!):Vendor
modifyVendor(VendorTo:VendorInput!):Vendor
deleteVendor(idvendor:Int!):Int
createWorkflow(WorkflowTo:WorkflowInput!):Workflow
modifyWorkflow(WorkflowTo:WorkflowInput!):Workflow
deleteWorkflow(idworkflow:Int!):Int
createWorkflowCFType(WorkflowCFTypeTo:WorkflowCFTypeInput!):WorkflowCFType
modifyWorkflowCFType(WorkflowCFTypeTo:WorkflowCFTypeInput!):WorkflowCFType
deleteWorkflowCFType(idworkflowcftype:Int!):Int
createWorkflowCFValue(WorkflowCFValueTo:WorkflowCFValueInput!):WorkflowCFValue
modifyWorkflowCFValue(WorkflowCFValueTo:WorkflowCFValueInput!):WorkflowCFValue
deleteWorkflowCFValue(idworkflowcfvalue:Int!):Int
createWorkflowEvent(WorkflowEventTo:WorkflowEventInput!):WorkflowEvent
modifyWorkflowEvent(WorkflowEventTo:WorkflowEventInput!):WorkflowEvent
deleteWorkflowEvent(idworkflowevent:Int!):Int
createWorkflowInstance(WorkflowInstanceTo:WorkflowInstanceInput!):WorkflowInstance
modifyWorkflowInstance(WorkflowInstanceTo:WorkflowInstanceInput!):WorkflowInstance
deleteWorkflowInstance(idworkflowinstance:Int!):Int
createWorkflowNode(WorkflowNodeTo:WorkflowNodeInput!):WorkflowNode
modifyWorkflowNode(WorkflowNodeTo:WorkflowNodeInput!):WorkflowNode
deleteWorkflowNode(idworkflownode:Int!):Int
createWorkflowNodeCF(WorkflowNodeCFTo:WorkflowNodeCFInput!):WorkflowNodeCF
modifyWorkflowNodeCF(WorkflowNodeCFTo:WorkflowNodeCFInput!):WorkflowNodeCF
deleteWorkflowNodeCF(idworkflownodecf:Int!):Int
createWorkflowPhase(WorkflowPhaseTo:WorkflowPhaseInput!):WorkflowPhase
modifyWorkflowPhase(WorkflowPhaseTo:WorkflowPhaseInput!):WorkflowPhase
deleteWorkflowPhase(idworkflowphase:Int!):Int
createWorkflowStage(WorkflowStageTo:WorkflowStageInput!):WorkflowStage
modifyWorkflowStage(WorkflowStageTo:WorkflowStageInput!):WorkflowStage
deleteWorkflowStage(idworkflowstage:Int!):Int
createWorkflowStatus(WorkflowStatusTo:WorkflowStatusInput!):WorkflowStatus
modifyWorkflowStatus(WorkflowStatusTo:WorkflowStatusInput!):WorkflowStatus
deleteWorkflowStatus(idworkflowstatus:Int!):Int
}

type WorkflowStatusTypeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowStatusType]
}
#
type WorkflowStatusType {
#
name: String
#
description: String
#
help: String
tenant: Int
id: ID!
workflowstatuss:[WorkflowStatus]
}
type ActionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Action]
}
#
type Action {
#
description: Int
#
actionType: Int
id: ID!
roleactions:[RoleAction]
module:Module
}
type AddressConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Address]
}
#
type Address {
#
country: Int
#
locality: String
#
region: String
#
postOfficeBoxNumber: String
#
postalCode: String
#
streetAddress: String
tenant: Int
id: ID!
persons:[Person]
}
type AlertConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Alert]
}
#Management of the user alerts
type Alert {
#
description: String
tenant: Int
id: ID!
alertrules:[AlertRule]
translations:[Translation]
preferences:[Preference]
}
type AlertRuleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AlertRule]
}
#
type AlertRule {
#
name: String
#
sql: String
#
filterClause: String
tenant: Int
id: ID!
alert:Alert
}
type AttributesConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Attributes]
}
#
type Attributes {
#
name: String
#
description: String
#
help: String
#
sortno: Int
id: ID!
translations:[Translation]
entityreference:EntityReference
}
type AuditLogsConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AuditLogs]
}
#register events of the users and applications
type AuditLogs {
#
correlationId: String
#
message: String
tenant: Int
id: ID!
instance:Instance
}
type AuthenticationTypeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [AuthenticationType]
}
#
type AuthenticationType {
#
name: String
#
protocol: String
#
clientId: String
#
tenantId: String
#
keySecret: String
#
objectId: String
#
isDefault: Boolean
tenant: Int
id: ID!
tenants:[Tenant]
}
type CollaboratorConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Collaborator]
}
#
type Collaborator {
#
affiliation: String
#
contactPoint: String
#
identifier: String
tenant: Int
id: ID!
person:Person
}
type ComponentConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Component]
}
#register all components or microservices availables for the user
type Component {
#
name: String
#
version: String
#
releaseNo: String
#
info: String
id: ID!
instances:[Instance]
messages:[Message]
modules:[Module]
}
type CountryConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Country]
}
#Country names
type Country {
#Name of the Country
name: String
#Abbreviation of the country
iso3: String
#
number: Int
#
full_name: String
#
code: String
id: ID!
vendors:[Vendor]
}
type CropConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Crop]
}
#Cultivated plant that is grown as food and is the subject of research and development conducted by various programs.
type Crop {
#
crop_code: String
#
crop_name: String
#
description: String
id: ID!
programs:[Program]
seasons:[Season]
}
type CustomerConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Customer]
}
#register a client of the application, that client can be a individual or a company
type Customer {
#
name: String
#
phone: String
#
officialEmail: String
#
alternateEmail: String
#
jobTitle: String
#
languagePreference: String
#
phoneExtension: String
#
isActive: String
id: ID!
organizations:[Organization]
organization:Organization
tenants:[Tenant]
}
type DelegationConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Delegation]
}
#
type Delegation {
#
startDate: Date
#
endDate: Date
#
DelegateTo: String
tenant: Int
id: ID!
user:User
}
type DonorConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Donor]
}
#
type Donor {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant: Int
id: ID!
person:Person
}
type EmailTemplateConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [EmailTemplate]
}
#
type EmailTemplate {
#
name: String
#
subject: String
#
to: String
#
template: String
#
bcc: String
id: ID!
tenant:Tenant
entityreferences:[EntityReference]
}
type EntityReferenceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [EntityReference]
}
#
type EntityReference {
#
entity: String
#
textfield: String
#
valuefield: String
#
storefield: String
tenant: Int
id: ID!
segments:[Segment]
numbersequencerule:[NumberSequenceRule]
emailtemplate:[EmailTemplate]
attributess:[Attributes]
}
type HtmlTagConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [HtmlTag]
}
#
type HtmlTag {
#
tagName: String
id: ID!
translations:[Translation]
}
type InstanceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Instance]
}
#instance management of all services liked with the client
type Instance {
#
server: String
#
port: String
#
health: String
id: ID!
sessions:[Session]
auditlogss:[AuditLogs]
component:Component
tenant:Tenant
}
type LanguageConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Language]
}
#management the globalization of the application
type Language {
#
name: String
#
codeISO: String
#
isbase: String
id: ID!
translations:[Translation]
}
type MessageConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Message]
}
#management the message text that the user receive from application
type Message {
#
Description: String
#
sql: String
#
filterClause: String
id: ID!
translations:[Translation]
component:Component
}
type ModuleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Module]
}
#register the menu list of each component or services depend of the component registers
type Module {
#
name: String
#
description: String
#
help: String
#
route: String
#
MainEntity: String
id: ID!
actions:[Action]
component:Component
translations:[Translation]
workflownodes:[WorkflowNode]
}
type NumberSequenceRuleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [NumberSequenceRule]
}
#
type NumberSequenceRule {
#
name: String
#
lowest: Int
#
nextrec: Int
#
format: String
#
lastcode: String
id: ID!
entityreferences:[EntityReference]
tenant:Tenant
numbersequencerulesegments:[NumberSequenceRuleSegment]
}
type NumberSequenceRuleSegmentConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [NumberSequenceRuleSegment]
}
#
type NumberSequenceRuleSegment {
#
Length: Int
#
FieldOrigin: String
#
Position: Int
tenant: Int
id: ID!
numbersequencerule:NumberSequenceRule
segment:Segment
}
type OrganizationConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Organization]
}
#
type Organization {
#
legalName: String
#
phone: String
#
webpage: String
#
slogan: String
#
name: String
#
taxID: String
#
logo: String
#
isActive: String
#
defaultAuthentication: Int
#
defaultTheme: Int
#
organization_code: Int
id: ID!
tenants:[Tenant]
customer:Customer
customers:[Customer]
}
type PartnerConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Partner]
}
#
type Partner {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant: Int
id: ID!
person:Person
}
type PersonConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Person]
}
#
type Person {
#
giveName: String
#
familyName: String
#
additionalName: String
#
email: String
#
officialEmail: String
#
gender: String
#
hasCredential: Boolean
#
jobTitle: String
#
knowsAbout: String
#
language: Int
#
phone: String
#
status: String
id: ID!
address:Address
tenant:Tenant
collaborators:[Collaborator]
donors:[Donor]
partners:[Partner]
vendors:[Vendor]
projects:[Project]
}
type PreferenceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Preference]
}
#
type Preference {
#
comment: String
tenant: Int
id: ID!
user:User
alert:Alert
styletheme:StyleTheme
}
type ProcessConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Process]
}
#register all process that can be executed by any component or workflow
type Process {
#
name: String
#
description: String
#
code: String
#
isBackground: Boolean
#
dbFunction: String
#
callReport: Boolean
#
path: String
tenant: Int
id: ID!
workflownode:[WorkflowNode]
}
type ProgramConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Program]
}
#Entity that conducts defined objectives for the production of the next generation of crops with desired characteristics
type Program {
#Textual identifier of the program 
program_code: String
#Full name of the program
program_name: String
#Type of the program {breeding, molecular, seed health, etc.}
program_type: String
#Status of the program
program_status: String
#Additional information about the program
description: String
id: ID!
projects:[Project]
tenant:Tenant
crop:Crop
}
type ProjectConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Project]
}
#
type Project {
#
leader_id: Int
#
project_code: String
#
project_name: String
#
project_status: String
#
description: String
tenant: Int
id: ID!
program:Program
person:Person
}
type RequestConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Request]
}
#Stores all the requests made for different services to different units.
type Request {
#Id of the person who is making a request
requester: String
#Date when the request was submitted
submition_date: Date
#ID of the admin contact for the request
admin_contact: String
#
charge_account: String
#Additional information about the request
description: String
tenant: Int
id: ID!
workflowcfvalues:[WorkflowCFValue]
workflowinstance:WorkflowInstance
}
type RoleConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Role]
}
#
type Role {
#
description: String
#
securityGroup: String
tenant: Int
id: ID!
roleactions:[RoleAction]
user:[User]
}
type RoleActionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [RoleAction]
}
#
type RoleAction {
#
allow: Int
tenant: Int
id: ID!
action:Action
role:Role
}
type SchemeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Scheme]
}
#
type Scheme {
#
scheme_code: String
#
scheme_name: String
#
description: String
tenant: Int
id: ID!
}
type SeasonConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Season]
}
#
type Season {
#
season_code: String
#
season_name: String
#
description: String
tenant: Int
id: ID!
crop:[Crop]
}
type SegmentConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Segment]
}
#
type Segment {
#
name: String
#
tag: String
#
isAPI: Boolean
#
isDatabase: Boolean
#
IsAutoNum: Boolean
#
IsStatic: Boolean
#
IsFormule: Boolean
#
Formule: String
#
IsOrigin: Boolean
tenant: Int
id: ID!
entityreference:EntityReference
numbersequencerulesegments:[NumberSequenceRuleSegment]
}
type SessionConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Session]
}
#management the user sessions
type Session {
#
webSession: String
#
remote_Address: String
#
remote_host: String
tenant: Int
id: ID!
user:User
instance:Instance
}
type StyleThemeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [StyleTheme]
}
#
type StyleTheme {
#
description: String
#
path: String
#
physicalName: String
#
isDefault: Boolean
tenant: Int
id: ID!
preferences:[Preference]
}
type TenantConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Tenant]
}
#
type Tenant {
#
name: String
#
expiration: Date
#
expire: Boolean
id: ID!
programs:[Program]
users:[User]
instances:[Instance]
workflows:[Workflow]
organization:Organization
authenticationtype:AuthenticationType
customer:Customer
persons:[Person]
numbersequencerules:[NumberSequenceRule]
emailtemplates:[EmailTemplate]
}
type TranslationConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Translation]
}
#
type Translation {
#
translation: String
#
languageTo: Int
id: ID!
alert:Alert
attributes:Attributes
language:Language
message:Message
htmltag:HtmlTag
module:Module
}
type UserConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [User]
}
#user management 
type User {
#
userName: String
#
userPassword: String
#
lastAccess: Date
#
defaultRole: Int
#
isIS: Int
id: ID!
sessions:[Session]
delegations:[Delegation]
tenant:Tenant
preferences:[Preference]
roles:[Role]
}
type VendorConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Vendor]
}
#External Service Units that process clients' service requests.
type Vendor {
#Code identifier for the Vendor

code: String
#Reference for the Vendor
reference: String
#
status: String
tenant: Int
id: ID!
country:Country
person:Person
}
type WorkflowConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [Workflow]
}
#define the different workflow that interact with the process
type Workflow {
#
description: String
#
help: String
#
sortno: Int
id: ID!
workflowphases:[WorkflowPhase]
tenant:Tenant
workflowinstances:[WorkflowInstance]
workflownodes:[WorkflowNode]
workflownode:WorkflowNode
}
type WorkflowCFTypeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowCFType]
}
#
type WorkflowCFType {
#
name: String
#
description: String
#
help: String
#
type: String
tenant: Int
id: ID!
workflownodecfs:[WorkflowNodeCF]
}
type WorkflowCFValueConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowCFValue]
}
#
type WorkflowCFValue {
#
FLAG_Value: Boolean
#
TEXT_Value: String
#
NUM_Value: Int
#
DATE_Value: Date
#
CODE_Value: Int
tenant: Int
id: ID!
request:Request
workflownodecf:WorkflowNodeCF
}
type WorkflowEventConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowEvent]
}
#
type WorkflowEvent {
#
completed: Date
#
error: String
#
description: String
tenant: Int
id: ID!
workflowinstance:[WorkflowInstance]
workflownode:WorkflowNode
workflowstage:WorkflowStage
}
type WorkflowInstanceConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowInstance]
}
#
type WorkflowInstance {
#
complete: Date
#
initiated: Date
tenant: Int
id: ID!
workflowevents:[WorkflowEvent]
workflow:Workflow
requests:[Request]
workflowstatuss:[WorkflowStatus]
}
type WorkflowNodeConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowNode]
}
#
type WorkflowNode {
#
name: String
#
description: String
#
help: String
#
sequence: Int
#
require_approval: Boolean
tenant: Int
id: ID!
workflow:Workflow
workflowevents:[WorkflowEvent]
workflowstages:[WorkflowStage]
workflows:[Workflow]
processs:[Process]
workflownodecfs:[WorkflowNodeCF]
module:Module
}
type WorkflowNodeCFConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowNodeCF]
}
#
type WorkflowNodeCF {
#
name: String
#
description: String
#
help: String
#
required: Boolean
tenant: Int
id: ID!
workflowcfvalues:[WorkflowCFValue]
workflowcftype:[WorkflowCFType]
workflownode:[WorkflowNode]
}
type WorkflowPhaseConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowPhase]
}
#
type WorkflowPhase {
#
name: String
#
description: String
#
help: String
tenant: Int
id: ID!
workflowstages:[WorkflowStage]
workflow:Workflow
}
type WorkflowStageConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowStage]
}
#
type WorkflowStage {
#
name: String
#
description: String
#
help: String
tenant: Int
id: ID!
workflowphase:WorkflowPhase
workflownode:[WorkflowNode]
workflowevents:[WorkflowEvent]
}
type WorkflowStatusConnection {
totalPages: Int
totalElements: Int
numberOfElements: Int
size: Int
number: Int
content: [WorkflowStatus]
}
#
type WorkflowStatus {
#
initiate_date: Date
#
completation_date: Date
tenant: Int
id: ID!
workflowstatustype:WorkflowStatusType
workflowinstance:WorkflowInstance
}

input WorkflowStatusTypeInput {
#
name: String
#
description: String
#
help: String
tenant: Int
id: ID!
}
input ActionInput {
#
description: Int
#
actionType: Int
id: ID!
module:ModuleInput
}
input AddressInput {
#
country: Int
#
locality: String
#
region: String
#
postOfficeBoxNumber: String
#
postalCode: String
#
streetAddress: String
tenant: Int
id: ID!
}
input AlertInput {
#
description: String
tenant: Int
id: ID!
}
input AlertRuleInput {
#
name: String
#
sql: String
#
filterClause: String
tenant: Int
id: ID!
alert:AlertInput
}
input AttributesInput {
#
name: String
#
description: String
#
help: String
#
sortno: Int
id: ID!
entityreference:EntityReferenceInput
}
input AuditLogsInput {
#
correlationId: String
#
message: String
tenant: Int
id: ID!
instance:InstanceInput
}
input AuthenticationTypeInput {
#
name: String
#
protocol: String
#
clientId: String
#
tenantId: String
#
keySecret: String
#
objectId: String
#
isDefault: Boolean
tenant: Int
id: ID!
}
input CollaboratorInput {
#
affiliation: String
#
contactPoint: String
#
identifier: String
tenant: Int
id: ID!
person:PersonInput
}
input ComponentInput {
#
name: String
#
version: String
#
releaseNo: String
#
info: String
id: ID!
}
input CountryInput {
#Name of the Country
name: String
#Abbreviation of the country
iso3: String
#
number: Int
#
full_name: String
#
code: String
id: ID!
}
input CropInput {
#
crop_code: String
#
crop_name: String
#
description: String
id: ID!
}
input CustomerInput {
#
name: String
#
phone: String
#
officialEmail: String
#
alternateEmail: String
#
jobTitle: String
#
languagePreference: String
#
phoneExtension: String
#
isActive: String
id: ID!
organization:OrganizationInput
}
input DelegationInput {
#
startDate: Date
#
endDate: Date
#
DelegateTo: String
tenant: Int
id: ID!
user:UserInput
}
input DonorInput {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant: Int
id: ID!
person:PersonInput
}
input EmailTemplateInput {
#
name: String
#
subject: String
#
to: String
#
template: String
#
bcc: String
id: ID!
tenant:TenantInput
}
input EntityReferenceInput {
#
entity: String
#
textfield: String
#
valuefield: String
#
storefield: String
tenant: Int
id: ID!
numbersequencerule:[NumberSequenceRuleInput]
emailtemplate:[EmailTemplateInput]
}
input HtmlTagInput {
#
tagName: String
id: ID!
}
input InstanceInput {
#
server: String
#
port: String
#
health: String
id: ID!
component:ComponentInput
tenant:TenantInput
}
input LanguageInput {
#
name: String
#
codeISO: String
#
isbase: String
id: ID!
}
input MessageInput {
#
Description: String
#
sql: String
#
filterClause: String
id: ID!
component:ComponentInput
}
input ModuleInput {
#
name: String
#
description: String
#
help: String
#
route: String
#
MainEntity: String
id: ID!
component:ComponentInput
}
input NumberSequenceRuleInput {
#
name: String
#
lowest: Int
#
nextrec: Int
#
format: String
#
lastcode: String
id: ID!
tenant:TenantInput
}
input NumberSequenceRuleSegmentInput {
#
Length: Int
#
FieldOrigin: String
#
Position: Int
tenant: Int
id: ID!
numbersequencerule:NumberSequenceRuleInput
segment:SegmentInput
}
input OrganizationInput {
#
legalName: String
#
phone: String
#
webpage: String
#
slogan: String
#
name: String
#
taxID: String
#
logo: String
#
isActive: String
#
defaultAuthentication: Int
#
defaultTheme: Int
#
organization_code: Int
id: ID!
customer:CustomerInput
}
input PartnerInput {
#
affiliation: String
#
contactPoint: String
#
indentifier: String
tenant: Int
id: ID!
person:PersonInput
}
input PersonInput {
#
giveName: String
#
familyName: String
#
additionalName: String
#
email: String
#
officialEmail: String
#
gender: String
#
hasCredential: Boolean
#
jobTitle: String
#
knowsAbout: String
#
language: Int
#
phone: String
#
status: String
id: ID!
address:AddressInput
tenant:TenantInput
}
input PreferenceInput {
#
comment: String
tenant: Int
id: ID!
user:UserInput
alert:AlertInput
styletheme:StyleThemeInput
}
input ProcessInput {
#
name: String
#
description: String
#
code: String
#
isBackground: Boolean
#
dbFunction: String
#
callReport: Boolean
#
path: String
tenant: Int
id: ID!
workflownode:[WorkflowNodeInput]
}
input ProgramInput {
#Textual identifier of the program 
program_code: String
#Full name of the program
program_name: String
#Type of the program {breeding, molecular, seed health, etc.}
program_type: String
#Status of the program
program_status: String
#Additional information about the program
description: String
id: ID!
tenant:TenantInput
crop:CropInput
}
input ProjectInput {
#
leader_id: Int
#
project_code: String
#
project_name: String
#
project_status: String
#
description: String
tenant: Int
id: ID!
program:ProgramInput
person:PersonInput
}
input RequestInput {
#Id of the person who is making a request
requester: String
#Date when the request was submitted
submition_date: Date
#ID of the admin contact for the request
admin_contact: String
#
charge_account: String
#Additional information about the request
description: String
tenant: Int
id: ID!
workflowinstance:WorkflowInstanceInput
}
input RoleInput {
#
description: String
#
securityGroup: String
tenant: Int
id: ID!
user:[UserInput]
}
input RoleActionInput {
#
allow: Int
tenant: Int
id: ID!
action:ActionInput
role:RoleInput
}
input SchemeInput {
#
scheme_code: String
#
scheme_name: String
#
description: String
tenant: Int
id: ID!
}
input SeasonInput {
#
season_code: String
#
season_name: String
#
description: String
tenant: Int
id: ID!
crop:[CropInput]
}
input SegmentInput {
#
name: String
#
tag: String
#
isAPI: Boolean
#
isDatabase: Boolean
#
IsAutoNum: Boolean
#
IsStatic: Boolean
#
IsFormule: Boolean
#
Formule: String
#
IsOrigin: Boolean
tenant: Int
id: ID!
entityreference:EntityReferenceInput
}
input SessionInput {
#
webSession: String
#
remote_Address: String
#
remote_host: String
tenant: Int
id: ID!
user:UserInput
instance:InstanceInput
}
input StyleThemeInput {
#
description: String
#
path: String
#
physicalName: String
#
isDefault: Boolean
tenant: Int
id: ID!
}
input TenantInput {
#
name: String
#
expiration: Date
#
expire: Boolean
id: ID!
organization:OrganizationInput
authenticationtype:AuthenticationTypeInput
customer:CustomerInput
}
input TranslationInput {
#
translation: String
#
languageTo: Int
id: ID!
alert:AlertInput
attributes:AttributesInput
language:LanguageInput
message:MessageInput
htmltag:HtmlTagInput
module:ModuleInput
}
input UserInput {
#
userName: String
#
userPassword: String
#
lastAccess: Date
#
defaultRole: Int
#
isIS: Int
id: ID!
tenant:TenantInput
}
input VendorInput {
#Code identifier for the Vendor

code: String
#Reference for the Vendor
reference: String
#
status: String
tenant: Int
id: ID!
country:CountryInput
person:PersonInput
}
input WorkflowInput {
#
description: String
#
help: String
#
sortno: Int
id: ID!
tenant:TenantInput
workflownode:WorkflowNodeInput
}
input WorkflowCFTypeInput {
#
name: String
#
description: String
#
help: String
#
type: String
tenant: Int
id: ID!
}
input WorkflowCFValueInput {
#
FLAG_Value: Boolean
#
TEXT_Value: String
#
NUM_Value: Int
#
DATE_Value: Date
#
CODE_Value: Int
tenant: Int
id: ID!
request:RequestInput
workflownodecf:WorkflowNodeCFInput
}
input WorkflowEventInput {
#
completed: Date
#
error: String
#
description: String
tenant: Int
id: ID!
workflowinstance:[WorkflowInstanceInput]
workflownode:WorkflowNodeInput
workflowstage:WorkflowStageInput
}
input WorkflowInstanceInput {
#
complete: Date
#
initiated: Date
tenant: Int
id: ID!
workflow:WorkflowInput
}
input WorkflowNodeInput {
#
name: String
#
description: String
#
help: String
#
sequence: Int
#
require_approval: Boolean
tenant: Int
id: ID!
workflow:WorkflowInput
module:ModuleInput
}
input WorkflowNodeCFInput {
#
name: String
#
description: String
#
help: String
#
required: Boolean
tenant: Int
id: ID!
workflowcftype:[WorkflowCFTypeInput]
workflownode:[WorkflowNodeInput]
}
input WorkflowPhaseInput {
#
name: String
#
description: String
#
help: String
tenant: Int
id: ID!
workflow:WorkflowInput
}
input WorkflowStageInput {
#
name: String
#
description: String
#
help: String
tenant: Int
id: ID!
workflowphase:WorkflowPhaseInput
workflownode:[WorkflowNodeInput]
}
input WorkflowStatusInput {
#
initiate_date: Date
#
completation_date: Date
tenant: Int
id: ID!
workflowstatustype:WorkflowStatusTypeInput
workflowinstance:WorkflowInstanceInput
}

input FilterInput { 
mod: FilterMod = EQ
col: String!
val: String!
}

input SortInput {
col: String!
mod: SortMod = ASC
}

input PageInput {
number: Int! = 0
size: Int!=1
}

enum FilterMod {
EQ
LK
}

enum SortMod {
ASC
DES
}

scalar Date

