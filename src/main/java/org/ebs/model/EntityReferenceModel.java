///////////////////////////////////////////////////////////
//  EntityReferenceModel.java
//  Macromedia ActionScript Implementation of the Class EntityReferenceModel
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:28 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.model;

import org.ebs.util.Auditable;
import javax.persistence.ManyToMany;
import lombok.Getter;
import lombok.Setter;
import javax.persistence.FetchType;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:28 AM
 */
@Entity @Table(name="EntityReference",schema="core") @Getter @Setter
public class EntityReferenceModel extends Auditable {

	private static final long serialVersionUID = -451328685;
	@Column(name="tenant_id")
	private int tenant;
	@Column(name="entity")
	private String entity;
	@Column(name="textfield")
	private String textfield;
	@Column(name="valuefield")
	private String valuefield;
	@Column(name="storefield")
	private String storefield;
	@Column(name="entitySchema")
	private String entitySchema;
	@GeneratedValue(strategy= GenerationType.IDENTITY) @Id @Column
	private int id;
	@OneToMany(mappedBy = "entityreference",fetch=FetchType.LAZY, cascade = CascadeType.ALL)
	private Set<AttributesModel> attributess;
	@ManyToMany(mappedBy="entityreferences")
	private Set<EmailTemplateModel> emailtemplates;
	@ManyToMany(mappedBy="entityreferences")
	private Set<DomainModel> domains;
	@OneToMany(mappedBy = "entityreference",fetch=FetchType.LAZY, cascade = CascadeType.ALL)
	private Set<WorkflowModel> workflows;
	@OneToMany(mappedBy = "entityreference",fetch=FetchType.LAZY, cascade = CascadeType.ALL)
	private Set<SegmentModel> segments;
	@OneToMany(mappedBy = "entityreference",fetch=FetchType.LAZY, cascade = CascadeType.ALL)
	private Set<NodeModel> nodes;
	@ManyToMany(mappedBy="entityreferences")
	private Set<NumberSequenceRuleModel> numbersequencerules;
	@OneToMany(mappedBy = "entityreference",fetch=FetchType.LAZY, cascade = CascadeType.ALL)
	private Set<NodeCfModel> nodecfs;

	@Override
	public String toString(){
		return "EntityReferenceModel [id=" + id + ",]";
	}

}