///////////////////////////////////////////////////////////
//  MutationResolver.java
//  Macromedia ActionScript Implementation of the Class MutationResolver
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:05:24 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.mutation;

import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.beans.factory.annotation.Autowired;
import org.ebs.services.to.TraitTo;
import org.ebs.services.to.Input.TraitInput;
import org.ebs.services.TraitService;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.to.Input.TechnologyPlatformInput;
import org.ebs.services.TechnologyPlatformService;
import org.ebs.services.to.ServiceTypeTo;
import org.ebs.services.to.Input.ServiceTypeInput;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.to.Input.ServiceProviderInput;
import org.ebs.services.ServiceProviderService;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.to.Input.WorkflowNodeCFInput;
import org.ebs.services.WorkflowNodeCFService;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.to.Input.WorkflowInstanceInput;
import org.ebs.services.WorkflowInstanceService;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.Input.WorkflowEventInput;
import org.ebs.services.WorkflowEventService;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.to.Input.WorkflowCFValueInput;
import org.ebs.services.WorkflowCFValueService;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.to.Input.WorkflowCFTypeInput;
import org.ebs.services.WorkflowCFTypeService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.Input.WorkflowInput;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.VendorTo;
import org.ebs.services.to.Input.VendorInput;
import org.ebs.services.VendorService;
import org.ebs.services.to.UserTo;
import org.ebs.services.to.Input.UserInput;
import org.ebs.services.UserService;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.Input.TranslationInput;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.Input.TenantInput;
import org.ebs.services.TenantService;
import org.ebs.services.to.TeamTo;
import org.ebs.services.to.Input.TeamInput;
import org.ebs.services.TeamService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.to.Input.StyleThemeInput;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.SessionTo;
import org.ebs.services.to.Input.SessionInput;
import org.ebs.services.SessionService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.to.Input.SegmentInput;
import org.ebs.services.SegmentService;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.to.Input.SeasonInput;
import org.ebs.services.SeasonService;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.to.Input.RoleActionInput;
import org.ebs.services.RoleActionService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.to.Input.RoleInput;
import org.ebs.services.RoleService;
import org.ebs.services.to.RequestTo;
import org.ebs.services.to.Input.RequestInput;
import org.ebs.services.RequestService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.to.Input.ProjectInput;
import org.ebs.services.ProjectService;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.Input.ProgramInput;
import org.ebs.services.ProgramService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.Input.ProcessInput;
import org.ebs.services.ProcessService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.to.Input.PreferenceInput;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.Input.PersonInput;
import org.ebs.services.PersonService;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.to.Input.PartnerInput;
import org.ebs.services.PartnerService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.to.Input.OrganizationInput;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.to.Input.NumberSequenceRuleSegmentInput;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.to.Input.NumberSequenceRuleInput;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.Input.ModuleInput;
import org.ebs.services.ModuleService;
import org.ebs.services.to.NotificationTo;
import org.ebs.services.to.Input.NotificationInput;
import org.ebs.services.NotificationService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.Input.LanguageInput;
import org.ebs.services.LanguageService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.Input.InstanceInput;
import org.ebs.services.InstanceService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.Input.HtmlTagInput;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.Input.EntityReferenceInput;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.to.Input.EmailTemplateInput;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.DonorTo;
import org.ebs.services.to.Input.DonorInput;
import org.ebs.services.DonorService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.to.Input.DelegationInput;
import org.ebs.services.DelegationService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.to.Input.CustomerInput;
import org.ebs.services.CustomerService;
import org.ebs.services.to.CropTo;
import org.ebs.services.to.Input.CropInput;
import org.ebs.services.CropService;
import org.ebs.services.to.CountryTo;
import org.ebs.services.to.Input.CountryInput;
import org.ebs.services.CountryService;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.to.Input.ComponentInput;
import org.ebs.services.ComponentService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.to.Input.CollaboratorInput;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.to.Input.AuthenticationTypeInput;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.to.Input.AuditLogsInput;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.Input.AttributesInput;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.to.Input.AlertRuleInput;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.to.Input.AlertInput;
import org.ebs.services.AlertService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.to.Input.AddressInput;
import org.ebs.services.AddressService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.Input.ActionInput;
import org.ebs.services.ActionService;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.to.Input.WorkflowStatusTypeInput;
import org.ebs.services.WorkflowStatusTypeService;
import com.coxautodev.graphql.tools.GraphQLMutationResolver;
import org.ebs.services.to.Input.ServiceInput;
import org.ebs.services.ServiceService;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.to.Input.PurposeInput;
import org.ebs.services.PurposeService;
import org.ebs.services.to.MarkerSynonymTo;
import org.ebs.services.to.Input.MarkerSynonymInput;
import org.ebs.services.MarkerSynonymService;
import org.ebs.services.to.MarkerTo;
import org.ebs.services.to.Input.MarkerInput;
import org.ebs.services.MarkerService;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.to.Input.DataFormatInput;
import org.ebs.services.DataFormatService;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.to.Input.AssayGeneInput;
import org.ebs.services.AssayGeneService;
import org.ebs.services.to.AssayclassTo;
import org.ebs.services.to.Input.AssayclassInput;
import org.ebs.services.AssayclassService;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.to.Input.TraitClassInput;
import org.ebs.services.TraitClassService;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.to.Input.WorkflowStatusInput;
import org.ebs.services.WorkflowStatusService;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.Input.WorkflowStageInput;
import org.ebs.services.WorkflowStageService;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.Input.WorkflowPhaseInput;
import org.ebs.services.WorkflowPhaseService;
import org.ebs.services.to.WorkflowNodeCFTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:05:24 AM
 */
@Component @Validated
public class MutationResolver implements GraphQLMutationResolver {

	private TraitService traitService;
	private TechnologyPlatformService technologyplatformService;
	private ServiceTypeService servicetypeService;
	private ServiceProviderService serviceproviderService;
	private ServiceService serviceService;
	private PurposeService purposeService;
	private MarkerSynonymService markersynonymService;
	private MarkerService markerService;
	private DataFormatService dataformatService;
	private AssayGeneService assaygeneService;
	private AssayclassService assayclassService;
	private TraitClassService traitclassService;
	private WorkflowStatusService workflowstatusService;
	private WorkflowStageService workflowstageService;
	private WorkflowPhaseService workflowphaseService;
	private WorkflowNodeCFService workflownodecfService;
	private WorkflowNodeService workflownodeService;
	private WorkflowInstanceService workflowinstanceService;
	private WorkflowEventService workfloweventService;
	private WorkflowCFValueService workflowcfvalueService;
	private WorkflowCFTypeService workflowcftypeService;
	private WorkflowService workflowService;
	private VendorService vendorService;
	private UserService userService;
	private TranslationService translationService;
	private TenantService tenantService;
	private TeamService teamService;
	private StyleThemeService stylethemeService;
	private SessionService sessionService;
	private SegmentService segmentService;
	private SeasonService seasonService;
	private RoleActionService roleactionService;
	private RoleService roleService;
	private RequestService requestService;
	private ProjectService projectService;
	private ProgramService programService;
	private ProcessService processService;
	private PreferenceService preferenceService;
	private PersonService personService;
	private PartnerService partnerService;
	private OrganizationService organizationService;
	private NumberSequenceRuleSegmentService numbersequencerulesegmentService;
	private NumberSequenceRuleService numbersequenceruleService;
	private ModuleService moduleService;
	private NotificationService notificationService;
	private LanguageService languageService;
	private InstanceService instanceService;
	private HtmlTagService htmltagService;
	private EntityReferenceService entityreferenceService;
	private EmailTemplateService emailtemplateService;
	private DonorService donorService;
	private DelegationService delegationService;
	private CustomerService customerService;
	private CropService cropService;
	private CountryService countryService;
	private ComponentService componentService;
	private CollaboratorService collaboratorService;
	private AuthenticationTypeService authenticationtypeService;
	private AuditLogsService auditlogsService;
	private AttributesService attributesService;
	private AlertRuleService alertruleService;
	private AlertService alertService;
	private AddressService addressService;
	private ActionService actionService;
	private WorkflowStatusTypeService workflowstatustypeService;

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo createaction(ActionInput actionInput){
		return actionService.createaction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo createaddress(AddressInput addressInput){
		return addressService.createaddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo createalert(AlertInput alertInput){
		return alertService.createalert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo createalertrule(AlertRuleInput alertruleInput){
		return alertruleService.createalertrule(alertruleInput);
	}

	/**
	 * 
	 * @param assayclassInput
	 */
	public AssayclassTo createassayclass(AssayclassInput assayclassInput){
		return assayclassService.createassayclass(assayclassInput);
	}

	/**
	 * 
	 * @param assaygeneInput
	 */
	public AssayGeneTo createassaygene(AssayGeneInput assaygeneInput){
		return assaygeneService.createassaygene(assaygeneInput);
	}

	/**
	 * 
	 * @param attributesInput
	 */
	public AttributesTo createattributes(AttributesInput attributesInput){
		return attributesService.createattributes(attributesInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo createauditlogs(AuditLogsInput auditlogsInput){
		return auditlogsService.createauditlogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo createauthenticationtype(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.createauthenticationtype(authenticationtypeInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo createcollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.createcollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo createcomponent(ComponentInput componentInput){
		return componentService.createcomponent(componentInput);
	}

	/**
	 * 
	 * @param countryInput
	 */
	public CountryTo createcountry(CountryInput countryInput){
		return countryService.createcountry(countryInput);
	}

	/**
	 * 
	 * @param cropInput
	 */
	public CropTo createcrop(CropInput cropInput){
		return cropService.createcrop(cropInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo createcustomer(CustomerInput customerInput){
		return customerService.createcustomer(customerInput);
	}

	/**
	 * 
	 * @param dataformatInput
	 */
	public DataFormatTo createdataformat(DataFormatInput dataformatInput){
		return dataformatService.createdataformat(dataformatInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo createdelegation(DelegationInput delegationInput){
		return delegationService.createdelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo createdonor(DonorInput donorInput){
		return donorService.createdonor(donorInput);
	}

	/**
	 * 
	 * @param emailtemplateInput
	 */
	public EmailTemplateTo createemailtemplate(EmailTemplateInput emailtemplateInput){
		return emailtemplateService.createemailtemplate(emailtemplateInput);
	}

	/**
	 * 
	 * @param entityreferenceInput
	 */
	public EntityReferenceTo createentityreference(EntityReferenceInput entityreferenceInput){
		return entityreferenceService.createentityreference(entityreferenceInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo createhtmltag(HtmlTagInput htmltagInput){
		return htmltagService.createhtmltag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo createinstance(InstanceInput instanceInput){
		return instanceService.createinstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo createlanguage(LanguageInput languageInput){
		return languageService.createlanguage(languageInput);
	}

	/**
	 * 
	 * @param markerInput
	 */
	public MarkerTo createmarker(MarkerInput markerInput){
		return markerService.createmarker(markerInput);
	}

	/**
	 * 
	 * @param markersynonymInput
	 */
	public MarkerSynonymTo createmarkersynonym(MarkerSynonymInput markersynonymInput){
		return markersynonymService.createmarkersynonym(markersynonymInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo createmodule(ModuleInput moduleInput){
		return moduleService.createmodule(moduleInput);
	}

	/**
	 * 
	 * @param notificationInput
	 */
	public NotificationTo createnotification(NotificationInput notificationInput){
		return notificationService.createnotification(notificationInput);
	}

	/**
	 * 
	 * @param numbersequenceruleInput
	 */
	public NumberSequenceRuleTo createnumbersequencerule(NumberSequenceRuleInput numbersequenceruleInput){
		return numbersequenceruleService.createnumbersequencerule(numbersequenceruleInput);
	}

	/**
	 * 
	 * @param numbersequencerulesegmentInput
	 */
	public NumberSequenceRuleSegmentTo createnumbersequencerulesegment(NumberSequenceRuleSegmentInput numbersequencerulesegmentInput){
		return numbersequencerulesegmentService.createnumbersequencerulesegment(numbersequencerulesegmentInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo createorganization(OrganizationInput organizationInput){
		return organizationService.createorganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo createpartner(PartnerInput partnerInput){
		return partnerService.createpartner(partnerInput);
	}

	/**
	 * 
	 * @param personInput
	 */
	public PersonTo createperson(PersonInput personInput){
		return personService.createperson(personInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo createpreference(PreferenceInput preferenceInput){
		return preferenceService.createpreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo createprocess(ProcessInput processInput){
		return processService.createprocess(processInput);
	}

	/**
	 * 
	 * @param programInput
	 */
	public ProgramTo createprogram(ProgramInput programInput){
		return programService.createprogram(programInput);
	}

	/**
	 * 
	 * @param projectInput
	 */
	public ProjectTo createproject(ProjectInput projectInput){
		return projectService.createproject(projectInput);
	}

	/**
	 * 
	 * @param purposeInput
	 */
	public PurposeTo createpurpose(PurposeInput purposeInput){
		return purposeService.createpurpose(purposeInput);
	}

	/**
	 * 
	 * @param requestInput
	 */
	public RequestTo createrequest(RequestInput requestInput){
		return requestService.createrequest(requestInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo createrole(RoleInput roleInput){
		return roleService.createrole(roleInput);
	}

	/**
	 * 
	 * @param roleactionInput
	 */
	public RoleActionTo createroleaction(RoleActionInput roleactionInput){
		return roleactionService.createroleaction(roleactionInput);
	}

	/**
	 * 
	 * @param seasonInput
	 */
	public SeasonTo createseason(SeasonInput seasonInput){
		return seasonService.createseason(seasonInput);
	}

	/**
	 * 
	 * @param segmentInput
	 */
	public SegmentTo createsegment(SegmentInput segmentInput){
		return segmentService.createsegment(segmentInput);
	}

	/**
	 * 
	 * @param serviceInput
	 */
	public ServiceTo createservice(ServiceInput serviceInput){
		return serviceService.createservice(serviceInput);
	}

	/**
	 * 
	 * @param serviceproviderInput
	 */
	public ServiceProviderTo createserviceprovider(ServiceProviderInput serviceproviderInput){
		return serviceproviderService.createserviceprovider(serviceproviderInput);
	}

	/**
	 * 
	 * @param servicetypeInput
	 */
	public ServiceTypeTo createservicetype(ServiceTypeInput servicetypeInput){
		return servicetypeService.createservicetype(servicetypeInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo createsession(SessionInput sessionInput){
		return sessionService.createsession(sessionInput);
	}

	/**
	 * 
	 * @param stylethemeInput
	 */
	public StyleThemeTo createstyletheme(StyleThemeInput stylethemeInput){
		return stylethemeService.createstyletheme(stylethemeInput);
	}

	/**
	 * 
	 * @param teamInput
	 */
	public TeamTo createteam(TeamInput teamInput){
		return teamService.createteam(teamInput);
	}

	/**
	 * 
	 * @param technologyplatformInput
	 */
	public TechnologyPlatformTo createtechnologyplatform(TechnologyPlatformInput technologyplatformInput){
		return technologyplatformService.createtechnologyplatform(technologyplatformInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo createtenant(TenantInput tenantInput){
		return tenantService.createtenant(tenantInput);
	}

	/**
	 * 
	 * @param traitInput
	 */
	public TraitTo createtrait(TraitInput traitInput){
		return traitService.createtrait(traitInput);
	}

	/**
	 * 
	 * @param traitclassInput
	 */
	public TraitClassTo createtraitclass(TraitClassInput traitclassInput){
		return traitclassService.createtraitclass(traitclassInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo createtranslation(TranslationInput translationInput){
		return translationService.createtranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo createuser(UserInput userInput){
		return userService.createuser(userInput);
	}

	/**
	 * 
	 * @param vendorInput
	 */
	public VendorTo createvendor(VendorInput vendorInput){
		return vendorService.createvendor(vendorInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo createworkflow(WorkflowInput workflowInput){
		return workflowService.createworkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflowcftypeInput
	 */
	public WorkflowCFTypeTo createworkflowcftype(WorkflowCFTypeInput workflowcftypeInput){
		return workflowcftypeService.createworkflowcftype(workflowcftypeInput);
	}

	/**
	 * 
	 * @param workflowcfvalueInput
	 */
	public WorkflowCFValueTo createworkflowcfvalue(WorkflowCFValueInput workflowcfvalueInput){
		return workflowcfvalueService.createworkflowcfvalue(workflowcfvalueInput);
	}

	/**
	 * 
	 * @param workfloweventInput
	 */
	public WorkflowEventTo createworkflowevent(WorkflowEventInput workfloweventInput){
		return workfloweventService.createworkflowevent(workfloweventInput);
	}

	/**
	 * 
	 * @param workflowinstanceInput
	 */
	public WorkflowInstanceTo createworkflowinstance(WorkflowInstanceInput workflowinstanceInput){
		return workflowinstanceService.createworkflowinstance(workflowinstanceInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo createworkflownode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.createworkflownode(workflownodeInput);
	}

	/**
	 * 
	 * @param workflownodecfInput
	 */
	public WorkflowNodeCFTo createworkflownodecf(WorkflowNodeCFInput workflownodecfInput){
		return workflownodecfService.createworkflownodecf(workflownodecfInput);
	}

	/**
	 * 
	 * @param workflowphaseInput
	 */
	public WorkflowPhaseTo createworkflowphase(WorkflowPhaseInput workflowphaseInput){
		return workflowphaseService.createworkflowphase(workflowphaseInput);
	}

	/**
	 * 
	 * @param workflowstageInput
	 */
	public WorkflowStageTo createworkflowstage(WorkflowStageInput workflowstageInput){
		return workflowstageService.createworkflowstage(workflowstageInput);
	}

	/**
	 * 
	 * @param workflowstatusInput
	 */
	public WorkflowStatusTo createworkflowstatus(WorkflowStatusInput workflowstatusInput){
		return workflowstatusService.createworkflowstatus(workflowstatusInput);
	}

	/**
	 * 
	 * @param workflowstatustypeInput
	 */
	public WorkflowStatusTypeTo createworkflowstatustype(WorkflowStatusTypeInput workflowstatustypeInput){
		return workflowstatustypeService.createworkflowstatustype(workflowstatustypeInput);
	}

	/**
	 * 
	 * @param idaction
	 */
	public int deleteaction(int idaction){
		return actionService.deleteaction(idaction);
	}

	/**
	 * 
	 * @param idaddress
	 */
	public int deleteaddress(int idaddress){
		return addressService.deleteaddress(idaddress);
	}

	/**
	 * 
	 * @param idalert
	 */
	public int deletealert(int idalert){
		return alertService.deletealert(idalert);
	}

	/**
	 * 
	 * @param idalertrule
	 */
	public int deletealertrule(int idalertrule){
		return alertruleService.deletealertrule(idalertrule);
	}

	/**
	 * 
	 * @param idassayclass
	 */
	public int deleteassayclass(int idassayclass){
		return assayclassService.deleteassayclass(idassayclass);
	}

	/**
	 * 
	 * @param idassaygene
	 */
	public int deleteassaygene(int idassaygene){
		return assaygeneService.deleteassaygene(idassaygene);
	}

	/**
	 * 
	 * @param idattributes
	 */
	public int deleteattributes(int idattributes){
		return attributesService.deleteattributes(idattributes);
	}

	/**
	 * 
	 * @param idauditlogs
	 */
	public int deleteauditlogs(int idauditlogs){
		return auditlogsService.deleteauditlogs(idauditlogs);
	}

	/**
	 * 
	 * @param idauthenticationtype
	 */
	public int deleteauthenticationtype(int idauthenticationtype){
		return authenticationtypeService.deleteauthenticationtype(idauthenticationtype);
	}

	/**
	 * 
	 * @param idcollaborator
	 */
	public int deletecollaborator(int idcollaborator){
		return collaboratorService.deletecollaborator(idcollaborator);
	}

	/**
	 * 
	 * @param idcomponent
	 */
	public int deletecomponent(int idcomponent){
		return componentService.deletecomponent(idcomponent);
	}

	/**
	 * 
	 * @param idcountry
	 */
	public int deletecountry(int idcountry){
		return countryService.deletecountry(idcountry);
	}

	/**
	 * 
	 * @param idcrop
	 */
	public int deletecrop(int idcrop){
		return cropService.deletecrop(idcrop);
	}

	/**
	 * 
	 * @param idcustomer
	 */
	public int deletecustomer(int idcustomer){
		return customerService.deletecustomer(idcustomer);
	}

	/**
	 * 
	 * @param iddataformat
	 */
	public int deletedataformat(int iddataformat){
		return dataformatService.deletedataformat(iddataformat);
	}

	/**
	 * 
	 * @param iddelegation
	 */
	public int deletedelegation(int iddelegation){
		return delegationService.deletedelegation(iddelegation);
	}

	/**
	 * 
	 * @param iddonor
	 */
	public int deletedonor(int iddonor){
		return donorService.deletedonor(iddonor);
	}

	/**
	 * 
	 * @param idemailtemplate
	 */
	public int deleteemailtemplate(int idemailtemplate){
		return emailtemplateService.deleteemailtemplate(idemailtemplate);
	}

	/**
	 * 
	 * @param identityreference
	 */
	public int deleteentityreference(int identityreference){
		return entityreferenceService.deleteentityreference(identityreference);
	}

	/**
	 * 
	 * @param idhtmltag
	 */
	public int deletehtmltag(int idhtmltag){
		return htmltagService.deletehtmltag(idhtmltag);
	}

	/**
	 * 
	 * @param idinstance
	 */
	public int deleteinstance(int idinstance){
		return instanceService.deleteinstance(idinstance);
	}

	/**
	 * 
	 * @param idlanguage
	 */
	public int deletelanguage(int idlanguage){
		return languageService.deletelanguage(idlanguage);
	}

	/**
	 * 
	 * @param idmarker
	 */
	public int deletemarker(int idmarker){
		return markerService.deletemarker(idmarker);
	}

	/**
	 * 
	 * @param idmarkersynonym
	 */
	public int deletemarkersynonym(int idmarkersynonym){
		return markersynonymService.deletemarkersynonym(idmarkersynonym);
	}

	/**
	 * 
	 * @param idmodule
	 */
	public int deletemodule(int idmodule){
		return moduleService.deletemodule(idmodule);
	}

	/**
	 * 
	 * @param idnotification
	 */
	public int deletenotification(int idnotification){
		return notificationService.deletenotification(idnotification);
	}

	/**
	 * 
	 * @param idnumbersequencerule
	 */
	public int deletenumbersequencerule(int idnumbersequencerule){
		return numbersequenceruleService.deletenumbersequencerule(idnumbersequencerule);
	}

	/**
	 * 
	 * @param idnumbersequencerulesegment
	 */
	public int deletenumbersequencerulesegment(int idnumbersequencerulesegment){
		return numbersequencerulesegmentService.deletenumbersequencerulesegment(idnumbersequencerulesegment);
	}

	/**
	 * 
	 * @param idorganization
	 */
	public int deleteorganization(int idorganization){
		return organizationService.deleteorganization(idorganization);
	}

	/**
	 * 
	 * @param idpartner
	 */
	public int deletepartner(int idpartner){
		return partnerService.deletepartner(idpartner);
	}

	/**
	 * 
	 * @param idperson
	 */
	public int deleteperson(int idperson){
		return personService.deleteperson(idperson);
	}

	/**
	 * 
	 * @param idpreference
	 */
	public int deletepreference(int idpreference){
		return preferenceService.deletepreference(idpreference);
	}

	/**
	 * 
	 * @param idprocess
	 */
	public int deleteprocess(int idprocess){
		return processService.deleteprocess(idprocess);
	}

	/**
	 * 
	 * @param idprogram
	 */
	public int deleteprogram(int idprogram){
		return programService.deleteprogram(idprogram);
	}

	/**
	 * 
	 * @param idproject
	 */
	public int deleteproject(int idproject){
		return projectService.deleteproject(idproject);
	}

	/**
	 * 
	 * @param idpurpose
	 */
	public int deletepurpose(int idpurpose){
		return purposeService.deletepurpose(idpurpose);
	}

	/**
	 * 
	 * @param idrequest
	 */
	public int deleterequest(int idrequest){
		return requestService.deleterequest(idrequest);
	}

	/**
	 * 
	 * @param idrole
	 */
	public int deleterole(int idrole){
		return roleService.deleterole(idrole);
	}

	/**
	 * 
	 * @param idroleaction
	 */
	public int deleteroleaction(int idroleaction){
		return roleactionService.deleteroleaction(idroleaction);
	}

	/**
	 * 
	 * @param idseason
	 */
	public int deleteseason(int idseason){
		return seasonService.deleteseason(idseason);
	}

	/**
	 * 
	 * @param idsegment
	 */
	public int deletesegment(int idsegment){
		return segmentService.deletesegment(idsegment);
	}

	/**
	 * 
	 * @param idservice
	 */
	public int deleteservice(int idservice){
		return serviceService.deleteservice(idservice);
	}

	/**
	 * 
	 * @param idserviceprovider
	 */
	public int deleteserviceprovider(int idserviceprovider){
		return serviceproviderService.deleteserviceprovider(idserviceprovider);
	}

	/**
	 * 
	 * @param idservicetype
	 */
	public int deleteservicetype(int idservicetype){
		return servicetypeService.deleteservicetype(idservicetype);
	}

	/**
	 * 
	 * @param idsession
	 */
	public int deletesession(int idsession){
		return sessionService.deletesession(idsession);
	}

	/**
	 * 
	 * @param idstyletheme
	 */
	public int deletestyletheme(int idstyletheme){
		return stylethemeService.deletestyletheme(idstyletheme);
	}

	/**
	 * 
	 * @param idteam
	 */
	public int deleteteam(int idteam){
		return teamService.deleteteam(idteam);
	}

	/**
	 * 
	 * @param idtechnologyplatform
	 */
	public int deletetechnologyplatform(int idtechnologyplatform){
		return technologyplatformService.deletetechnologyplatform(idtechnologyplatform);
	}

	/**
	 * 
	 * @param idtenant
	 */
	public int deletetenant(int idtenant){
		return tenantService.deletetenant(idtenant);
	}

	/**
	 * 
	 * @param idtrait
	 */
	public int deletetrait(int idtrait){
		return traitService.deletetrait(idtrait);
	}

	/**
	 * 
	 * @param idtraitclass
	 */
	public int deletetraitclass(int idtraitclass){
		return traitclassService.deletetraitclass(idtraitclass);
	}

	/**
	 * 
	 * @param idtranslation
	 */
	public int deletetranslation(int idtranslation){
		return translationService.deletetranslation(idtranslation);
	}

	/**
	 * 
	 * @param iduser
	 */
	public int deleteuser(int iduser){
		return userService.deleteuser(iduser);
	}

	/**
	 * 
	 * @param idvendor
	 */
	public int deletevendor(int idvendor){
		return vendorService.deletevendor(idvendor);
	}

	/**
	 * 
	 * @param idworkflow
	 */
	public int deleteworkflow(int idworkflow){
		return workflowService.deleteworkflow(idworkflow);
	}

	/**
	 * 
	 * @param idworkflowcftype
	 */
	public int deleteworkflowcftype(int idworkflowcftype){
		return workflowcftypeService.deleteworkflowcftype(idworkflowcftype);
	}

	/**
	 * 
	 * @param idworkflowcfvalue
	 */
	public int deleteworkflowcfvalue(int idworkflowcfvalue){
		return workflowcfvalueService.deleteworkflowcfvalue(idworkflowcfvalue);
	}

	/**
	 * 
	 * @param idworkflowevent
	 */
	public int deleteworkflowevent(int idworkflowevent){
		return workfloweventService.deleteworkflowevent(idworkflowevent);
	}

	/**
	 * 
	 * @param idworkflowinstance
	 */
	public int deleteworkflowinstance(int idworkflowinstance){
		return workflowinstanceService.deleteworkflowinstance(idworkflowinstance);
	}

	/**
	 * 
	 * @param idworkflownode
	 */
	public int deleteworkflownode(int idworkflownode){
		return workflownodeService.deleteworkflownode(idworkflownode);
	}

	/**
	 * 
	 * @param idworkflownodecf
	 */
	public int deleteworkflownodecf(int idworkflownodecf){
		return workflownodecfService.deleteworkflownodecf(idworkflownodecf);
	}

	/**
	 * 
	 * @param idworkflowphase
	 */
	public int deleteworkflowphase(int idworkflowphase){
		return workflowphaseService.deleteworkflowphase(idworkflowphase);
	}

	/**
	 * 
	 * @param idworkflowstage
	 */
	public int deleteworkflowstage(int idworkflowstage){
		return workflowstageService.deleteworkflowstage(idworkflowstage);
	}

	/**
	 * 
	 * @param idworkflowstatus
	 */
	public int deleteworkflowstatus(int idworkflowstatus){
		return workflowstatusService.deleteworkflowstatus(idworkflowstatus);
	}

	/**
	 * 
	 * @param idworkflowstatustype
	 */
	public int deleteworkflowstatustype(int idworkflowstatustype){
		return workflowstatustypeService.deleteworkflowstatustype(idworkflowstatustype);
	}

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo modifyaction(ActionInput actionInput){
		return actionService.modifyaction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo modifyaddress(AddressInput addressInput){
		return addressService.modifyaddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo modifyalert(AlertInput alertInput){
		return alertService.modifyalert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo modifyalertrule(AlertRuleInput alertruleInput){
		return alertruleService.modifyalertrule(alertruleInput);
	}

	/**
	 * 
	 * @param assayclassInput
	 */
	public AssayclassTo modifyassayclass(AssayclassInput assayclassInput){
		return assayclassService.modifyassayclass(assayclassInput);
	}

	/**
	 * 
	 * @param assaygeneInput
	 */
	public AssayGeneTo modifyassaygene(AssayGeneInput assaygeneInput){
		return assaygeneService.modifyassaygene(assaygeneInput);
	}

	/**
	 * 
	 * @param attributesInput
	 */
	public AttributesTo modifyattributes(AttributesInput attributesInput){
		return attributesService.modifyattributes(attributesInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo modifyauditlogs(AuditLogsInput auditlogsInput){
		return auditlogsService.modifyauditlogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo modifyauthenticationtype(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.modifyauthenticationtype(authenticationtypeInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo modifycollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.modifycollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo modifycomponent(ComponentInput componentInput){
		return componentService.modifycomponent(componentInput);
	}

	/**
	 * 
	 * @param countryInput
	 */
	public CountryTo modifycountry(CountryInput countryInput){
		return countryService.modifycountry(countryInput);
	}

	/**
	 * 
	 * @param cropInput
	 */
	public CropTo modifycrop(CropInput cropInput){
		return cropService.modifycrop(cropInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo modifycustomer(CustomerInput customerInput){
		return customerService.modifycustomer(customerInput);
	}

	/**
	 * 
	 * @param dataformatInput
	 */
	public DataFormatTo modifydataformat(DataFormatInput dataformatInput){
		return dataformatService.modifydataformat(dataformatInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo modifydelegation(DelegationInput delegationInput){
		return delegationService.modifydelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo modifydonor(DonorInput donorInput){
		return donorService.modifydonor(donorInput);
	}

	/**
	 * 
	 * @param emailtemplateInput
	 */
	public EmailTemplateTo modifyemailtemplate(EmailTemplateInput emailtemplateInput){
		return emailtemplateService.modifyemailtemplate(emailtemplateInput);
	}

	/**
	 * 
	 * @param entityreferenceInput
	 */
	public EntityReferenceTo modifyentityreference(EntityReferenceInput entityreferenceInput){
		return entityreferenceService.modifyentityreference(entityreferenceInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo modifyhtmltag(HtmlTagInput htmltagInput){
		return htmltagService.modifyhtmltag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo modifyinstance(InstanceInput instanceInput){
		return instanceService.modifyinstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo modifylanguage(LanguageInput languageInput){
		return languageService.modifylanguage(languageInput);
	}

	/**
	 * 
	 * @param markerInput
	 */
	public MarkerTo modifymarker(MarkerInput markerInput){
		return markerService.modifymarker(markerInput);
	}

	/**
	 * 
	 * @param markersynonymInput
	 */
	public MarkerSynonymTo modifymarkersynonym(MarkerSynonymInput markersynonymInput){
		return markersynonymService.modifymarkersynonym(markersynonymInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo modifymodule(ModuleInput moduleInput){
		return moduleService.modifymodule(moduleInput);
	}

	/**
	 * 
	 * @param notificationInput
	 */
	public NotificationTo modifynotification(NotificationInput notificationInput){
		return notificationService.modifynotification(notificationInput);
	}

	/**
	 * 
	 * @param numbersequenceruleInput
	 */
	public NumberSequenceRuleTo modifynumbersequencerule(NumberSequenceRuleInput numbersequenceruleInput){
		return numbersequenceruleService.modifynumbersequencerule(numbersequenceruleInput);
	}

	/**
	 * 
	 * @param numbersequencerulesegmentInput
	 */
	public NumberSequenceRuleSegmentTo modifynumbersequencerulesegment(NumberSequenceRuleSegmentInput numbersequencerulesegmentInput){
		return numbersequencerulesegmentService.modifynumbersequencerulesegment(numbersequencerulesegmentInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo modifyorganization(OrganizationInput organizationInput){
		return organizationService.modifyorganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo modifypartner(PartnerInput partnerInput){
		return partnerService.modifypartner(partnerInput);
	}

	/**
	 * 
	 * @param personInput
	 */
	public PersonTo modifyperson(PersonInput personInput){
		return personService.modifyperson(personInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo modifypreference(PreferenceInput preferenceInput){
		return preferenceService.modifypreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo modifyprocess(ProcessInput processInput){
		return processService.modifyprocess(processInput);
	}

	/**
	 * 
	 * @param programInput
	 */
	public ProgramTo modifyprogram(ProgramInput programInput){
		return programService.modifyprogram(programInput);
	}

	/**
	 * 
	 * @param projectInput
	 */
	public ProjectTo modifyproject(ProjectInput projectInput){
		return projectService.modifyproject(projectInput);
	}

	/**
	 * 
	 * @param purposeInput
	 */
	public PurposeTo modifypurpose(PurposeInput purposeInput){
		return purposeService.modifypurpose(purposeInput);
	}

	/**
	 * 
	 * @param requestInput
	 */
	public RequestTo modifyrequest(RequestInput requestInput){
		return requestService.modifyrequest(requestInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo modifyrole(RoleInput roleInput){
		return roleService.modifyrole(roleInput);
	}

	/**
	 * 
	 * @param roleactionInput
	 */
	public RoleActionTo modifyroleaction(RoleActionInput roleactionInput){
		return roleactionService.modifyroleaction(roleactionInput);
	}

	/**
	 * 
	 * @param seasonInput
	 */
	public SeasonTo modifyseason(SeasonInput seasonInput){
		return seasonService.modifyseason(seasonInput);
	}

	/**
	 * 
	 * @param segmentInput
	 */
	public SegmentTo modifysegment(SegmentInput segmentInput){
		return segmentService.modifysegment(segmentInput);
	}

	/**
	 * 
	 * @param serviceInput
	 */
	public ServiceTo modifyservice(ServiceInput serviceInput){
		return serviceService.modifyservice(serviceInput);
	}

	/**
	 * 
	 * @param serviceproviderInput
	 */
	public ServiceProviderTo modifyserviceprovider(ServiceProviderInput serviceproviderInput){
		return serviceproviderService.modifyserviceprovider(serviceproviderInput);
	}

	/**
	 * 
	 * @param servicetypeInput
	 */
	public ServiceTypeTo modifyservicetype(ServiceTypeInput servicetypeInput){
		return servicetypeService.modifyservicetype(servicetypeInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo modifysession(SessionInput sessionInput){
		return sessionService.modifysession(sessionInput);
	}

	/**
	 * 
	 * @param stylethemeInput
	 */
	public StyleThemeTo modifystyletheme(StyleThemeInput stylethemeInput){
		return stylethemeService.modifystyletheme(stylethemeInput);
	}

	/**
	 * 
	 * @param teamInput
	 */
	public TeamTo modifyteam(TeamInput teamInput){
		return teamService.modifyteam(teamInput);
	}

	/**
	 * 
	 * @param technologyplatformInput
	 */
	public TechnologyPlatformTo modifytechnologyplatform(TechnologyPlatformInput technologyplatformInput){
		return technologyplatformService.modifytechnologyplatform(technologyplatformInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo modifytenant(TenantInput tenantInput){
		return tenantService.modifytenant(tenantInput);
	}

	/**
	 * 
	 * @param traitInput
	 */
	public TraitTo modifytrait(TraitInput traitInput){
		return traitService.modifytrait(traitInput);
	}

	/**
	 * 
	 * @param traitclassInput
	 */
	public TraitClassTo modifytraitclass(TraitClassInput traitclassInput){
		return traitclassService.modifytraitclass(traitclassInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo modifytranslation(TranslationInput translationInput){
		return translationService.modifytranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo modifyuser(UserInput userInput){
		return userService.modifyuser(userInput);
	}

	/**
	 * 
	 * @param vendorInput
	 */
	public VendorTo modifyvendor(VendorInput vendorInput){
		return vendorService.modifyvendor(vendorInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo modifyworkflow(WorkflowInput workflowInput){
		return workflowService.modifyworkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflowcftypeInput
	 */
	public WorkflowCFTypeTo modifyworkflowcftype(WorkflowCFTypeInput workflowcftypeInput){
		return workflowcftypeService.modifyworkflowcftype(workflowcftypeInput);
	}

	/**
	 * 
	 * @param workflowcfvalueInput
	 */
	public WorkflowCFValueTo modifyworkflowcfvalue(WorkflowCFValueInput workflowcfvalueInput){
		return workflowcfvalueService.modifyworkflowcfvalue(workflowcfvalueInput);
	}

	/**
	 * 
	 * @param workfloweventInput
	 */
	public WorkflowEventTo modifyworkflowevent(WorkflowEventInput workfloweventInput){
		return workfloweventService.modifyworkflowevent(workfloweventInput);
	}

	/**
	 * 
	 * @param workflowinstanceInput
	 */
	public WorkflowInstanceTo modifyworkflowinstance(WorkflowInstanceInput workflowinstanceInput){
		return workflowinstanceService.modifyworkflowinstance(workflowinstanceInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo modifyworkflownode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.modifyworkflownode(workflownodeInput);
	}

	/**
	 * 
	 * @param workflownodecfInput
	 */
	public WorkflowNodeCFTo modifyworkflownodecf(WorkflowNodeCFInput workflownodecfInput){
		return workflownodecfService.modifyworkflownodecf(workflownodecfInput);
	}

	/**
	 * 
	 * @param workflowphaseInput
	 */
	public WorkflowPhaseTo modifyworkflowphase(WorkflowPhaseInput workflowphaseInput){
		return workflowphaseService.modifyworkflowphase(workflowphaseInput);
	}

	/**
	 * 
	 * @param workflowstageInput
	 */
	public WorkflowStageTo modifyworkflowstage(WorkflowStageInput workflowstageInput){
		return workflowstageService.modifyworkflowstage(workflowstageInput);
	}

	/**
	 * 
	 * @param workflowstatusInput
	 */
	public WorkflowStatusTo modifyworkflowstatus(WorkflowStatusInput workflowstatusInput){
		return workflowstatusService.modifyworkflowstatus(workflowstatusInput);
	}

	/**
	 * 
	 * @param workflowstatustypeInput
	 */
	public WorkflowStatusTypeTo modifyworkflowstatustype(WorkflowStatusTypeInput workflowstatustypeInput){
		return workflowstatustypeService.modifyworkflowstatustype(workflowstatustypeInput);
	}

	/**
	 * 
	 * @param organizationService
	 * @param roleactionService
	 * @param emailtemplateService
	 * @param entityreferenceService
	 * @param htmltagService
	 * @param instanceService
	 * @param languageService
	 * @param notificationService
	 * @param moduleService
	 * @param delegationService
	 * @param numbersequencerulesegmentService
	 * @param customerService
	 * @param partnerService
	 * @param personService
	 * @param preferenceService
	 * @param processService
	 * @param programService
	 * @param projectService
	 * @param requestService
	 * @param roleService
	 * @param numbersequenceruleService
	 * @param actionService
	 * @param traitService
	 * @param workflownodecfService
	 * @param workflowphaseService
	 * @param workflowstageService
	 * @param workflowstatusService
	 * @param traitclassService
	 * @param assayclassService
	 * @param assaygeneService
	 * @param donorService
	 * @param workflowstatustypeService
	 * @param alertruleService
	 * @param alertService
	 * @param attributesService
	 * @param auditlogsService
	 * @param authenticationtypeService
	 * @param collaboratorService
	 * @param componentService
	 * @param countryService
	 * @param cropService
	 * @param dataformatService
	 * @param stylethemeService
	 * @param workflownodeService
	 * @param workflowinstanceService
	 * @param workfloweventService
	 * @param workflowcfvalueService
	 * @param seasonService
	 * @param workflowcftypeService
	 * @param sessionService
	 * @param purposeService
	 * @param teamService
	 * @param tenantService
	 * @param translationService
	 * @param userService
	 * @param vendorService
	 * @param workflowService
	 * @param segmentService
	 * @param technologyplatformService
	 * @param serviceService
	 * @param serviceproviderService
	 * @param servicetypeService
	 * @param markersynonymService
	 * @param addressService
	 * @param markerService
	 */
	@Autowired
	public MutationResolver(OrganizationService organizationService, RoleActionService roleactionService, EmailTemplateService emailtemplateService, EntityReferenceService entityreferenceService, HtmlTagService htmltagService, InstanceService instanceService, LanguageService languageService, NotificationService notificationService, ModuleService moduleService, DelegationService delegationService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, CustomerService customerService, PartnerService partnerService, PersonService personService, PreferenceService preferenceService, ProcessService processService, ProgramService programService, ProjectService projectService, RequestService requestService, RoleService roleService, NumberSequenceRuleService numbersequenceruleService, ActionService actionService, TraitService traitService, WorkflowNodeCFService workflownodecfService, WorkflowPhaseService workflowphaseService, WorkflowStageService workflowstageService, WorkflowStatusService workflowstatusService, TraitClassService traitclassService, AssayclassService assayclassService, AssayGeneService assaygeneService, DonorService donorService, WorkflowStatusTypeService workflowstatustypeService, AlertRuleService alertruleService, AlertService alertService, AttributesService attributesService, AuditLogsService auditlogsService, AuthenticationTypeService authenticationtypeService, CollaboratorService collaboratorService, ComponentService componentService, CountryService countryService, CropService cropService, DataFormatService dataformatService, StyleThemeService stylethemeService, WorkflowNodeService workflownodeService, WorkflowInstanceService workflowinstanceService, WorkflowEventService workfloweventService, WorkflowCFValueService workflowcfvalueService, SeasonService seasonService, WorkflowCFTypeService workflowcftypeService, SessionService sessionService, PurposeService purposeService, TeamService teamService, TenantService tenantService, TranslationService translationService, UserService userService, VendorService vendorService, WorkflowService workflowService, SegmentService segmentService, TechnologyPlatformService technologyplatformService, ServiceService serviceService, ServiceProviderService serviceproviderService, ServiceTypeService servicetypeService, MarkerSynonymService markersynonymService, AddressService addressService, MarkerService markerService){
		this.traitService = traitService; 
		this.technologyplatformService = technologyplatformService; 
		this.servicetypeService = servicetypeService; 
		this.serviceproviderService = serviceproviderService; 
		this.serviceService = serviceService; 
		this.purposeService = purposeService; 
		this.markersynonymService = markersynonymService; 
		this.markerService = markerService; 
		this.dataformatService = dataformatService; 
		this.assaygeneService = assaygeneService; 
		this.assayclassService = assayclassService; 
		this.traitclassService = traitclassService; 
		this.workflowstatusService = workflowstatusService; 
		this.workflowstageService = workflowstageService; 
		this.workflowphaseService = workflowphaseService; 
		this.workflownodecfService = workflownodecfService; 
		this.workflownodeService = workflownodeService; 
		this.workflowinstanceService = workflowinstanceService; 
		this.workfloweventService = workfloweventService; 
		this.workflowcfvalueService = workflowcfvalueService; 
		this.workflowcftypeService = workflowcftypeService; 
		this.workflowService = workflowService; 
		this.vendorService = vendorService; 
		this.userService = userService; 
		this.translationService = translationService; 
		this.tenantService = tenantService; 
		this.teamService = teamService; 
		this.stylethemeService = stylethemeService; 
		this.sessionService = sessionService; 
		this.segmentService = segmentService; 
		this.seasonService = seasonService; 
		this.roleactionService = roleactionService; 
		this.roleService = roleService; 
		this.requestService = requestService; 
		this.projectService = projectService; 
		this.programService = programService; 
		this.processService = processService; 
		this.preferenceService = preferenceService; 
		this.personService = personService; 
		this.partnerService = partnerService; 
		this.organizationService = organizationService; 
		this.numbersequencerulesegmentService = numbersequencerulesegmentService; 
		this.numbersequenceruleService = numbersequenceruleService; 
		this.moduleService = moduleService; 
		this.notificationService = notificationService; 
		this.languageService = languageService; 
		this.instanceService = instanceService; 
		this.htmltagService = htmltagService; 
		this.entityreferenceService = entityreferenceService; 
		this.emailtemplateService = emailtemplateService; 
		this.donorService = donorService; 
		this.delegationService = delegationService; 
		this.customerService = customerService; 
		this.cropService = cropService; 
		this.countryService = countryService; 
		this.componentService = componentService; 
		this.collaboratorService = collaboratorService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.auditlogsService = auditlogsService; 
		this.attributesService = attributesService; 
		this.alertruleService = alertruleService; 
		this.alertService = alertService; 
		this.addressService = addressService; 
		this.actionService = actionService; 
		this.workflowstatustypeService = workflowstatustypeService; 
	
	}

}