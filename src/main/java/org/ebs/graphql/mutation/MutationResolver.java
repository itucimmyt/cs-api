///////////////////////////////////////////////////////////
//  MutationResolver.java
//  Macromedia ActionScript Implementation of the Class MutationResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:47 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.mutation;

import org.ebs.services.ActionService;
import org.ebs.services.AddressService;
import org.ebs.services.AlertRuleService;
import org.ebs.services.AlertService;
import org.ebs.services.AssayGeneService;
import org.ebs.services.AssayclassService;
import org.ebs.services.AttributesService;
import org.ebs.services.AuditLogsService;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.services.BreedingZoneService;
import org.ebs.services.CollaboratorService;
import org.ebs.services.ComponentService;
import org.ebs.services.CountryService;
import org.ebs.services.CropService;
import org.ebs.services.CustomerService;
import org.ebs.services.DataFormatService;
import org.ebs.services.DelegationService;
import org.ebs.services.DonorService;
import org.ebs.services.HtmlTagService;
import org.ebs.services.InstanceService;
import org.ebs.services.LanguageService;
import org.ebs.services.MarkerService;
import org.ebs.services.MarkerSynonymService;
import org.ebs.services.MessageService;
import org.ebs.services.ModuleService;
import org.ebs.services.OrganizationService;
import org.ebs.services.PartnerService;
import org.ebs.services.PermissionService;
import org.ebs.services.PersonService;
import org.ebs.services.PhaseService;
import org.ebs.services.PipelineService;
import org.ebs.services.PreferenceService;
import org.ebs.services.ProcessService;
import org.ebs.services.ProgramService;
import org.ebs.services.ProjectService;
import org.ebs.services.PurposeService;
import org.ebs.services.RoleActionService;
import org.ebs.services.RoleService;
import org.ebs.services.SchemaService;
import org.ebs.services.SchemeService;
import org.ebs.services.SeasonService;
import org.ebs.services.ServiceProviderService;
import org.ebs.services.ServiceService;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.SessionService;
import org.ebs.services.StageService;
import org.ebs.services.StyleThemeService;
import org.ebs.services.TechnologyPlatformService;
import org.ebs.services.TenantService;
import org.ebs.services.TraitClassService;
import org.ebs.services.TraitService;
import org.ebs.services.TranslationService;
import org.ebs.services.UserService;
import org.ebs.services.VendorService;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.AddressTo;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.to.AlertTo;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.to.AssayclassTo;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.to.BreedingZoneTo;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.to.CountryTo;
import org.ebs.services.to.CropTo;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.to.DonorTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.MarkerSynonymTo;
import org.ebs.services.to.MarkerTo;
import org.ebs.services.to.MessageTo;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.to.PermissionTo;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.PhaseTo;
import org.ebs.services.to.PipelineTo;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.to.RoleTo;
import org.ebs.services.to.SchemaTo;
import org.ebs.services.to.SchemeTo;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.to.ServiceTypeTo;
import org.ebs.services.to.SessionTo;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.to.TraitTo;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.UserTo;
import org.ebs.services.to.VendorTo;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.Input.ActionInput;
import org.ebs.services.to.Input.AddressInput;
import org.ebs.services.to.Input.AlertInput;
import org.ebs.services.to.Input.AlertRuleInput;
import org.ebs.services.to.Input.AssayGeneInput;
import org.ebs.services.to.Input.AssayclassInput;
import org.ebs.services.to.Input.AttributesInput;
import org.ebs.services.to.Input.AuditLogsInput;
import org.ebs.services.to.Input.AuthenticationTypeInput;
import org.ebs.services.to.Input.BreedingZoneInput;
import org.ebs.services.to.Input.CollaboratorInput;
import org.ebs.services.to.Input.ComponentInput;
import org.ebs.services.to.Input.CountryInput;
import org.ebs.services.to.Input.CropInput;
import org.ebs.services.to.Input.CustomerInput;
import org.ebs.services.to.Input.DataFormatInput;
import org.ebs.services.to.Input.DelegationInput;
import org.ebs.services.to.Input.DonorInput;
import org.ebs.services.to.Input.HtmlTagInput;
import org.ebs.services.to.Input.InstanceInput;
import org.ebs.services.to.Input.LanguageInput;
import org.ebs.services.to.Input.MarkerInput;
import org.ebs.services.to.Input.MarkerSynonymInput;
import org.ebs.services.to.Input.MessageInput;
import org.ebs.services.to.Input.ModuleInput;
import org.ebs.services.to.Input.OrganizationInput;
import org.ebs.services.to.Input.PartnerInput;
import org.ebs.services.to.Input.PermissionInput;
import org.ebs.services.to.Input.PersonInput;
import org.ebs.services.to.Input.PhaseInput;
import org.ebs.services.to.Input.PipelineInput;
import org.ebs.services.to.Input.PreferenceInput;
import org.ebs.services.to.Input.ProcessInput;
import org.ebs.services.to.Input.ProgramInput;
import org.ebs.services.to.Input.ProjectInput;
import org.ebs.services.to.Input.PurposeInput;
import org.ebs.services.to.Input.RoleActionInput;
import org.ebs.services.to.Input.RoleInput;
import org.ebs.services.to.Input.SchemaInput;
import org.ebs.services.to.Input.SchemeInput;
import org.ebs.services.to.Input.SeasonInput;
import org.ebs.services.to.Input.ServiceInput;
import org.ebs.services.to.Input.ServiceProviderInput;
import org.ebs.services.to.Input.ServiceTypeInput;
import org.ebs.services.to.Input.SessionInput;
import org.ebs.services.to.Input.StageInput;
import org.ebs.services.to.Input.StyleThemeInput;
import org.ebs.services.to.Input.TechnologyPlatformInput;
import org.ebs.services.to.Input.TenantInput;
import org.ebs.services.to.Input.TraitClassInput;
import org.ebs.services.to.Input.TraitInput;
import org.ebs.services.to.Input.TranslationInput;
import org.ebs.services.to.Input.UserInput;
import org.ebs.services.to.Input.VendorInput;
import org.ebs.services.to.Input.WorkflowInput;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLMutationResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:47 PM
 */
@Component @Validated
public class MutationResolver implements GraphQLMutationResolver {

	private WorkflowNodeService workflownodeService;
	private ActionService actionService;
	private AddressService addressService;
	private AlertService alertService;
	private AlertRuleService alertruleService;
	private AttributesService attributesService;
	private AuditLogsService auditlogsService;
	private AuthenticationTypeService authenticationtypeService;
	private CollaboratorService collaboratorService;
	private ComponentService componentService;
	private CountryService countryService;
	private CropService cropService;
	private CustomerService customerService;
	private DelegationService delegationService;
	private DonorService donorService;
	private HtmlTagService htmltagService;
	private InstanceService instanceService;
	private LanguageService languageService;
	private MessageService messageService;
	private ModuleService moduleService;
	private OrganizationService organizationService;
	private PartnerService partnerService;
	private PermissionService permissionService;
	private PersonService personService;
	private PreferenceService preferenceService;
	private ProcessService processService;
	private ProgramService programService;
	private ProjectService projectService;
	private RoleService roleService;
	private RoleActionService roleactionService;
	private SchemeService schemeService;
	private SeasonService seasonService;
	private SessionService sessionService;
	private TenantService tenantService;
	private TranslationService translationService;
	private UserService userService;
	private VendorService vendorService;
	private WorkflowService workflowService;
	private StyleThemeService stylethemeService;
	private StageService stageService;
	private BreedingZoneService breedingzoneService;
	private PhaseService phaseService;
	private PipelineService pipelineService;
	private SchemaService schemaService;
	private TraitClassService traitclassService;
	private AssayclassService assayclassService;
	private AssayGeneService assaygeneService;
	private DataFormatService dataformatService;
	private MarkerService markerService;
	private MarkerSynonymService markersynonymService;
	private PurposeService purposeService;
	private ServiceService serviceService;
	private ServiceProviderService serviceproviderService;
	private ServiceTypeService servicetypeService;
	private TechnologyPlatformService technologyplatformService;
	private TraitService traitService;

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo createAction(ActionInput actionInput){
		return actionService.createAction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo createAddress(AddressInput addressInput){
		return addressService.createAddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo createAlert(AlertInput alertInput){
		return alertService.createAlert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo createAlertRule(AlertRuleInput alertruleInput){
		return alertruleService.createAlertRule(alertruleInput);
	}

	/**
	 * 
	 * @param assayclassInput
	 */
	public AssayclassTo createAssayclass(AssayclassInput assayclassInput){
		return assayclassService.createAssayclass(assayclassInput);
	}

	/**
	 * 
	 * @param assaygeneInput
	 */
	public AssayGeneTo createAssayGene(AssayGeneInput assaygeneInput){
		return assaygeneService.createAssayGene(assaygeneInput);
	}

	/**
	 * 
	 * @param attributesInput
	 */
	public AttributesTo createAttributes(AttributesInput attributesInput){
		return attributesService.createAttributes(attributesInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo createAuditLogs(AuditLogsInput auditlogsInput){
		return auditlogsService.createAuditLogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo createAuthenticationType(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.createAuthenticationType(authenticationtypeInput);
	}

	/**
	 * 
	 * @param breedingzoneInput
	 */
	public BreedingZoneTo createBreedingZone(BreedingZoneInput breedingzoneInput){
		return breedingzoneService.createBreedingZone(breedingzoneInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo createCollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.createCollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo createComponent(ComponentInput componentInput){
		return componentService.createComponent(componentInput);
	}

	/**
	 * 
	 * @param countryInput
	 */
	public CountryTo createCountry(CountryInput countryInput){
		return countryService.createCountry(countryInput);
	}

	/**
	 * 
	 * @param cropInput
	 */
	public CropTo createCrop(CropInput cropInput){
		return cropService.createCrop(cropInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo createCustomer(CustomerInput customerInput){
		return customerService.createCustomer(customerInput);
	}

	/**
	 * 
	 * @param dataformatInput
	 */
	public DataFormatTo createDataFormat(DataFormatInput dataformatInput){
		return dataformatService.createDataFormat(dataformatInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo createDelegation(DelegationInput delegationInput){
		return delegationService.createDelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo createDonor(DonorInput donorInput){
		return donorService.createDonor(donorInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo createHtmlTag(HtmlTagInput htmltagInput){
		return htmltagService.createHtmlTag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo createInstance(InstanceInput instanceInput){
		return instanceService.createInstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo createLanguage(LanguageInput languageInput){
		return languageService.createLanguage(languageInput);
	}

	/**
	 * 
	 * @param markerInput
	 */
	public MarkerTo createMarker(MarkerInput markerInput){
		return markerService.createMarker(markerInput);
	}

	/**
	 * 
	 * @param markersynonymInput
	 */
	public MarkerSynonymTo createMarkerSynonym(MarkerSynonymInput markersynonymInput){
		return markersynonymService.createMarkerSynonym(markersynonymInput);
	}

	/**
	 * 
	 * @param messageInput
	 */
	public MessageTo createMessage(MessageInput messageInput){
		return messageService.createMessage(messageInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo createModule(ModuleInput moduleInput){
		return moduleService.createModule(moduleInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo createOrganization(OrganizationInput organizationInput){
		return organizationService.createOrganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo createPartner(PartnerInput partnerInput){
		return partnerService.createPartner(partnerInput);
	}

	/**
	 * 
	 * @param permissionInput
	 */
	public PermissionTo createPermission(PermissionInput permissionInput){
		return permissionService.createPermission(permissionInput);
	}

	/**
	 * 
	 * @param personInput
	 */
	public PersonTo createPerson(PersonInput personInput){
		return personService.createPerson(personInput);
	}

	/**
	 * 
	 * @param phaseInput
	 */
	public PhaseTo createPhase(PhaseInput phaseInput){
		return phaseService.createPhase(phaseInput);
	}

	/**
	 * 
	 * @param pipelineInput
	 */
	public PipelineTo createPipeline(PipelineInput pipelineInput){
		return pipelineService.createPipeline(pipelineInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo createPreference(PreferenceInput preferenceInput){
		return preferenceService.createPreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo createProcess(ProcessInput processInput){
		return processService.createProcess(processInput);
	}

	/**
	 * 
	 * @param programInput
	 */
	public ProgramTo createProgram(ProgramInput programInput){
		return programService.createProgram(programInput);
	}

	/**
	 * 
	 * @param projectInput
	 */
	public ProjectTo createProject(ProjectInput projectInput){
		return projectService.createProject(projectInput);
	}

	/**
	 * 
	 * @param purposeInput
	 */
	public PurposeTo createPurpose(PurposeInput purposeInput){
		return purposeService.createPurpose(purposeInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo createRole(RoleInput roleInput){
		return roleService.createRole(roleInput);
	}

	/**
	 * 
	 * @param roleactionInput
	 */
	public RoleActionTo createRoleAction(RoleActionInput roleactionInput){
		return roleactionService.createRoleAction(roleactionInput);
	}

	/**
	 * 
	 * @param schemaInput
	 */
	public SchemaTo createSchema(SchemaInput schemaInput){
		return schemaService.createSchema(schemaInput);
	}

	/**
	 * 
	 * @param schemeInput
	 */
	public SchemeTo createScheme(SchemeInput schemeInput){
		return schemeService.createScheme(schemeInput);
	}

	/**
	 * 
	 * @param seasonInput
	 */
	public SeasonTo createSeason(SeasonInput seasonInput){
		return seasonService.createSeason(seasonInput);
	}

	/**
	 * 
	 * @param serviceInput
	 */
	public ServiceTo createService(ServiceInput serviceInput){
		return serviceService.createService(serviceInput);
	}

	/**
	 * 
	 * @param serviceproviderInput
	 */
	public ServiceProviderTo createServiceProvider(ServiceProviderInput serviceproviderInput){
		return serviceproviderService.createServiceProvider(serviceproviderInput);
	}

	/**
	 * 
	 * @param servicetypeInput
	 */
	public ServiceTypeTo createServiceType(ServiceTypeInput servicetypeInput){
		return servicetypeService.createServiceType(servicetypeInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo createSession(SessionInput sessionInput){
		return sessionService.createSession(sessionInput);
	}

	/**
	 * 
	 * @param stageInput
	 */
	public StageTo createStage(StageInput stageInput){
		return stageService.createStage(stageInput);
	}

	/**
	 * 
	 * @param stylethemeInput
	 */
	public StyleThemeTo createStyleTheme(StyleThemeInput stylethemeInput){
		return stylethemeService.createStyleTheme(stylethemeInput);
	}

	/**
	 * 
	 * @param technologyplatformInput
	 */
	public TechnologyPlatformTo createTechnologyPlatform(TechnologyPlatformInput technologyplatformInput){
		return technologyplatformService.createTechnologyPlatform(technologyplatformInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo createTenant(TenantInput tenantInput){
		return tenantService.createTenant(tenantInput);
	}

	/**
	 * 
	 * @param traitInput
	 */
	public TraitTo createTrait(TraitInput traitInput){
		return traitService.createTrait(traitInput);
	}

	/**
	 * 
	 * @param traitclassInput
	 */
	public TraitClassTo createTraitClass(TraitClassInput traitclassInput){
		return traitclassService.createTraitClass(traitclassInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo createTranslation(TranslationInput translationInput){
		return translationService.createTranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo createUser(UserInput userInput){
		return userService.createUser(userInput);
	}

	/**
	 * 
	 * @param vendorInput
	 */
	public VendorTo createVendor(VendorInput vendorInput){
		return vendorService.createVendor(vendorInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo createWorkflow(WorkflowInput workflowInput){
		return workflowService.createWorkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo createWorkflowNode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.createWorkflowNode(workflownodeInput);
	}

	/**
	 * 
	 * @param idaction
	 */
	public int deleteAction(int idaction){
		return actionService.deleteAction(idaction);
	}

	/**
	 * 
	 * @param idaddress
	 */
	public int deleteAddress(int idaddress){
		return addressService.deleteAddress(idaddress);
	}

	/**
	 * 
	 * @param idalert
	 */
	public int deleteAlert(int idalert){
		return alertService.deleteAlert(idalert);
	}

	/**
	 * 
	 * @param idalertrule
	 */
	public int deleteAlertRule(int idalertrule){
		return alertruleService.deleteAlertRule(idalertrule);
	}

	/**
	 * 
	 * @param idassayclass
	 */
	public int deleteAssayclass(int idassayclass){
		return assayclassService.deleteAssayclass(idassayclass);
	}

	/**
	 * 
	 * @param idassaygene
	 */
	public int deleteAssayGene(int idassaygene){
		return assaygeneService.deleteAssayGene(idassaygene);
	}

	/**
	 * 
	 * @param idattributes
	 */
	public int deleteAttributes(int idattributes){
		return attributesService.deleteAttributes(idattributes);
	}

	/**
	 * 
	 * @param idauditlogs
	 */
	public int deleteAuditLogs(int idauditlogs){
		return auditlogsService.deleteAuditLogs(idauditlogs);
	}

	/**
	 * 
	 * @param idauthenticationtype
	 */
	public int deleteAuthenticationType(int idauthenticationtype){
		return authenticationtypeService.deleteAuthenticationType(idauthenticationtype);
	}

	/**
	 * 
	 * @param idbreedingzone
	 */
	public int deleteBreedingZone(int idbreedingzone){
		return breedingzoneService.deleteBreedingZone(idbreedingzone);
	}

	/**
	 * 
	 * @param idcollaborator
	 */
	public int deleteCollaborator(int idcollaborator){
		return collaboratorService.deleteCollaborator(idcollaborator);
	}

	/**
	 * 
	 * @param idcomponent
	 */
	public int deleteComponent(int idcomponent){
		return componentService.deleteComponent(idcomponent);
	}

	/**
	 * 
	 * @param idcountry
	 */
	public int deleteCountry(int idcountry){
		return countryService.deleteCountry(idcountry);
	}

	/**
	 * 
	 * @param idcrop
	 */
	public int deleteCrop(int idcrop){
		return cropService.deleteCrop(idcrop);
	}

	/**
	 * 
	 * @param idcustomer
	 */
	public int deleteCustomer(int idcustomer){
		return customerService.deleteCustomer(idcustomer);
	}

	/**
	 * 
	 * @param iddataformat
	 */
	public int deleteDataFormat(int iddataformat){
		return dataformatService.deleteDataFormat(iddataformat);
	}

	/**
	 * 
	 * @param iddelegation
	 */
	public int deleteDelegation(int iddelegation){
		return delegationService.deleteDelegation(iddelegation);
	}

	/**
	 * 
	 * @param iddonor
	 */
	public int deleteDonor(int iddonor){
		return donorService.deleteDonor(iddonor);
	}

	/**
	 * 
	 * @param idhtmltag
	 */
	public int deleteHtmlTag(int idhtmltag){
		return htmltagService.deleteHtmlTag(idhtmltag);
	}

	/**
	 * 
	 * @param idinstance
	 */
	public int deleteInstance(int idinstance){
		return instanceService.deleteInstance(idinstance);
	}

	/**
	 * 
	 * @param idlanguage
	 */
	public int deleteLanguage(int idlanguage){
		return languageService.deleteLanguage(idlanguage);
	}

	/**
	 * 
	 * @param idmarker
	 */
	public int deleteMarker(int idmarker){
		return markerService.deleteMarker(idmarker);
	}

	/**
	 * 
	 * @param idmarkersynonym
	 */
	public int deleteMarkerSynonym(int idmarkersynonym){
		return markersynonymService.deleteMarkerSynonym(idmarkersynonym);
	}

	/**
	 * 
	 * @param idmessage
	 */
	public int deleteMessage(int idmessage){
		return messageService.deleteMessage(idmessage);
	}

	/**
	 * 
	 * @param idmodule
	 */
	public int deleteModule(int idmodule){
		return moduleService.deleteModule(idmodule);
	}

	/**
	 * 
	 * @param idorganization
	 */
	public int deleteOrganization(int idorganization){
		return organizationService.deleteOrganization(idorganization);
	}

	/**
	 * 
	 * @param idpartner
	 */
	public int deletePartner(int idpartner){
		return partnerService.deletePartner(idpartner);
	}

	/**
	 * 
	 * @param idpermission
	 */
	public int deletePermission(int idpermission){
		return permissionService.deletePermission(idpermission);
	}

	/**
	 * 
	 * @param idperson
	 */
	public int deletePerson(int idperson){
		return personService.deletePerson(idperson);
	}

	/**
	 * 
	 * @param idphase
	 */
	public int deletePhase(int idphase){
		return phaseService.deletePhase(idphase);
	}

	/**
	 * 
	 * @param idpipeline
	 */
	public int deletePipeline(int idpipeline){
		return pipelineService.deletePipeline(idpipeline);
	}

	/**
	 * 
	 * @param idpreference
	 */
	public int deletePreference(int idpreference){
		return preferenceService.deletePreference(idpreference);
	}

	/**
	 * 
	 * @param idprocess
	 */
	public int deleteProcess(int idprocess){
		return processService.deleteProcess(idprocess);
	}

	/**
	 * 
	 * @param idprogram
	 */
	public int deleteProgram(int idprogram){
		return programService.deleteProgram(idprogram);
	}

	/**
	 * 
	 * @param idproject
	 */
	public int deleteProject(int idproject){
		return projectService.deleteProject(idproject);
	}

	/**
	 * 
	 * @param idpurpose
	 */
	public int deletePurpose(int idpurpose){
		return purposeService.deletePurpose(idpurpose);
	}

	/**
	 * 
	 * @param idrole
	 */
	public int deleteRole(int idrole){
		return roleService.deleteRole(idrole);
	}

	/**
	 * 
	 * @param idroleaction
	 */
	public int deleteRoleAction(int idroleaction){
		return roleactionService.deleteRoleAction(idroleaction);
	}

	/**
	 * 
	 * @param idschema
	 */
	public int deleteSchema(int idschema){
		return schemaService.deleteSchema(idschema);
	}

	/**
	 * 
	 * @param idscheme
	 */
	public int deleteScheme(int idscheme){
		return schemeService.deleteScheme(idscheme);
	}

	/**
	 * 
	 * @param idseason
	 */
	public int deleteSeason(int idseason){
		return seasonService.deleteSeason(idseason);
	}

	/**
	 * 
	 * @param idservice
	 */
	public int deleteService(int idservice){
		return serviceService.deleteService(idservice);
	}

	/**
	 * 
	 * @param idserviceprovider
	 */
	public int deleteServiceProvider(int idserviceprovider){
		return serviceproviderService.deleteServiceProvider(idserviceprovider);
	}

	/**
	 * 
	 * @param idservicetype
	 */
	public int deleteServiceType(int idservicetype){
		return servicetypeService.deleteServiceType(idservicetype);
	}

	/**
	 * 
	 * @param idsession
	 */
	public int deleteSession(int idsession){
		return sessionService.deleteSession(idsession);
	}

	/**
	 * 
	 * @param idstage
	 */
	public int deleteStage(int idstage){
		return stageService.deleteStage(idstage);
	}

	/**
	 * 
	 * @param idstyletheme
	 */
	public int deleteStyleTheme(int idstyletheme){
		return stylethemeService.deleteStyleTheme(idstyletheme);
	}

	/**
	 * 
	 * @param idtechnologyplatform
	 */
	public int deleteTechnologyPlatform(int idtechnologyplatform){
		return technologyplatformService.deleteTechnologyPlatform(idtechnologyplatform);
	}

	/**
	 * 
	 * @param idtenant
	 */
	public int deleteTenant(int idtenant){
		return tenantService.deleteTenant(idtenant);
	}

	/**
	 * 
	 * @param idtrait
	 */
	public int deleteTrait(int idtrait){
		return traitService.deleteTrait(idtrait);
	}

	/**
	 * 
	 * @param idtraitclass
	 */
	public int deleteTraitClass(int idtraitclass){
		return traitclassService.deleteTraitClass(idtraitclass);
	}

	/**
	 * 
	 * @param idtranslation
	 */
	public int deleteTranslation(int idtranslation){
		return translationService.deleteTranslation(idtranslation);
	}

	/**
	 * 
	 * @param iduser
	 */
	public int deleteUser(int iduser){
		return userService.deleteUser(iduser);
	}

	/**
	 * 
	 * @param idvendor
	 */
	public int deleteVendor(int idvendor){
		return vendorService.deleteVendor(idvendor);
	}

	/**
	 * 
	 * @param idworkflow
	 */
	public int deleteWorkflow(int idworkflow){
		return workflowService.deleteWorkflow(idworkflow);
	}

	/**
	 * 
	 * @param idworkflownode
	 */
	public int deleteWorkflowNode(int idworkflownode){
		return workflownodeService.deleteWorkflowNode(idworkflownode);
	}

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo modifyAction(ActionInput actionInput){
		return actionService.modifyAction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo modifyAddress(AddressInput addressInput){
		return addressService.modifyAddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo modifyAlert(AlertInput alertInput){
		return alertService.modifyAlert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo modifyAlertRule(AlertRuleInput alertruleInput){
		return alertruleService.modifyAlertRule(alertruleInput);
	}

	/**
	 * 
	 * @param assayclassInput
	 */
	public AssayclassTo modifyAssayclass(AssayclassInput assayclassInput){
		return assayclassService.modifyAssayclass(assayclassInput);
	}

	/**
	 * 
	 * @param assaygeneInput
	 */
	public AssayGeneTo modifyAssayGene(AssayGeneInput assaygeneInput){
		return assaygeneService.modifyAssayGene(assaygeneInput);
	}

	/**
	 * 
	 * @param attributesInput
	 */
	public AttributesTo modifyAttributes(AttributesInput attributesInput){
		return attributesService.modifyAttributes(attributesInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo modifyAuditLogs(AuditLogsInput auditlogsInput){
		return auditlogsService.modifyAuditLogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo modifyAuthenticationType(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.modifyAuthenticationType(authenticationtypeInput);
	}

	/**
	 * 
	 * @param breedingzoneInput
	 */
	public BreedingZoneTo modifyBreedingZone(BreedingZoneInput breedingzoneInput){
		return breedingzoneService.modifyBreedingZone(breedingzoneInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo modifyCollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.modifyCollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo modifyComponent(ComponentInput componentInput){
		return componentService.modifyComponent(componentInput);
	}

	/**
	 * 
	 * @param countryInput
	 */
	public CountryTo modifyCountry(CountryInput countryInput){
		return countryService.modifyCountry(countryInput);
	}

	/**
	 * 
	 * @param cropInput
	 */
	public CropTo modifyCrop(CropInput cropInput){
		return cropService.modifyCrop(cropInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo modifyCustomer(CustomerInput customerInput){
		return customerService.modifyCustomer(customerInput);
	}

	/**
	 * 
	 * @param dataformatInput
	 */
	public DataFormatTo modifyDataFormat(DataFormatInput dataformatInput){
		return dataformatService.modifyDataFormat(dataformatInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo modifyDelegation(DelegationInput delegationInput){
		return delegationService.modifyDelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo modifyDonor(DonorInput donorInput){
		return donorService.modifyDonor(donorInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo modifyHtmlTag(HtmlTagInput htmltagInput){
		return htmltagService.modifyHtmlTag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo modifyInstance(InstanceInput instanceInput){
		return instanceService.modifyInstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo modifyLanguage(LanguageInput languageInput){
		return languageService.modifyLanguage(languageInput);
	}

	/**
	 * 
	 * @param markerInput
	 */
	public MarkerTo modifyMarker(MarkerInput markerInput){
		return markerService.modifyMarker(markerInput);
	}

	/**
	 * 
	 * @param markersynonymInput
	 */
	public MarkerSynonymTo modifyMarkerSynonym(MarkerSynonymInput markersynonymInput){
		return markersynonymService.modifyMarkerSynonym(markersynonymInput);
	}

	/**
	 * 
	 * @param messageInput
	 */
	public MessageTo modifyMessage(MessageInput messageInput){
		return messageService.modifyMessage(messageInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo modifyModule(ModuleInput moduleInput){
		return moduleService.modifyModule(moduleInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo modifyOrganization(OrganizationInput organizationInput){
		return organizationService.modifyOrganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo modifyPartner(PartnerInput partnerInput){
		return partnerService.modifyPartner(partnerInput);
	}

	/**
	 * 
	 * @param permissionInput
	 */
	public PermissionTo modifyPermission(PermissionInput permissionInput){
		return permissionService.modifyPermission(permissionInput);
	}

	/**
	 * 
	 * @param personInput
	 */
	public PersonTo modifyPerson(PersonInput personInput){
		return personService.modifyPerson(personInput);
	}

	/**
	 * 
	 * @param phaseInput
	 */
	public PhaseTo modifyPhase(PhaseInput phaseInput){
		return phaseService.modifyPhase(phaseInput);
	}

	/**
	 * 
	 * @param pipelineInput
	 */
	public PipelineTo modifyPipeline(PipelineInput pipelineInput){
		return pipelineService.modifyPipeline(pipelineInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo modifyPreference(PreferenceInput preferenceInput){
		return preferenceService.modifyPreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo modifyProcess(ProcessInput processInput){
		return processService.modifyProcess(processInput);
	}

	/**
	 * 
	 * @param programInput
	 */
	public ProgramTo modifyProgram(ProgramInput programInput){
		return programService.modifyProgram(programInput);
	}

	/**
	 * 
	 * @param projectInput
	 */
	public ProjectTo modifyProject(ProjectInput projectInput){
		return projectService.modifyProject(projectInput);
	}

	/**
	 * 
	 * @param purposeInput
	 */
	public PurposeTo modifyPurpose(PurposeInput purposeInput){
		return purposeService.modifyPurpose(purposeInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo modifyRole(RoleInput roleInput){
		return roleService.modifyRole(roleInput);
	}

	/**
	 * 
	 * @param roleactionInput
	 */
	public RoleActionTo modifyRoleAction(RoleActionInput roleactionInput){
		return roleactionService.modifyRoleAction(roleactionInput);
	}

	/**
	 * 
	 * @param schemaInput
	 */
	public SchemaTo modifySchema(SchemaInput schemaInput){
		return schemaService.modifySchema(schemaInput);
	}

	/**
	 * 
	 * @param schemeInput
	 */
	public SchemeTo modifyScheme(SchemeInput schemeInput){
		return schemeService.modifyScheme(schemeInput);
	}

	/**
	 * 
	 * @param seasonInput
	 */
	public SeasonTo modifySeason(SeasonInput seasonInput){
		return seasonService.modifySeason(seasonInput);
	}

	/**
	 * 
	 * @param serviceInput
	 */
	public ServiceTo modifyService(ServiceInput serviceInput){
		return serviceService.modifyService(serviceInput);
	}

	/**
	 * 
	 * @param serviceproviderInput
	 */
	public ServiceProviderTo modifyServiceProvider(ServiceProviderInput serviceproviderInput){
		return serviceproviderService.modifyServiceProvider(serviceproviderInput);
	}

	/**
	 * 
	 * @param servicetypeInput
	 */
	public ServiceTypeTo modifyServiceType(ServiceTypeInput servicetypeInput){
		return servicetypeService.modifyServiceType(servicetypeInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo modifySession(SessionInput sessionInput){
		return sessionService.modifySession(sessionInput);
	}

	/**
	 * 
	 * @param stageInput
	 */
	public StageTo modifyStage(StageInput stageInput){
		return stageService.modifyStage(stageInput);
	}

	/**
	 * 
	 * @param stylethemeInput
	 */
	public StyleThemeTo modifyStyleTheme(StyleThemeInput stylethemeInput){
		return stylethemeService.modifyStyleTheme(stylethemeInput);
	}

	/**
	 * 
	 * @param technologyplatformInput
	 */
	public TechnologyPlatformTo modifyTechnologyPlatform(TechnologyPlatformInput technologyplatformInput){
		return technologyplatformService.modifyTechnologyPlatform(technologyplatformInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo modifyTenant(TenantInput tenantInput){
		return tenantService.modifyTenant(tenantInput);
	}

	/**
	 * 
	 * @param traitInput
	 */
	public TraitTo modifyTrait(TraitInput traitInput){
		return traitService.modifyTrait(traitInput);
	}

	/**
	 * 
	 * @param traitclassInput
	 */
	public TraitClassTo modifyTraitClass(TraitClassInput traitclassInput){
		return traitclassService.modifyTraitClass(traitclassInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo modifyTranslation(TranslationInput translationInput){
		return translationService.modifyTranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo modifyUser(UserInput userInput){
		return userService.modifyUser(userInput);
	}

	/**
	 * 
	 * @param vendorInput
	 */
	public VendorTo modifyVendor(VendorInput vendorInput){
		return vendorService.modifyVendor(vendorInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo modifyWorkflow(WorkflowInput workflowInput){
		return workflowService.modifyWorkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo modifyWorkflowNode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.modifyWorkflowNode(workflownodeInput);
	}

	/**
	 * 
	 * @param pipelineService
	 * @param workflownodeService
	 * @param schemeService
	 * @param seasonService
	 * @param sessionService
	 * @param tenantService
	 * @param translationService
	 * @param userService
	 * @param vendorService
	 * @param workflowService
	 * @param stylethemeService
	 * @param stageService
	 * @param roleService
	 * @param phaseService
	 * @param projectService
	 * @param schemaService
	 * @param traitclassService
	 * @param assayclassService
	 * @param assaygeneService
	 * @param dataformatService
	 * @param markerService
	 * @param markersynonymService
	 * @param purposeService
	 * @param serviceService
	 * @param serviceproviderService
	 * @param servicetypeService
	 * @param technologyplatformService
	 * @param breedingzoneService
	 * @param donorService
	 * @param actionService
	 * @param addressService
	 * @param alertService
	 * @param alertruleService
	 * @param attributesService
	 * @param auditlogsService
	 * @param authenticationtypeService
	 * @param collaboratorService
	 * @param componentService
	 * @param countryService
	 * @param cropService
	 * @param roleactionService
	 * @param delegationService
	 * @param traitService
	 * @param htmltagService
	 * @param instanceService
	 * @param languageService
	 * @param messageService
	 * @param moduleService
	 * @param organizationService
	 * @param partnerService
	 * @param permissionService
	 * @param personService
	 * @param preferenceService
	 * @param processService
	 * @param programService
	 * @param customerService
	 */
	@Autowired
	public MutationResolver(PipelineService pipelineService, WorkflowNodeService workflownodeService, SchemeService schemeService, SeasonService seasonService, SessionService sessionService, TenantService tenantService, TranslationService translationService, UserService userService, VendorService vendorService, WorkflowService workflowService, StyleThemeService stylethemeService, StageService stageService, RoleService roleService, PhaseService phaseService, ProjectService projectService, SchemaService schemaService, TraitClassService traitclassService, AssayclassService assayclassService, AssayGeneService assaygeneService, DataFormatService dataformatService, MarkerService markerService, MarkerSynonymService markersynonymService, PurposeService purposeService, ServiceService serviceService, ServiceProviderService serviceproviderService, ServiceTypeService servicetypeService, TechnologyPlatformService technologyplatformService, BreedingZoneService breedingzoneService, DonorService donorService, ActionService actionService, AddressService addressService, AlertService alertService, AlertRuleService alertruleService, AttributesService attributesService, AuditLogsService auditlogsService, AuthenticationTypeService authenticationtypeService, CollaboratorService collaboratorService, ComponentService componentService, CountryService countryService, CropService cropService, RoleActionService roleactionService, DelegationService delegationService, TraitService traitService, HtmlTagService htmltagService, InstanceService instanceService, LanguageService languageService, MessageService messageService, ModuleService moduleService, OrganizationService organizationService, PartnerService partnerService, PermissionService permissionService, PersonService personService, PreferenceService preferenceService, ProcessService processService, ProgramService programService, CustomerService customerService){
		this.workflownodeService = workflownodeService; 
		this.actionService = actionService; 
		this.addressService = addressService; 
		this.alertService = alertService; 
		this.alertruleService = alertruleService; 
		this.attributesService = attributesService; 
		this.auditlogsService = auditlogsService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.collaboratorService = collaboratorService; 
		this.componentService = componentService; 
		this.countryService = countryService; 
		this.cropService = cropService; 
		this.customerService = customerService; 
		this.delegationService = delegationService; 
		this.donorService = donorService; 
		this.htmltagService = htmltagService; 
		this.instanceService = instanceService; 
		this.languageService = languageService; 
		this.messageService = messageService; 
		this.moduleService = moduleService; 
		this.organizationService = organizationService; 
		this.partnerService = partnerService; 
		this.permissionService = permissionService; 
		this.personService = personService; 
		this.preferenceService = preferenceService; 
		this.processService = processService; 
		this.programService = programService; 
		this.projectService = projectService; 
		this.roleService = roleService; 
		this.roleactionService = roleactionService; 
		this.schemeService = schemeService; 
		this.seasonService = seasonService; 
		this.sessionService = sessionService; 
		this.tenantService = tenantService; 
		this.translationService = translationService; 
		this.userService = userService; 
		this.vendorService = vendorService; 
		this.workflowService = workflowService; 
		this.stylethemeService = stylethemeService; 
		this.stageService = stageService; 
		this.breedingzoneService = breedingzoneService; 
		this.phaseService = phaseService; 
		this.pipelineService = pipelineService; 
		this.schemaService = schemaService; 
		this.traitclassService = traitclassService; 
		this.assayclassService = assayclassService; 
		this.assaygeneService = assaygeneService; 
		this.dataformatService = dataformatService; 
		this.markerService = markerService; 
		this.markersynonymService = markersynonymService; 
		this.purposeService = purposeService; 
		this.serviceService = serviceService; 
		this.serviceproviderService = serviceproviderService; 
		this.servicetypeService = servicetypeService; 
		this.technologyplatformService = technologyplatformService; 
		this.traitService = traitService; 
	
	}

}