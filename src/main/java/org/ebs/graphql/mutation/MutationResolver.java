///////////////////////////////////////////////////////////
//  MutationResolver.java
//  Macromedia ActionScript Implementation of the Class MutationResolver
//  Generated by Enterprise Architect
//  Created on:      13-Jul-2020 5:06:47 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.mutation;

import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.beans.factory.annotation.Autowired;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.to.Input.WorkflowStatusTypeInput;
import org.ebs.services.WorkflowStatusTypeService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.Input.ActionInput;
import org.ebs.services.ActionService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.to.Input.AddressInput;
import org.ebs.services.AddressService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.to.Input.AlertInput;
import org.ebs.services.to.CropTo;
import org.ebs.services.to.Input.CropInput;
import org.ebs.services.CropService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.to.Input.CustomerInput;
import org.ebs.services.CustomerService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.to.Input.DelegationInput;
import org.ebs.services.DelegationService;
import org.ebs.services.to.DonorTo;
import org.ebs.services.to.Input.DonorInput;
import org.ebs.services.DonorService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.to.Input.EmailTemplateInput;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.Input.EntityReferenceInput;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.Input.HtmlTagInput;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.AlertService;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.to.Input.AlertRuleInput;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.Input.AttributesInput;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.to.Input.AuditLogsInput;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.to.Input.AuthenticationTypeInput;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.to.Input.CollaboratorInput;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.to.Input.ComponentInput;
import org.ebs.services.ComponentService;
import org.ebs.services.to.CountryTo;
import org.ebs.services.to.Input.CountryInput;
import org.ebs.services.CountryService;
import org.ebs.services.to.Input.InstanceInput;
import org.ebs.services.InstanceService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.Input.LanguageInput;
import org.ebs.services.LanguageService;
import org.ebs.services.to.MessageTo;
import org.ebs.services.to.Input.MessageInput;
import org.ebs.services.MessageService;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.Input.ModuleInput;
import org.ebs.services.ModuleService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.to.Input.NumberSequenceRuleInput;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.to.Input.NumberSequenceRuleSegmentInput;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.to.Input.OrganizationInput;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.to.Input.PartnerInput;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.to.Input.RoleActionInput;
import org.ebs.services.RoleActionService;
import org.ebs.services.to.SchemeTo;
import org.ebs.services.to.Input.SchemeInput;
import org.ebs.services.SchemeService;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.to.Input.SeasonInput;
import org.ebs.services.SeasonService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.to.Input.SegmentInput;
import org.ebs.services.SegmentService;
import org.ebs.services.to.SessionTo;
import org.ebs.services.to.Input.SessionInput;
import org.ebs.services.SessionService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.to.Input.StyleThemeInput;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.Input.TenantInput;
import org.ebs.services.TenantService;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.Input.TranslationInput;
import org.ebs.services.TranslationService;
import org.ebs.services.to.UserTo;
import org.ebs.services.to.Input.UserInput;
import org.ebs.services.UserService;
import org.ebs.services.to.VendorTo;
import org.ebs.services.to.Input.VendorInput;
import org.ebs.services.VendorService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.Input.WorkflowInput;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.to.Input.WorkflowCFTypeInput;
import org.ebs.services.WorkflowCFTypeService;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.to.Input.WorkflowCFValueInput;
import org.ebs.services.WorkflowCFValueService;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.Input.WorkflowEventInput;
import org.ebs.services.WorkflowEventService;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.to.Input.WorkflowInstanceInput;
import org.ebs.services.WorkflowInstanceService;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.to.Input.WorkflowNodeCFInput;
import org.ebs.services.WorkflowNodeCFService;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.Input.WorkflowPhaseInput;
import org.ebs.services.WorkflowPhaseService;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.PartnerService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.Input.PersonInput;
import org.ebs.services.PersonService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.to.Input.PreferenceInput;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.Input.ProcessInput;
import org.ebs.services.ProcessService;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.Input.ProgramInput;
import org.ebs.services.ProgramService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.to.Input.ProjectInput;
import org.ebs.services.ProjectService;
import org.ebs.services.to.RequestTo;
import org.ebs.services.to.Input.RequestInput;
import org.ebs.services.RequestService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.to.Input.RoleInput;
import org.ebs.services.RoleService;
import org.ebs.services.to.Input.WorkflowStageInput;
import org.ebs.services.WorkflowStageService;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.to.Input.WorkflowStatusInput;
import org.ebs.services.WorkflowStatusService;
import com.coxautodev.graphql.tools.GraphQLMutationResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Jul-2020 5:06:47 PM
 */
@Component @Validated
public class MutationResolver implements GraphQLMutationResolver {

	private WorkflowStatusTypeService workflowstatustypeService;
	private ActionService actionService;
	private AddressService addressService;
	private AlertService alertService;
	private AlertRuleService alertruleService;
	private AttributesService attributesService;
	private AuditLogsService auditlogsService;
	private AuthenticationTypeService authenticationtypeService;
	private CollaboratorService collaboratorService;
	private ComponentService componentService;
	private CountryService countryService;
	private CropService cropService;
	private CustomerService customerService;
	private DelegationService delegationService;
	private DonorService donorService;
	private EmailTemplateService emailtemplateService;
	private EntityReferenceService entityreferenceService;
	private HtmlTagService htmltagService;
	private InstanceService instanceService;
	private LanguageService languageService;
	private MessageService messageService;
	private ModuleService moduleService;
	private NumberSequenceRuleService numbersequenceruleService;
	private NumberSequenceRuleSegmentService numbersequencerulesegmentService;
	private OrganizationService organizationService;
	private PartnerService partnerService;
	private PersonService personService;
	private PreferenceService preferenceService;
	private ProcessService processService;
	private ProgramService programService;
	private ProjectService projectService;
	private RequestService requestService;
	private RoleService roleService;
	private RoleActionService roleactionService;
	private SchemeService schemeService;
	private SeasonService seasonService;
	private SegmentService segmentService;
	private SessionService sessionService;
	private StyleThemeService stylethemeService;
	private TenantService tenantService;
	private TranslationService translationService;
	private UserService userService;
	private VendorService vendorService;
	private WorkflowService workflowService;
	private WorkflowCFTypeService workflowcftypeService;
	private WorkflowCFValueService workflowcfvalueService;
	private WorkflowEventService workfloweventService;
	private WorkflowInstanceService workflowinstanceService;
	private WorkflowNodeService workflownodeService;
	private WorkflowNodeCFService workflownodecfService;
	private WorkflowPhaseService workflowphaseService;
	private WorkflowStageService workflowstageService;
	private WorkflowStatusService workflowstatusService;

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo createAction(ActionInput actionInput){
		return actionService.createAction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo createAddress(AddressInput addressInput){
		return addressService.createAddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo createAlert(AlertInput alertInput){
		return alertService.createAlert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo createAlertRule(AlertRuleInput alertruleInput){
		return alertruleService.createAlertRule(alertruleInput);
	}

	/**
	 * 
	 * @param attributesInput
	 */
	public AttributesTo createAttributes(AttributesInput attributesInput){
		return attributesService.createAttributes(attributesInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo createAuditLogs(AuditLogsInput auditlogsInput){
		return auditlogsService.createAuditLogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo createAuthenticationType(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.createAuthenticationType(authenticationtypeInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo createCollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.createCollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo createComponent(ComponentInput componentInput){
		return componentService.createComponent(componentInput);
	}

	/**
	 * 
	 * @param countryInput
	 */
	public CountryTo createCountry(CountryInput countryInput){
		return countryService.createCountry(countryInput);
	}

	/**
	 * 
	 * @param cropInput
	 */
	public CropTo createCrop(CropInput cropInput){
		return cropService.createCrop(cropInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo createCustomer(CustomerInput customerInput){
		return customerService.createCustomer(customerInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo createDelegation(DelegationInput delegationInput){
		return delegationService.createDelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo createDonor(DonorInput donorInput){
		return donorService.createDonor(donorInput);
	}

	/**
	 * 
	 * @param emailtemplateInput
	 */
	public EmailTemplateTo createEmailTemplate(EmailTemplateInput emailtemplateInput){
		return emailtemplateService.createEmailTemplate(emailtemplateInput);
	}

	/**
	 * 
	 * @param entityreferenceInput
	 */
	public EntityReferenceTo createEntityReference(EntityReferenceInput entityreferenceInput){
		return entityreferenceService.createEntityReference(entityreferenceInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo createHtmlTag(HtmlTagInput htmltagInput){
		return htmltagService.createHtmlTag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo createInstance(InstanceInput instanceInput){
		return instanceService.createInstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo createLanguage(LanguageInput languageInput){
		return languageService.createLanguage(languageInput);
	}

	/**
	 * 
	 * @param messageInput
	 */
	public MessageTo createMessage(MessageInput messageInput){
		return messageService.createMessage(messageInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo createModule(ModuleInput moduleInput){
		return moduleService.createModule(moduleInput);
	}

	/**
	 * 
	 * @param numbersequenceruleInput
	 */
	public NumberSequenceRuleTo createNumberSequenceRule(NumberSequenceRuleInput numbersequenceruleInput){
		return numbersequenceruleService.createNumberSequenceRule(numbersequenceruleInput);
	}

	/**
	 * 
	 * @param numbersequencerulesegmentInput
	 */
	public NumberSequenceRuleSegmentTo createNumberSequenceRuleSegment(NumberSequenceRuleSegmentInput numbersequencerulesegmentInput){
		return numbersequencerulesegmentService.createNumberSequenceRuleSegment(numbersequencerulesegmentInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo createOrganization(OrganizationInput organizationInput){
		return organizationService.createOrganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo createPartner(PartnerInput partnerInput){
		return partnerService.createPartner(partnerInput);
	}

	/**
	 * 
	 * @param personInput
	 */
	public PersonTo createPerson(PersonInput personInput){
		return personService.createPerson(personInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo createPreference(PreferenceInput preferenceInput){
		return preferenceService.createPreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo createProcess(ProcessInput processInput){
		return processService.createProcess(processInput);
	}

	/**
	 * 
	 * @param programInput
	 */
	public ProgramTo createProgram(ProgramInput programInput){
		return programService.createProgram(programInput);
	}

	/**
	 * 
	 * @param projectInput
	 */
	public ProjectTo createProject(ProjectInput projectInput){
		return projectService.createProject(projectInput);
	}

	/**
	 * 
	 * @param requestInput
	 */
	public RequestTo createRequest(RequestInput requestInput){
		return requestService.createRequest(requestInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo createRole(RoleInput roleInput){
		return roleService.createRole(roleInput);
	}

	/**
	 * 
	 * @param roleactionInput
	 */
	public RoleActionTo createRoleAction(RoleActionInput roleactionInput){
		return roleactionService.createRoleAction(roleactionInput);
	}

	/**
	 * 
	 * @param schemeInput
	 */
	public SchemeTo createScheme(SchemeInput schemeInput){
		return schemeService.createScheme(schemeInput);
	}

	/**
	 * 
	 * @param seasonInput
	 */
	public SeasonTo createSeason(SeasonInput seasonInput){
		return seasonService.createSeason(seasonInput);
	}

	/**
	 * 
	 * @param segmentInput
	 */
	public SegmentTo createSegment(SegmentInput segmentInput){
		return segmentService.createSegment(segmentInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo createSession(SessionInput sessionInput){
		return sessionService.createSession(sessionInput);
	}

	/**
	 * 
	 * @param stylethemeInput
	 */
	public StyleThemeTo createStyleTheme(StyleThemeInput stylethemeInput){
		return stylethemeService.createStyleTheme(stylethemeInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo createTenant(TenantInput tenantInput){
		return tenantService.createTenant(tenantInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo createTranslation(TranslationInput translationInput){
		return translationService.createTranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo createUser(UserInput userInput){
		return userService.createUser(userInput);
	}

	/**
	 * 
	 * @param vendorInput
	 */
	public VendorTo createVendor(VendorInput vendorInput){
		return vendorService.createVendor(vendorInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo createWorkflow(WorkflowInput workflowInput){
		return workflowService.createWorkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflowcftypeInput
	 */
	public WorkflowCFTypeTo createWorkflowCFType(WorkflowCFTypeInput workflowcftypeInput){
		return workflowcftypeService.createWorkflowCFType(workflowcftypeInput);
	}

	/**
	 * 
	 * @param workflowcfvalueInput
	 */
	public WorkflowCFValueTo createWorkflowCFValue(WorkflowCFValueInput workflowcfvalueInput){
		return workflowcfvalueService.createWorkflowCFValue(workflowcfvalueInput);
	}

	/**
	 * 
	 * @param workfloweventInput
	 */
	public WorkflowEventTo createWorkflowEvent(WorkflowEventInput workfloweventInput){
		return workfloweventService.createWorkflowEvent(workfloweventInput);
	}

	/**
	 * 
	 * @param workflowinstanceInput
	 */
	public WorkflowInstanceTo createWorkflowInstance(WorkflowInstanceInput workflowinstanceInput){
		return workflowinstanceService.createWorkflowInstance(workflowinstanceInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo createWorkflowNode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.createWorkflowNode(workflownodeInput);
	}

	/**
	 * 
	 * @param workflownodecfInput
	 */
	public WorkflowNodeCFTo createWorkflowNodeCF(WorkflowNodeCFInput workflownodecfInput){
		return workflownodecfService.createWorkflowNodeCF(workflownodecfInput);
	}

	/**
	 * 
	 * @param workflowphaseInput
	 */
	public WorkflowPhaseTo createWorkflowPhase(WorkflowPhaseInput workflowphaseInput){
		return workflowphaseService.createWorkflowPhase(workflowphaseInput);
	}

	/**
	 * 
	 * @param workflowstageInput
	 */
	public WorkflowStageTo createWorkflowStage(WorkflowStageInput workflowstageInput){
		return workflowstageService.createWorkflowStage(workflowstageInput);
	}

	/**
	 * 
	 * @param workflowstatusInput
	 */
	public WorkflowStatusTo createWorkflowStatus(WorkflowStatusInput workflowstatusInput){
		return workflowstatusService.createWorkflowStatus(workflowstatusInput);
	}

	/**
	 * 
	 * @param workflowstatustypeInput
	 */
	public WorkflowStatusTypeTo createWorkflowStatusType(WorkflowStatusTypeInput workflowstatustypeInput){
		return workflowstatustypeService.createWorkflowStatusType(workflowstatustypeInput);
	}

	/**
	 * 
	 * @param idaction
	 */
	public int deleteAction(int idaction){
		return actionService.deleteAction(idaction);
	}

	/**
	 * 
	 * @param idaddress
	 */
	public int deleteAddress(int idaddress){
		return addressService.deleteAddress(idaddress);
	}

	/**
	 * 
	 * @param idalert
	 */
	public int deleteAlert(int idalert){
		return alertService.deleteAlert(idalert);
	}

	/**
	 * 
	 * @param idalertrule
	 */
	public int deleteAlertRule(int idalertrule){
		return alertruleService.deleteAlertRule(idalertrule);
	}

	/**
	 * 
	 * @param idattributes
	 */
	public int deleteAttributes(int idattributes){
		return attributesService.deleteAttributes(idattributes);
	}

	/**
	 * 
	 * @param idauditlogs
	 */
	public int deleteAuditLogs(int idauditlogs){
		return auditlogsService.deleteAuditLogs(idauditlogs);
	}

	/**
	 * 
	 * @param idauthenticationtype
	 */
	public int deleteAuthenticationType(int idauthenticationtype){
		return authenticationtypeService.deleteAuthenticationType(idauthenticationtype);
	}

	/**
	 * 
	 * @param idcollaborator
	 */
	public int deleteCollaborator(int idcollaborator){
		return collaboratorService.deleteCollaborator(idcollaborator);
	}

	/**
	 * 
	 * @param idcomponent
	 */
	public int deleteComponent(int idcomponent){
		return componentService.deleteComponent(idcomponent);
	}

	/**
	 * 
	 * @param idcountry
	 */
	public int deleteCountry(int idcountry){
		return countryService.deleteCountry(idcountry);
	}

	/**
	 * 
	 * @param idcrop
	 */
	public int deleteCrop(int idcrop){
		return cropService.deleteCrop(idcrop);
	}

	/**
	 * 
	 * @param idcustomer
	 */
	public int deleteCustomer(int idcustomer){
		return customerService.deleteCustomer(idcustomer);
	}

	/**
	 * 
	 * @param iddelegation
	 */
	public int deleteDelegation(int iddelegation){
		return delegationService.deleteDelegation(iddelegation);
	}

	/**
	 * 
	 * @param iddonor
	 */
	public int deleteDonor(int iddonor){
		return donorService.deleteDonor(iddonor);
	}

	/**
	 * 
	 * @param idemailtemplate
	 */
	public int deleteEmailTemplate(int idemailtemplate){
		return emailtemplateService.deleteEmailTemplate(idemailtemplate);
	}

	/**
	 * 
	 * @param identityreference
	 */
	public int deleteEntityReference(int identityreference){
		return entityreferenceService.deleteEntityReference(identityreference);
	}

	/**
	 * 
	 * @param idhtmltag
	 */
	public int deleteHtmlTag(int idhtmltag){
		return htmltagService.deleteHtmlTag(idhtmltag);
	}

	/**
	 * 
	 * @param idinstance
	 */
	public int deleteInstance(int idinstance){
		return instanceService.deleteInstance(idinstance);
	}

	/**
	 * 
	 * @param idlanguage
	 */
	public int deleteLanguage(int idlanguage){
		return languageService.deleteLanguage(idlanguage);
	}

	/**
	 * 
	 * @param idmessage
	 */
	public int deleteMessage(int idmessage){
		return messageService.deleteMessage(idmessage);
	}

	/**
	 * 
	 * @param idmodule
	 */
	public int deleteModule(int idmodule){
		return moduleService.deleteModule(idmodule);
	}

	/**
	 * 
	 * @param idnumbersequencerule
	 */
	public int deleteNumberSequenceRule(int idnumbersequencerule){
		return numbersequenceruleService.deleteNumberSequenceRule(idnumbersequencerule);
	}

	/**
	 * 
	 * @param idnumbersequencerulesegment
	 */
	public int deleteNumberSequenceRuleSegment(int idnumbersequencerulesegment){
		return numbersequencerulesegmentService.deleteNumberSequenceRuleSegment(idnumbersequencerulesegment);
	}

	/**
	 * 
	 * @param idorganization
	 */
	public int deleteOrganization(int idorganization){
		return organizationService.deleteOrganization(idorganization);
	}

	/**
	 * 
	 * @param idpartner
	 */
	public int deletePartner(int idpartner){
		return partnerService.deletePartner(idpartner);
	}

	/**
	 * 
	 * @param idperson
	 */
	public int deletePerson(int idperson){
		return personService.deletePerson(idperson);
	}

	/**
	 * 
	 * @param idpreference
	 */
	public int deletePreference(int idpreference){
		return preferenceService.deletePreference(idpreference);
	}

	/**
	 * 
	 * @param idprocess
	 */
	public int deleteProcess(int idprocess){
		return processService.deleteProcess(idprocess);
	}

	/**
	 * 
	 * @param idprogram
	 */
	public int deleteProgram(int idprogram){
		return programService.deleteProgram(idprogram);
	}

	/**
	 * 
	 * @param idproject
	 */
	public int deleteProject(int idproject){
		return projectService.deleteProject(idproject);
	}

	/**
	 * 
	 * @param idrequest
	 */
	public int deleteRequest(int idrequest){
		return requestService.deleteRequest(idrequest);
	}

	/**
	 * 
	 * @param idrole
	 */
	public int deleteRole(int idrole){
		return roleService.deleteRole(idrole);
	}

	/**
	 * 
	 * @param idroleaction
	 */
	public int deleteRoleAction(int idroleaction){
		return roleactionService.deleteRoleAction(idroleaction);
	}

	/**
	 * 
	 * @param idscheme
	 */
	public int deleteScheme(int idscheme){
		return schemeService.deleteScheme(idscheme);
	}

	/**
	 * 
	 * @param idseason
	 */
	public int deleteSeason(int idseason){
		return seasonService.deleteSeason(idseason);
	}

	/**
	 * 
	 * @param idsegment
	 */
	public int deleteSegment(int idsegment){
		return segmentService.deleteSegment(idsegment);
	}

	/**
	 * 
	 * @param idsession
	 */
	public int deleteSession(int idsession){
		return sessionService.deleteSession(idsession);
	}

	/**
	 * 
	 * @param idstyletheme
	 */
	public int deleteStyleTheme(int idstyletheme){
		return stylethemeService.deleteStyleTheme(idstyletheme);
	}

	/**
	 * 
	 * @param idtenant
	 */
	public int deleteTenant(int idtenant){
		return tenantService.deleteTenant(idtenant);
	}

	/**
	 * 
	 * @param idtranslation
	 */
	public int deleteTranslation(int idtranslation){
		return translationService.deleteTranslation(idtranslation);
	}

	/**
	 * 
	 * @param iduser
	 */
	public int deleteUser(int iduser){
		return userService.deleteUser(iduser);
	}

	/**
	 * 
	 * @param idvendor
	 */
	public int deleteVendor(int idvendor){
		return vendorService.deleteVendor(idvendor);
	}

	/**
	 * 
	 * @param idworkflow
	 */
	public int deleteWorkflow(int idworkflow){
		return workflowService.deleteWorkflow(idworkflow);
	}

	/**
	 * 
	 * @param idworkflowcftype
	 */
	public int deleteWorkflowCFType(int idworkflowcftype){
		return workflowcftypeService.deleteWorkflowCFType(idworkflowcftype);
	}

	/**
	 * 
	 * @param idworkflowcfvalue
	 */
	public int deleteWorkflowCFValue(int idworkflowcfvalue){
		return workflowcfvalueService.deleteWorkflowCFValue(idworkflowcfvalue);
	}

	/**
	 * 
	 * @param idworkflowevent
	 */
	public int deleteWorkflowEvent(int idworkflowevent){
		return workfloweventService.deleteWorkflowEvent(idworkflowevent);
	}

	/**
	 * 
	 * @param idworkflowinstance
	 */
	public int deleteWorkflowInstance(int idworkflowinstance){
		return workflowinstanceService.deleteWorkflowInstance(idworkflowinstance);
	}

	/**
	 * 
	 * @param idworkflownode
	 */
	public int deleteWorkflowNode(int idworkflownode){
		return workflownodeService.deleteWorkflowNode(idworkflownode);
	}

	/**
	 * 
	 * @param idworkflownodecf
	 */
	public int deleteWorkflowNodeCF(int idworkflownodecf){
		return workflownodecfService.deleteWorkflowNodeCF(idworkflownodecf);
	}

	/**
	 * 
	 * @param idworkflowphase
	 */
	public int deleteWorkflowPhase(int idworkflowphase){
		return workflowphaseService.deleteWorkflowPhase(idworkflowphase);
	}

	/**
	 * 
	 * @param idworkflowstage
	 */
	public int deleteWorkflowStage(int idworkflowstage){
		return workflowstageService.deleteWorkflowStage(idworkflowstage);
	}

	/**
	 * 
	 * @param idworkflowstatus
	 */
	public int deleteWorkflowStatus(int idworkflowstatus){
		return workflowstatusService.deleteWorkflowStatus(idworkflowstatus);
	}

	/**
	 * 
	 * @param idworkflowstatustype
	 */
	public int deleteWorkflowStatusType(int idworkflowstatustype){
		return workflowstatustypeService.deleteWorkflowStatusType(idworkflowstatustype);
	}

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo modifyAction(ActionInput actionInput){
		return actionService.modifyAction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo modifyAddress(AddressInput addressInput){
		return addressService.modifyAddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo modifyAlert(AlertInput alertInput){
		return alertService.modifyAlert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo modifyAlertRule(AlertRuleInput alertruleInput){
		return alertruleService.modifyAlertRule(alertruleInput);
	}

	/**
	 * 
	 * @param attributesInput
	 */
	public AttributesTo modifyAttributes(AttributesInput attributesInput){
		return attributesService.modifyAttributes(attributesInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo modifyAuditLogs(AuditLogsInput auditlogsInput){
		return auditlogsService.modifyAuditLogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo modifyAuthenticationType(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.modifyAuthenticationType(authenticationtypeInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo modifyCollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.modifyCollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo modifyComponent(ComponentInput componentInput){
		return componentService.modifyComponent(componentInput);
	}

	/**
	 * 
	 * @param countryInput
	 */
	public CountryTo modifyCountry(CountryInput countryInput){
		return countryService.modifyCountry(countryInput);
	}

	/**
	 * 
	 * @param cropInput
	 */
	public CropTo modifyCrop(CropInput cropInput){
		return cropService.modifyCrop(cropInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo modifyCustomer(CustomerInput customerInput){
		return customerService.modifyCustomer(customerInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo modifyDelegation(DelegationInput delegationInput){
		return delegationService.modifyDelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo modifyDonor(DonorInput donorInput){
		return donorService.modifyDonor(donorInput);
	}

	/**
	 * 
	 * @param emailtemplateInput
	 */
	public EmailTemplateTo modifyEmailTemplate(EmailTemplateInput emailtemplateInput){
		return emailtemplateService.modifyEmailTemplate(emailtemplateInput);
	}

	/**
	 * 
	 * @param entityreferenceInput
	 */
	public EntityReferenceTo modifyEntityReference(EntityReferenceInput entityreferenceInput){
		return entityreferenceService.modifyEntityReference(entityreferenceInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo modifyHtmlTag(HtmlTagInput htmltagInput){
		return htmltagService.modifyHtmlTag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo modifyInstance(InstanceInput instanceInput){
		return instanceService.modifyInstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo modifyLanguage(LanguageInput languageInput){
		return languageService.modifyLanguage(languageInput);
	}

	/**
	 * 
	 * @param messageInput
	 */
	public MessageTo modifyMessage(MessageInput messageInput){
		return messageService.modifyMessage(messageInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo modifyModule(ModuleInput moduleInput){
		return moduleService.modifyModule(moduleInput);
	}

	/**
	 * 
	 * @param numbersequenceruleInput
	 */
	public NumberSequenceRuleTo modifyNumberSequenceRule(NumberSequenceRuleInput numbersequenceruleInput){
		return numbersequenceruleService.modifyNumberSequenceRule(numbersequenceruleInput);
	}

	/**
	 * 
	 * @param numbersequencerulesegmentInput
	 */
	public NumberSequenceRuleSegmentTo modifyNumberSequenceRuleSegment(NumberSequenceRuleSegmentInput numbersequencerulesegmentInput){
		return numbersequencerulesegmentService.modifyNumberSequenceRuleSegment(numbersequencerulesegmentInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo modifyOrganization(OrganizationInput organizationInput){
		return organizationService.modifyOrganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo modifyPartner(PartnerInput partnerInput){
		return partnerService.modifyPartner(partnerInput);
	}

	/**
	 * 
	 * @param personInput
	 */
	public PersonTo modifyPerson(PersonInput personInput){
		return personService.modifyPerson(personInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo modifyPreference(PreferenceInput preferenceInput){
		return preferenceService.modifyPreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo modifyProcess(ProcessInput processInput){
		return processService.modifyProcess(processInput);
	}

	/**
	 * 
	 * @param programInput
	 */
	public ProgramTo modifyProgram(ProgramInput programInput){
		return programService.modifyProgram(programInput);
	}

	/**
	 * 
	 * @param projectInput
	 */
	public ProjectTo modifyProject(ProjectInput projectInput){
		return projectService.modifyProject(projectInput);
	}

	/**
	 * 
	 * @param requestInput
	 */
	public RequestTo modifyRequest(RequestInput requestInput){
		return requestService.modifyRequest(requestInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo modifyRole(RoleInput roleInput){
		return roleService.modifyRole(roleInput);
	}

	/**
	 * 
	 * @param roleactionInput
	 */
	public RoleActionTo modifyRoleAction(RoleActionInput roleactionInput){
		return roleactionService.modifyRoleAction(roleactionInput);
	}

	/**
	 * 
	 * @param schemeInput
	 */
	public SchemeTo modifyScheme(SchemeInput schemeInput){
		return schemeService.modifyScheme(schemeInput);
	}

	/**
	 * 
	 * @param seasonInput
	 */
	public SeasonTo modifySeason(SeasonInput seasonInput){
		return seasonService.modifySeason(seasonInput);
	}

	/**
	 * 
	 * @param segmentInput
	 */
	public SegmentTo modifySegment(SegmentInput segmentInput){
		return segmentService.modifySegment(segmentInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo modifySession(SessionInput sessionInput){
		return sessionService.modifySession(sessionInput);
	}

	/**
	 * 
	 * @param stylethemeInput
	 */
	public StyleThemeTo modifyStyleTheme(StyleThemeInput stylethemeInput){
		return stylethemeService.modifyStyleTheme(stylethemeInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo modifyTenant(TenantInput tenantInput){
		return tenantService.modifyTenant(tenantInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo modifyTranslation(TranslationInput translationInput){
		return translationService.modifyTranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo modifyUser(UserInput userInput){
		return userService.modifyUser(userInput);
	}

	/**
	 * 
	 * @param vendorInput
	 */
	public VendorTo modifyVendor(VendorInput vendorInput){
		return vendorService.modifyVendor(vendorInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo modifyWorkflow(WorkflowInput workflowInput){
		return workflowService.modifyWorkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflowcftypeInput
	 */
	public WorkflowCFTypeTo modifyWorkflowCFType(WorkflowCFTypeInput workflowcftypeInput){
		return workflowcftypeService.modifyWorkflowCFType(workflowcftypeInput);
	}

	/**
	 * 
	 * @param workflowcfvalueInput
	 */
	public WorkflowCFValueTo modifyWorkflowCFValue(WorkflowCFValueInput workflowcfvalueInput){
		return workflowcfvalueService.modifyWorkflowCFValue(workflowcfvalueInput);
	}

	/**
	 * 
	 * @param workfloweventInput
	 */
	public WorkflowEventTo modifyWorkflowEvent(WorkflowEventInput workfloweventInput){
		return workfloweventService.modifyWorkflowEvent(workfloweventInput);
	}

	/**
	 * 
	 * @param workflowinstanceInput
	 */
	public WorkflowInstanceTo modifyWorkflowInstance(WorkflowInstanceInput workflowinstanceInput){
		return workflowinstanceService.modifyWorkflowInstance(workflowinstanceInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo modifyWorkflowNode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.modifyWorkflowNode(workflownodeInput);
	}

	/**
	 * 
	 * @param workflownodecfInput
	 */
	public WorkflowNodeCFTo modifyWorkflowNodeCF(WorkflowNodeCFInput workflownodecfInput){
		return workflownodecfService.modifyWorkflowNodeCF(workflownodecfInput);
	}

	/**
	 * 
	 * @param workflowphaseInput
	 */
	public WorkflowPhaseTo modifyWorkflowPhase(WorkflowPhaseInput workflowphaseInput){
		return workflowphaseService.modifyWorkflowPhase(workflowphaseInput);
	}

	/**
	 * 
	 * @param workflowstageInput
	 */
	public WorkflowStageTo modifyWorkflowStage(WorkflowStageInput workflowstageInput){
		return workflowstageService.modifyWorkflowStage(workflowstageInput);
	}

	/**
	 * 
	 * @param workflowstatusInput
	 */
	public WorkflowStatusTo modifyWorkflowStatus(WorkflowStatusInput workflowstatusInput){
		return workflowstatusService.modifyWorkflowStatus(workflowstatusInput);
	}

	/**
	 * 
	 * @param workflowstatustypeInput
	 */
	public WorkflowStatusTypeTo modifyWorkflowStatusType(WorkflowStatusTypeInput workflowstatustypeInput){
		return workflowstatustypeService.modifyWorkflowStatusType(workflowstatustypeInput);
	}

	/**
	 * 
	 * @param vendorService
	 * @param segmentService
	 * @param sessionService
	 * @param stylethemeService
	 * @param tenantService
	 * @param auditlogsService
	 * @param authenticationtypeService
	 * @param collaboratorService
	 * @param componentService
	 * @param countryService
	 * @param customerService
	 * @param seasonService
	 * @param userService
	 * @param cropService
	 * @param workflowstatustypeService
	 * @param workflowService
	 * @param workflowcftypeService
	 * @param workflowcfvalueService
	 * @param workfloweventService
	 * @param workflowinstanceService
	 * @param workflownodeService
	 * @param workflownodecfService
	 * @param workflowphaseService
	 * @param workflowstageService
	 * @param workflowstatusService
	 * @param translationService
	 * @param alertruleService
	 * @param instanceService
	 * @param delegationService
	 * @param entityreferenceService
	 * @param schemeService
	 * @param emailtemplateService
	 * @param htmltagService
	 * @param attributesService
	 * @param alertService
	 * @param addressService
	 * @param languageService
	 * @param messageService
	 * @param moduleService
	 * @param numbersequenceruleService
	 * @param requestService
	 * @param donorService
	 * @param roleService
	 * @param projectService
	 * @param programService
	 * @param processService
	 * @param preferenceService
	 * @param numbersequencerulesegmentService
	 * @param personService
	 * @param partnerService
	 * @param organizationService
	 * @param actionService
	 * @param roleactionService
	 */
	@Autowired
	public MutationResolver(VendorService vendorService, SegmentService segmentService, SessionService sessionService, StyleThemeService stylethemeService, TenantService tenantService, AuditLogsService auditlogsService, AuthenticationTypeService authenticationtypeService, CollaboratorService collaboratorService, ComponentService componentService, CountryService countryService, CustomerService customerService, SeasonService seasonService, UserService userService, CropService cropService, WorkflowStatusTypeService workflowstatustypeService, WorkflowService workflowService, WorkflowCFTypeService workflowcftypeService, WorkflowCFValueService workflowcfvalueService, WorkflowEventService workfloweventService, WorkflowInstanceService workflowinstanceService, WorkflowNodeService workflownodeService, WorkflowNodeCFService workflownodecfService, WorkflowPhaseService workflowphaseService, WorkflowStageService workflowstageService, WorkflowStatusService workflowstatusService, TranslationService translationService, AlertRuleService alertruleService, InstanceService instanceService, DelegationService delegationService, EntityReferenceService entityreferenceService, SchemeService schemeService, EmailTemplateService emailtemplateService, HtmlTagService htmltagService, AttributesService attributesService, AlertService alertService, AddressService addressService, LanguageService languageService, MessageService messageService, ModuleService moduleService, NumberSequenceRuleService numbersequenceruleService, RequestService requestService, DonorService donorService, RoleService roleService, ProjectService projectService, ProgramService programService, ProcessService processService, PreferenceService preferenceService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, PersonService personService, PartnerService partnerService, OrganizationService organizationService, ActionService actionService, RoleActionService roleactionService){
		this.workflowstatustypeService = workflowstatustypeService; 
		this.actionService = actionService; 
		this.addressService = addressService; 
		this.alertService = alertService; 
		this.alertruleService = alertruleService; 
		this.attributesService = attributesService; 
		this.auditlogsService = auditlogsService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.collaboratorService = collaboratorService; 
		this.componentService = componentService; 
		this.countryService = countryService; 
		this.cropService = cropService; 
		this.customerService = customerService; 
		this.delegationService = delegationService; 
		this.donorService = donorService; 
		this.emailtemplateService = emailtemplateService; 
		this.entityreferenceService = entityreferenceService; 
		this.htmltagService = htmltagService; 
		this.instanceService = instanceService; 
		this.languageService = languageService; 
		this.messageService = messageService; 
		this.moduleService = moduleService; 
		this.numbersequenceruleService = numbersequenceruleService; 
		this.numbersequencerulesegmentService = numbersequencerulesegmentService; 
		this.organizationService = organizationService; 
		this.partnerService = partnerService; 
		this.personService = personService; 
		this.preferenceService = preferenceService; 
		this.processService = processService; 
		this.programService = programService; 
		this.projectService = projectService; 
		this.requestService = requestService; 
		this.roleService = roleService; 
		this.roleactionService = roleactionService; 
		this.schemeService = schemeService; 
		this.seasonService = seasonService; 
		this.segmentService = segmentService; 
		this.sessionService = sessionService; 
		this.stylethemeService = stylethemeService; 
		this.tenantService = tenantService; 
		this.translationService = translationService; 
		this.userService = userService; 
		this.vendorService = vendorService; 
		this.workflowService = workflowService; 
		this.workflowcftypeService = workflowcftypeService; 
		this.workflowcfvalueService = workflowcfvalueService; 
		this.workfloweventService = workfloweventService; 
		this.workflowinstanceService = workflowinstanceService; 
		this.workflownodeService = workflownodeService; 
		this.workflownodecfService = workflownodecfService; 
		this.workflowphaseService = workflowphaseService; 
		this.workflowstageService = workflowstageService; 
		this.workflowstatusService = workflowstatusService; 
	
	}

}