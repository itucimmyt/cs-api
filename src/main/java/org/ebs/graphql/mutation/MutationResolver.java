///////////////////////////////////////////////////////////
//  MutationResolver.java
//  Macromedia ActionScript Implementation of the Class MutationResolver
//  Generated by Enterprise Architect
//  Created on:      27-Apr-2020 9:47:45 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.mutation;

import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.model.CollaboratorModel;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.services.to.Input.CollaboratorInput;
import org.ebs.services.CollaboratorService;
import org.ebs.model.PartnerModel;
import org.ebs.services.to.PartnerTo;
import org.ebs.model.repos.PartnerRepository;
import org.ebs.services.to.Input.PartnerInput;
import org.ebs.services.PartnerService;
import org.ebs.model.ThemeStyleModel;
import org.ebs.services.to.ThemeStyleTo;
import org.ebs.model.repos.ThemeStyleRepository;
import org.ebs.services.to.Input.ThemeStyleInput;
import org.ebs.services.ThemeStyleService;
import org.ebs.model.HtmlTagModel;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.services.to.Input.HtmlTagInput;
import org.ebs.services.HtmlTagService;
import org.ebs.model.TranslationModel;
import org.ebs.services.to.TranslationTo;
import org.ebs.model.repos.TranslationRepository;
import org.ebs.services.to.Input.TranslationInput;
import org.ebs.services.TranslationService;
import org.ebs.model.LanguageModel;
import org.ebs.services.to.LanguageTo;
import org.ebs.model.repos.LanguageRepository;
import org.ebs.services.to.Input.LanguageInput;
import org.ebs.services.LanguageService;
import org.ebs.model.DonorModel;
import org.ebs.services.to.DonorTo;
import org.ebs.model.repos.DonorRepository;
import org.ebs.services.to.Input.DonorInput;
import org.ebs.services.DonorService;
import org.ebs.model.AuditLogsModel;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.model.repos.AuditLogsRepository;
import org.ebs.services.to.Input.AuditLogsInput;
import org.ebs.services.AuditLogsService;
import org.ebs.model.ProcessModel;
import org.ebs.services.to.ProcessTo;
import org.ebs.model.repos.ProcessRepository;
import org.ebs.services.to.Input.ProcessInput;
import org.ebs.services.ProcessService;
import org.ebs.model.PreferenceModel;
import org.ebs.services.to.PreferenceTo;
import org.ebs.model.repos.PreferenceRepository;
import org.ebs.services.to.Input.PreferenceInput;
import org.ebs.services.PreferenceService;
import org.ebs.model.AlertRuleModel;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.model.repos.AlertRuleRepository;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.model.SessionModel;
import org.ebs.services.to.SessionTo;
import org.ebs.model.repos.SessionRepository;
import org.ebs.services.to.Input.SessionInput;
import org.ebs.services.SessionService;
import org.ebs.model.AuthenticationTypeModel;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.model.repos.AuthenticationTypeRepository;
import org.ebs.services.to.Input.AuthenticationTypeInput;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.model.AddressModel;
import org.ebs.services.to.AddressTo;
import org.ebs.model.repos.AddressRepository;
import org.ebs.services.to.Input.AddressInput;
import org.ebs.services.AddressService;
import org.ebs.model.RoleModel;
import org.ebs.services.to.RoleTo;
import org.ebs.model.repos.RoleRepository;
import org.ebs.services.to.Input.RoleInput;
import org.ebs.services.RoleService;
import org.ebs.model.PearsonModel;
import org.ebs.services.to.PearsonTo;
import org.ebs.services.to.Input.AlertRuleInput;
import org.ebs.services.AlertRuleService;
import org.ebs.model.AlertModel;
import org.ebs.services.to.AlertTo;
import org.ebs.model.repos.AlertRepository;
import org.ebs.services.to.Input.AlertInput;
import org.ebs.services.AlertService;
import org.ebs.model.MessageModel;
import org.ebs.services.to.MessageTo;
import org.ebs.model.repos.MessageRepository;
import org.ebs.services.to.Input.MessageInput;
import org.ebs.services.MessageService;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.services.WorkflowNodeService;
import org.ebs.model.WorkflowModel;
import org.ebs.services.to.WorkflowTo;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.services.to.Input.WorkflowInput;
import org.ebs.services.WorkflowService;
import org.ebs.model.repos.PearsonRepository;
import org.ebs.services.to.Input.PearsonInput;
import org.ebs.services.PearsonService;
import org.ebs.model.UserModel;
import org.ebs.services.to.UserTo;
import org.ebs.model.repos.UserRepository;
import org.ebs.services.to.Input.UserInput;
import org.ebs.services.UserService;
import org.ebs.model.TenantModel;
import org.ebs.services.to.TenantTo;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.Input.TenantInput;
import org.ebs.services.TenantService;
import org.ebs.model.OrganizationModel;
import org.ebs.services.to.OrganizationTo;
import org.ebs.model.repos.OrganizationRepository;
import org.ebs.services.to.Input.OrganizationInput;
import org.ebs.services.OrganizationService;
import org.ebs.model.CustomerModel;
import org.ebs.services.to.CustomerTo;
import org.ebs.model.repos.CustomerRepository;
import org.ebs.services.to.Input.CustomerInput;
import org.ebs.services.CustomerService;
import org.ebs.model.ModuleModel;
import org.ebs.services.to.ModuleTo;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.services.to.Input.ModuleInput;
import org.ebs.services.ModuleService;
import org.ebs.model.ActionModel;
import org.ebs.services.to.ActionTo;
import org.ebs.model.repos.ActionRepository;
import org.ebs.services.to.Input.ActionInput;
import org.ebs.services.ActionService;
import org.ebs.model.DelegationModel;
import org.ebs.services.to.DelegationTo;
import org.ebs.model.repos.DelegationRepository;
import org.ebs.services.to.Input.DelegationInput;
import org.ebs.services.DelegationService;
import org.ebs.model.ComponentModel;
import org.ebs.services.to.ComponentTo;
import org.ebs.model.repos.ComponentRepository;
import org.ebs.services.to.Input.ComponentInput;
import org.ebs.services.ComponentService;
import org.ebs.model.InstanceModel;
import org.ebs.services.to.InstanceTo;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.services.to.Input.InstanceInput;
import org.ebs.services.InstanceService;
import com.coxautodev.graphql.tools.GraphQLMutationResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Apr-2020 9:47:45 AM
 */
@Component @Validated
public class MutationResolver implements GraphQLMutationResolver {

	private ActionService actionService;
	private AddressService addressService;
	private AlertRuleService alertruleService;
	private AlertService alertService;
	private AuditLogsService auditlogsService;
	private AuthenticationTypeService authenticationtypeService;
	private CollaboratorService collaboratorService;
	private ComponentService componentService;
	private CustomerService customerService;
	private DelegationService delegationService;
	private DonorService donorService;
	private HtmlTagService htmltagService;
	private InstanceService instanceService;
	private LanguageService languageService;
	private MessageService messageService;
	private ModuleService moduleService;
	private OrganizationService organizationService;
	private PartnerService partnerService;
	private PearsonService pearsonService;
	private PreferenceService preferenceService;
	private ProcessService processService;
	private RoleService roleService;
	private SessionService sessionService;
	private TenantService tenantService;
	private ThemeStyleService themestyleService;
	private TranslationService translationService;
	private UserService userService;
	private WorkflowNodeService workflownodeService;
	private WorkflowService workflowService;

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo createAction(ActionInput actionInput){
		return actionService.createAction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo createAddress(AddressInput addressInput){
		return addressService.createAddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo createAlert(AlertInput alertInput){
		return alertService.createAlert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo createAlertRule(AlertRuleInput alertruleInput){
		return alertruleService.createAlertRule(alertruleInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo createAuditLogs(AuditLogsInput auditlogsInput){
		return auditlogsService.createAuditLogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo createAuthenticationType(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.createAuthenticationType(authenticationtypeInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo createCollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.createCollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo createComponent(ComponentInput componentInput){
		return componentService.createComponent(componentInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo createCustomer(CustomerInput customerInput){
		return customerService.createCustomer(customerInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo createDelegation(DelegationInput delegationInput){
		return delegationService.createDelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo createDonor(DonorInput donorInput){
		return donorService.createDonor(donorInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo createHtmlTag(HtmlTagInput htmltagInput){
		return htmltagService.createHtmlTag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo createInstance(InstanceInput instanceInput){
		return instanceService.createInstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo createLanguage(LanguageInput languageInput){
		return languageService.createLanguage(languageInput);
	}

	/**
	 * 
	 * @param messageInput
	 */
	public MessageTo createMessage(MessageInput messageInput){
		return messageService.createMessage(messageInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo createModule(ModuleInput moduleInput){
		return moduleService.createModule(moduleInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo createOrganization(OrganizationInput organizationInput){
		return organizationService.createOrganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo createPartner(PartnerInput partnerInput){
		return partnerService.createPartner(partnerInput);
	}

	/**
	 * 
	 * @param pearsonInput
	 */
	public PearsonTo createPearson(PearsonInput pearsonInput){
		return pearsonService.createPearson(pearsonInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo createPreference(PreferenceInput preferenceInput){
		return preferenceService.createPreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo createProcess(ProcessInput processInput){
		return processService.createProcess(processInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo createRole(RoleInput roleInput){
		return roleService.createRole(roleInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo createSession(SessionInput sessionInput){
		return sessionService.createSession(sessionInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo createTenant(TenantInput tenantInput){
		return tenantService.createTenant(tenantInput);
	}

	/**
	 * 
	 * @param themestyleInput
	 */
	public ThemeStyleTo createThemeStyle(ThemeStyleInput themestyleInput){
		return themestyleService.createThemeStyle(themestyleInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo createTranslation(TranslationInput translationInput){
		return translationService.createTranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo createUser(UserInput userInput){
		return userService.createUser(userInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo createWorkflow(WorkflowInput workflowInput){
		return workflowService.createWorkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo createWorkflowNode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.createWorkflowNode(workflownodeInput);
	}

	/**
	 * 
	 * @param idaction
	 */
	public int deleteAction(int idaction){
		return actionService.deleteAction(idaction);
	}

	/**
	 * 
	 * @param idaddress
	 */
	public int deleteAddress(int idaddress){
		return addressService.deleteAddress(idaddress);
	}

	/**
	 * 
	 * @param idalert
	 */
	public int deleteAlert(int idalert){
		return alertService.deleteAlert(idalert);
	}

	/**
	 * 
	 * @param idalertrule
	 */
	public int deleteAlertRule(int idalertrule){
		return alertruleService.deleteAlertRule(idalertrule);
	}

	/**
	 * 
	 * @param idauditlogs
	 */
	public int deleteAuditLogs(int idauditlogs){
		return auditlogsService.deleteAuditLogs(idauditlogs);
	}

	/**
	 * 
	 * @param idauthenticationtype
	 */
	public int deleteAuthenticationType(int idauthenticationtype){
		return authenticationtypeService.deleteAuthenticationType(idauthenticationtype);
	}

	/**
	 * 
	 * @param idcollaborator
	 */
	public int deleteCollaborator(int idcollaborator){
		return collaboratorService.deleteCollaborator(idcollaborator);
	}

	/**
	 * 
	 * @param idcomponent
	 */
	public int deleteComponent(int idcomponent){
		return componentService.deleteComponent(idcomponent);
	}

	/**
	 * 
	 * @param idcustomer
	 */
	public int deleteCustomer(int idcustomer){
		return customerService.deleteCustomer(idcustomer);
	}

	/**
	 * 
	 * @param iddelegation
	 */
	public int deleteDelegation(int iddelegation){
		return delegationService.deleteDelegation(iddelegation);
	}

	/**
	 * 
	 * @param iddonor
	 */
	public int deleteDonor(int iddonor){
		return donorService.deleteDonor(iddonor);
	}

	/**
	 * 
	 * @param idhtmltag
	 */
	public int deleteHtmlTag(int idhtmltag){
		return htmltagService.deleteHtmlTag(idhtmltag);
	}

	/**
	 * 
	 * @param idinstance
	 */
	public int deleteInstance(int idinstance){
		return instanceService.deleteInstance(idinstance);
	}

	/**
	 * 
	 * @param idlanguage
	 */
	public int deleteLanguage(int idlanguage){
		return languageService.deleteLanguage(idlanguage);
	}

	/**
	 * 
	 * @param idmessage
	 */
	public int deleteMessage(int idmessage){
		return messageService.deleteMessage(idmessage);
	}

	/**
	 * 
	 * @param idmodule
	 */
	public int deleteModule(int idmodule){
		return moduleService.deleteModule(idmodule);
	}

	/**
	 * 
	 * @param idorganization
	 */
	public int deleteOrganization(int idorganization){
		return organizationService.deleteOrganization(idorganization);
	}

	/**
	 * 
	 * @param idpartner
	 */
	public int deletePartner(int idpartner){
		return partnerService.deletePartner(idpartner);
	}

	/**
	 * 
	 * @param idpearson
	 */
	public int deletePearson(int idpearson){
		return pearsonService.deletePearson(idpearson);
	}

	/**
	 * 
	 * @param idpreference
	 */
	public int deletePreference(int idpreference){
		return preferenceService.deletePreference(idpreference);
	}

	/**
	 * 
	 * @param idprocess
	 */
	public int deleteProcess(int idprocess){
		return processService.deleteProcess(idprocess);
	}

	/**
	 * 
	 * @param idrole
	 */
	public int deleteRole(int idrole){
		return roleService.deleteRole(idrole);
	}

	/**
	 * 
	 * @param idsession
	 */
	public int deleteSession(int idsession){
		return sessionService.deleteSession(idsession);
	}

	/**
	 * 
	 * @param idtenant
	 */
	public int deleteTenant(int idtenant){
		return tenantService.deleteTenant(idtenant);
	}

	/**
	 * 
	 * @param idthemestyle
	 */
	public int deleteThemeStyle(int idthemestyle){
		return themestyleService.deleteThemeStyle(idthemestyle);
	}

	/**
	 * 
	 * @param idtranslation
	 */
	public int deleteTranslation(int idtranslation){
		return translationService.deleteTranslation(idtranslation);
	}

	/**
	 * 
	 * @param iduser
	 */
	public int deleteUser(int iduser){
		return userService.deleteUser(iduser);
	}

	/**
	 * 
	 * @param idworkflow
	 */
	public int deleteWorkflow(int idworkflow){
		return workflowService.deleteWorkflow(idworkflow);
	}

	/**
	 * 
	 * @param idworkflownode
	 */
	public int deleteWorkflowNode(int idworkflownode){
		return workflownodeService.deleteWorkflowNode(idworkflownode);
	}

	/**
	 * 
	 * @param actionInput
	 */
	public ActionTo modifyAction(ActionInput actionInput){
		return actionService.modifyAction(actionInput);
	}

	/**
	 * 
	 * @param addressInput
	 */
	public AddressTo modifyAddress(AddressInput addressInput){
		return addressService.modifyAddress(addressInput);
	}

	/**
	 * 
	 * @param alertInput
	 */
	public AlertTo modifyAlert(AlertInput alertInput){
		return alertService.modifyAlert(alertInput);
	}

	/**
	 * 
	 * @param alertruleInput
	 */
	public AlertRuleTo modifyAlertRule(AlertRuleInput alertruleInput){
		return alertruleService.modifyAlertRule(alertruleInput);
	}

	/**
	 * 
	 * @param auditlogsInput
	 */
	public AuditLogsTo modifyAuditLogs(AuditLogsInput auditlogsInput){
		return auditlogsService.modifyAuditLogs(auditlogsInput);
	}

	/**
	 * 
	 * @param authenticationtypeInput
	 */
	public AuthenticationTypeTo modifyAuthenticationType(AuthenticationTypeInput authenticationtypeInput){
		return authenticationtypeService.modifyAuthenticationType(authenticationtypeInput);
	}

	/**
	 * 
	 * @param collaboratorInput
	 */
	public CollaboratorTo modifyCollaborator(CollaboratorInput collaboratorInput){
		return collaboratorService.modifyCollaborator(collaboratorInput);
	}

	/**
	 * 
	 * @param componentInput
	 */
	public ComponentTo modifyComponent(ComponentInput componentInput){
		return componentService.modifyComponent(componentInput);
	}

	/**
	 * 
	 * @param customerInput
	 */
	public CustomerTo modifyCustomer(CustomerInput customerInput){
		return customerService.modifyCustomer(customerInput);
	}

	/**
	 * 
	 * @param delegationInput
	 */
	public DelegationTo modifyDelegation(DelegationInput delegationInput){
		return delegationService.modifyDelegation(delegationInput);
	}

	/**
	 * 
	 * @param donorInput
	 */
	public DonorTo modifyDonor(DonorInput donorInput){
		return donorService.modifyDonor(donorInput);
	}

	/**
	 * 
	 * @param htmltagInput
	 */
	public HtmlTagTo modifyHtmlTag(HtmlTagInput htmltagInput){
		return htmltagService.modifyHtmlTag(htmltagInput);
	}

	/**
	 * 
	 * @param instanceInput
	 */
	public InstanceTo modifyInstance(InstanceInput instanceInput){
		return instanceService.modifyInstance(instanceInput);
	}

	/**
	 * 
	 * @param languageInput
	 */
	public LanguageTo modifyLanguage(LanguageInput languageInput){
		return languageService.modifyLanguage(languageInput);
	}

	/**
	 * 
	 * @param messageInput
	 */
	public MessageTo modifyMessage(MessageInput messageInput){
		return messageService.modifyMessage(messageInput);
	}

	/**
	 * 
	 * @param moduleInput
	 */
	public ModuleTo modifyModule(ModuleInput moduleInput){
		return moduleService.modifyModule(moduleInput);
	}

	/**
	 * 
	 * @param organizationInput
	 */
	public OrganizationTo modifyOrganization(OrganizationInput organizationInput){
		return organizationService.modifyOrganization(organizationInput);
	}

	/**
	 * 
	 * @param partnerInput
	 */
	public PartnerTo modifyPartner(PartnerInput partnerInput){
		return partnerService.modifyPartner(partnerInput);
	}

	/**
	 * 
	 * @param pearsonInput
	 */
	public PearsonTo modifyPearson(PearsonInput pearsonInput){
		return pearsonService.modifyPearson(pearsonInput);
	}

	/**
	 * 
	 * @param preferenceInput
	 */
	public PreferenceTo modifyPreference(PreferenceInput preferenceInput){
		return preferenceService.modifyPreference(preferenceInput);
	}

	/**
	 * 
	 * @param processInput
	 */
	public ProcessTo modifyProcess(ProcessInput processInput){
		return processService.modifyProcess(processInput);
	}

	/**
	 * 
	 * @param roleInput
	 */
	public RoleTo modifyRole(RoleInput roleInput){
		return roleService.modifyRole(roleInput);
	}

	/**
	 * 
	 * @param sessionInput
	 */
	public SessionTo modifySession(SessionInput sessionInput){
		return sessionService.modifySession(sessionInput);
	}

	/**
	 * 
	 * @param tenantInput
	 */
	public TenantTo modifyTenant(TenantInput tenantInput){
		return tenantService.modifyTenant(tenantInput);
	}

	/**
	 * 
	 * @param themestyleInput
	 */
	public ThemeStyleTo modifyThemeStyle(ThemeStyleInput themestyleInput){
		return themestyleService.modifyThemeStyle(themestyleInput);
	}

	/**
	 * 
	 * @param translationInput
	 */
	public TranslationTo modifyTranslation(TranslationInput translationInput){
		return translationService.modifyTranslation(translationInput);
	}

	/**
	 * 
	 * @param userInput
	 */
	public UserTo modifyUser(UserInput userInput){
		return userService.modifyUser(userInput);
	}

	/**
	 * 
	 * @param workflowInput
	 */
	public WorkflowTo modifyWorkflow(WorkflowInput workflowInput){
		return workflowService.modifyWorkflow(workflowInput);
	}

	/**
	 * 
	 * @param workflownodeInput
	 */
	public WorkflowNodeTo modifyWorkflowNode(WorkflowNodeInput workflownodeInput){
		return workflownodeService.modifyWorkflowNode(workflownodeInput);
	}

	/**
	 * 
	 * @param workflownodeService
	 * @param componentService
	 * @param delegationService
	 * @param actionService
	 * @param moduleService
	 * @param customerService
	 * @param organizationService
	 * @param tenantService
	 * @param userService
	 * @param pearsonService
	 * @param roleService
	 * @param addressService
	 * @param authenticationtypeService
	 * @param collaboratorService
	 * @param workflowService
	 * @param instanceService
	 * @param messageService
	 * @param alertService
	 * @param alertruleService
	 * @param preferenceService
	 * @param processService
	 * @param auditlogsService
	 * @param donorService
	 * @param languageService
	 * @param translationService
	 * @param htmltagService
	 * @param themestyleService
	 * @param partnerService
	 * @param sessionService
	 */
	@Autowired
	public MutationResolver(WorkflowNodeService workflownodeService, ComponentService componentService, DelegationService delegationService, ActionService actionService, ModuleService moduleService, CustomerService customerService, OrganizationService organizationService, TenantService tenantService, UserService userService, PearsonService pearsonService, RoleService roleService, AddressService addressService, AuthenticationTypeService authenticationtypeService, CollaboratorService collaboratorService, WorkflowService workflowService, InstanceService instanceService, MessageService messageService, AlertService alertService, AlertRuleService alertruleService, PreferenceService preferenceService, ProcessService processService, AuditLogsService auditlogsService, DonorService donorService, LanguageService languageService, TranslationService translationService, HtmlTagService htmltagService, ThemeStyleService themestyleService, PartnerService partnerService, SessionService sessionService){
		this.collaboratorService = collaboratorService; 
		this.partnerService = partnerService; 
		this.themestyleService = themestyleService; 
		this.htmltagService = htmltagService; 
		this.translationService = translationService; 
		this.languageService = languageService; 
		this.donorService = donorService; 
		this.auditlogsService = auditlogsService; 
		this.processService = processService; 
		this.preferenceService = preferenceService; 
		this.alertruleService = alertruleService; 
		this.alertService = alertService; 
		this.messageService = messageService; 
		this.workflownodeService = workflownodeService; 
		this.workflowService = workflowService; 
		this.sessionService = sessionService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.addressService = addressService; 
		this.roleService = roleService; 
		this.pearsonService = pearsonService; 
		this.userService = userService; 
		this.tenantService = tenantService; 
		this.organizationService = organizationService; 
		this.customerService = customerService; 
		this.moduleService = moduleService; 
		this.actionService = actionService; 
		this.delegationService = delegationService; 
		this.componentService = componentService; 
		this.instanceService = instanceService; 
	
	}

}