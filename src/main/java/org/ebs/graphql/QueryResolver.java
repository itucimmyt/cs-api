///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:51 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.ebs.services.to.WorkflowTo;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.services.to.ProductFunctionTo;
import org.ebs.services.ProductFunctionService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.CfTypeTo;
import org.ebs.services.CfTypeService;
import org.ebs.services.to.CfValueTo;
import org.ebs.services.CfValueService;
import org.ebs.services.to.DomainTo;
import org.ebs.services.DomainService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.EventTo;
import org.ebs.services.EventService;
import org.ebs.services.to.FormulaTypeTo;
import org.ebs.services.FormulaTypeService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.WfInstanceTo;
import org.ebs.services.WfInstanceService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.services.to.MessageTo;
import org.ebs.services.MessageService;
import org.ebs.services.to.ProductTo;
import org.ebs.services.ProductService;
import org.ebs.services.to.NodeTo;
import org.ebs.services.NodeService;
import org.ebs.services.to.NodeCfTo;
import org.ebs.services.NodeCfService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.PersonService;
import org.ebs.services.to.PersonStatusTo;
import org.ebs.services.PersonStatusService;
import org.ebs.services.to.PhaseTo;
import org.ebs.services.PhaseService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.services.to.RequestTo;
import org.ebs.services.RequestService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.SegmentService;
import org.ebs.services.to.StageTo;
import org.ebs.services.StageService;
import org.ebs.services.to.StatusTo;
import org.ebs.services.StatusService;
import org.ebs.services.to.StatusTypeTo;
import org.ebs.services.StatusTypeService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.TenantService;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TypeTo;
import org.ebs.services.TypeService;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:51 AM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private WorkflowService workflowService;
	private AddressService addressService;
	private ProductFunctionService productFunctionService;
	private AlertService alertService;
	private AlertRuleService alertRuleService;
	private AttributesService attributesService;
	private AuditLogsService auditLogsService;
	private CfTypeService cfTypeService;
	private CfValueService cfValueService;
	private DomainService domainService;
	private CustomerService customerService;
	private DelegationService delegationService;
	private EmailTemplateService emailTemplateService;
	private EntityReferenceService entityReferenceService;
	private EventService eventService;
	private FormulaTypeService formulaTypeService;
	private HtmlTagService htmlTagService;
	private WfInstanceService wfInstanceService;
	private InstanceService instanceService;
	private LanguageService languageService;
	private MessageService messageService;
	private ProductService productService;
	private NodeService nodeService;
	private NodeCfService nodeCfService;
	private NumberSequenceRuleService numberSequenceRuleService;
	private NumberSequenceRuleSegmentService numberSequenceRuleSegmentService;
	private OrganizationService organizationService;
	private PersonService personService;
	private PersonStatusService personStatusService;
	private PhaseService phaseService;
	private PreferenceService preferenceService;
	private ProcessService processService;
	private RequestService requestService;
	private RoleService roleService;
	private SegmentService segmentService;
	private StageService stageService;
	private StatusService statusService;
	private StatusTypeService statusTypeService;
	private StyleThemeService styleThemeService;
	private TenantService tenantService;
	private TranslationService translationService;
	private TypeService typeService;
	private UserService userService;

	/**
	 * 
	 * @param addressId
	 */
	public Optional<AddressTo> findAddress(int addressId){
		return this.addressService.findAddress(addressId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findAddressList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.addressService.findAddresss(page,sort,filters);
	}

	/**
	 * 
	 * @param alertId
	 */
	public Optional<AlertTo> findAlert(int alertId){
		return this.alertService.findAlert(alertId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findAlertList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertService.findAlerts(page,sort,filters);
	}

	/**
	 * 
	 * @param alertRuleId
	 */
	public Optional<AlertRuleTo> findAlertRule(int alertRuleId){
		return this.alertRuleService.findAlertRule(alertRuleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findAlertRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertRuleService.findAlertRules(page,sort,filters);
	}

	/**
	 * 
	 * @param attributesId
	 */
	public Optional<AttributesTo> findAttributes(int attributesId){
		return this.attributesService.findAttributes(attributesId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AttributesTo> findAttributesList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.attributesService.findAttributess(page,sort,filters);
	}

	/**
	 * 
	 * @param auditLogsId
	 */
	public Optional<AuditLogsTo> findAuditLogs(int auditLogsId){
		return this.auditLogsService.findAuditLogs(auditLogsId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findAuditLogsList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.auditLogsService.findAuditLogss(page,sort,filters);
	}

	/**
	 * 
	 * @param cfTypeId
	 */
	public Optional<CfTypeTo> findCfType(int cfTypeId){
		return this.cfTypeService.findCfType(cfTypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CfTypeTo> findCfTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.cfTypeService.findCfTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param cfValueId
	 */
	public Optional<CfValueTo> findCfValue(int cfValueId){
		return this.cfValueService.findCfValue(cfValueId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CfValueTo> findCfValueList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.cfValueService.findCfValues(page,sort,filters);
	}

	/**
	 * 
	 * @param customerId
	 */
	public Optional<CustomerTo> findCustomer(int customerId){
		return this.customerService.findCustomer(customerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findCustomerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.customerService.findCustomers(page,sort,filters);
	}

	/**
	 * 
	 * @param delegationId
	 */
	public Optional<DelegationTo> findDelegation(int delegationId){
		return this.delegationService.findDelegation(delegationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> findDelegationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.delegationService.findDelegations(page,sort,filters);
	}

	/**
	 * 
	 * @param domainId
	 */
	public Optional<DomainTo> findDomain(int domainId){
		return this.domainService.findDomain(domainId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DomainTo> findDomainList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.domainService.findDomains(page,sort,filters);
	}

	/**
	 * 
	 * @param emailTemplateId
	 */
	public Optional<EmailTemplateTo> findEmailTemplate(int emailTemplateId){
		return this.emailTemplateService.findEmailTemplate(emailTemplateId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EmailTemplateTo> findEmailTemplateList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.emailTemplateService.findEmailTemplates(page,sort,filters);
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int entityReferenceId){
		return this.entityReferenceService.findEntityReference(entityReferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EntityReferenceTo> findEntityReferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.entityReferenceService.findEntityReferences(page,sort,filters);
	}

	/**
	 * 
	 * @param eventId
	 */
	public Optional<EventTo> findEvent(int eventId){
		return this.eventService.findEvent(eventId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EventTo> findEventList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.eventService.findEvents(page,sort,filters);
	}

	/**
	 * 
	 * @param formulaTypeId
	 */
	public Optional<FormulaTypeTo> findFormulaType(int formulaTypeId){
		return this.formulaTypeService.findFormulaType(formulaTypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<FormulaTypeTo> findFormulaTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.formulaTypeService.findFormulaTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param htmlTagId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int htmlTagId){
		return this.htmlTagService.findHtmlTag(htmlTagId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findHtmlTagList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.htmlTagService.findHtmlTags(page,sort,filters);
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<InstanceTo> findInstance(int instanceId){
		return this.instanceService.findInstance(instanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.instanceService.findInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param languageId
	 */
	public Optional<LanguageTo> findLanguage(int languageId){
		return this.languageService.findLanguage(languageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findLanguageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.languageService.findLanguages(page,sort,filters);
	}

	/**
	 * 
	 * @param messageId
	 */
	public Optional<MessageTo> findMessage(int messageId){
		return this.messageService.findMessage(messageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MessageTo> findMessageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.messageService.findMessages(page,sort,filters);
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<NodeTo> findNode(int nodeId){
		return this.nodeService.findNode(nodeId);
	}

	/**
	 * 
	 * @param nodeCfId
	 */
	public Optional<NodeCfTo> findNodeCf(int nodeCfId){
		return this.nodeCfService.findNodeCf(nodeCfId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NodeCfTo> findNodeCfList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.nodeCfService.findNodeCfs(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NodeTo> findNodeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.nodeService.findNodes(page,sort,filters);
	}

	/**
	 * 
	 * @param numberSequenceRuleId
	 */
	public Optional<NumberSequenceRuleTo> findNumberSequenceRule(int numberSequenceRuleId){
		return this.numberSequenceRuleService.findNumberSequenceRule(numberSequenceRuleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleTo> findNumberSequenceRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numberSequenceRuleService.findNumberSequenceRules(page,sort,filters);
	}

	/**
	 * 
	 * @param numberSequenceRuleSegmentId
	 */
	public Optional<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegment(int numberSequenceRuleSegmentId){
		return this.numberSequenceRuleSegmentService.findNumberSequenceRuleSegment(numberSequenceRuleSegmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numberSequenceRuleSegmentService.findNumberSequenceRuleSegments(page,sort,filters);
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findOrganization(int organizationId){
		return this.organizationService.findOrganization(organizationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findOrganizationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.organizationService.findOrganizations(page,sort,filters);
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<PersonTo> findPerson(int personId){
		return this.personService.findPerson(personId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonTo> findPersonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personService.findPersons(page,sort,filters);
	}

	/**
	 * 
	 * @param personStatusId
	 */
	public Optional<PersonStatusTo> findPersonStatus(int personStatusId){
		return this.personStatusService.findPersonStatus(personStatusId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonStatusTo> findPersonStatusList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personStatusService.findPersonStatuss(page,sort,filters);
	}

	/**
	 * 
	 * @param phaseId
	 */
	public Optional<PhaseTo> findPhase(int phaseId){
		return this.phaseService.findPhase(phaseId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PhaseTo> findPhaseList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.phaseService.findPhases(page,sort,filters);
	}

	/**
	 * 
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findPreference(int preferenceId){
		return this.preferenceService.findPreference(preferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findPreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.preferenceService.findPreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param processId
	 */
	public Optional<ProcessTo> findProcess(int processId){
		return this.processService.findProcess(processId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findProcessList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.processService.findProcesss(page,sort,filters);
	}

	/**
	 * 
	 * @param productId
	 */
	public Optional<ProductTo> findProduct(int productId){
		return this.productService.findProduct(productId);
	}

	/**
	 * 
	 * @param productFunctionId
	 */
	public Optional<ProductFunctionTo> findProductFunction(int productFunctionId){
		return this.productFunctionService.findProductFunction(productFunctionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProductFunctionTo> findProductFunctionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.productFunctionService.findProductFunctions(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProductTo> findProductList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.productService.findProducts(page,sort,filters);
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<RequestTo> findRequest(int requestId){
		return this.requestService.findRequest(requestId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RequestTo> findRequestList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.requestService.findRequests(page,sort,filters);
	}

	/**
	 * 
	 * @param roleId
	 */
	public Optional<RoleTo> findRole(int roleId){
		return this.roleService.findRole(roleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findRoleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleService.findRoles(page,sort,filters);
	}

	/**
	 * 
	 * @param segmentId
	 */
	public Optional<SegmentTo> findSegment(int segmentId){
		return this.segmentService.findSegment(segmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SegmentTo> findSegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.segmentService.findSegments(page,sort,filters);
	}

	/**
	 * 
	 * @param stageId
	 */
	public Optional<StageTo> findStage(int stageId){
		return this.stageService.findStage(stageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StageTo> findStageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.stageService.findStages(page,sort,filters);
	}

	/**
	 * 
	 * @param statusId
	 */
	public Optional<StatusTo> findStatus(int statusId){
		return this.statusService.findStatus(statusId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StatusTo> findStatusList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.statusService.findStatuss(page,sort,filters);
	}

	/**
	 * 
	 * @param statusTypeId
	 */
	public Optional<StatusTypeTo> findStatusType(int statusTypeId){
		return this.statusTypeService.findStatusType(statusTypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StatusTypeTo> findStatusTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.statusTypeService.findStatusTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param styleThemeId
	 */
	public Optional<StyleThemeTo> findStyleTheme(int styleThemeId){
		return this.styleThemeService.findStyleTheme(styleThemeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StyleThemeTo> findStyleThemeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.styleThemeService.findStyleThemes(page,sort,filters);
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<TenantTo> findTenant(int tenantId){
		return this.tenantService.findTenant(tenantId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findTenantList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.tenantService.findTenants(page,sort,filters);
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<TranslationTo> findTranslation(int translationId){
		return this.translationService.findTranslation(translationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findTranslationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.translationService.findTranslations(page,sort,filters);
	}

	/**
	 * 
	 * @param typeId
	 */
	public Optional<TypeTo> findType(int typeId){
		return this.typeService.findType(typeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TypeTo> findTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.typeService.findTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param userId
	 */
	public Optional<UserTo> findUser(int userId){
		return this.userService.findUser(userId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> findUserList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.userService.findUsers(page,sort,filters);
	}

	/**
	 * 
	 * @param wfInstanceId
	 */
	public Optional<WfInstanceTo> findWfInstance(int wfInstanceId){
		return this.wfInstanceService.findWfInstance(wfInstanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WfInstanceTo> findWfInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.wfInstanceService.findWfInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		return this.workflowService.findWorkflow(workflowId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowTo> findWorkflowList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowService.findWorkflows(page,sort,filters);
	}

	/**
	 * 
	 * @param roleService
	 * @param userService
	 * @param numbersequenceruleService
	 * @param numbersequencerulesegmentService
	 * @param organizationService
	 * @param personService
	 * @param personstatusService
	 * @param phaseService
	 * @param preferenceService
	 * @param nodeService
	 * @param requestService
	 * @param messageService
	 * @param segmentService
	 * @param stageService
	 * @param statusService
	 * @param statustypeService
	 * @param stylethemeService
	 * @param tenantService
	 * @param translationService
	 * @param typeService
	 * @param processService
	 * @param alertService
	 * @param alertruleService
	 * @param attributesService
	 * @param auditlogsService
	 * @param cftypeService
	 * @param cfvalueService
	 * @param domainService
	 * @param customerService
	 * @param workflowService
	 * @param nodecfService
	 * @param productfunctionService
	 * @param productService
	 * @param delegationService
	 * @param emailtemplateService
	 * @param entityreferenceService
	 * @param eventService
	 * @param formulatypeService
	 * @param htmltagService
	 * @param wfinstanceService
	 * @param instanceService
	 * @param addressService
	 * @param languageService
	 */
	@Autowired
	public QueryResolver(RoleService roleService, UserService userService, NumberSequenceRuleService numbersequenceruleService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, OrganizationService organizationService, PersonService personService, PersonStatusService personstatusService, PhaseService phaseService, PreferenceService preferenceService, NodeService nodeService, RequestService requestService, MessageService messageService, SegmentService segmentService, StageService stageService, StatusService statusService, StatusTypeService statustypeService, StyleThemeService stylethemeService, TenantService tenantService, TranslationService translationService, TypeService typeService, ProcessService processService, AlertService alertService, AlertRuleService alertruleService, AttributesService attributesService, AuditLogsService auditlogsService, CfTypeService cftypeService, CfValueService cfvalueService, DomainService domainService, CustomerService customerService, WorkflowService workflowService, NodeCfService nodecfService, ProductFunctionService productfunctionService, ProductService productService, DelegationService delegationService, EmailTemplateService emailtemplateService, EntityReferenceService entityreferenceService, EventService eventService, FormulaTypeService formulatypeService, HtmlTagService htmltagService, WfInstanceService wfinstanceService, InstanceService instanceService, AddressService addressService, LanguageService languageService){
		this.workflowService = workflowService; 
		this.addressService = addressService; 
		this.productFunctionService = productfunctionService; 
		this.alertService = alertService; 
		this.alertRuleService = alertruleService; 
		this.attributesService = attributesService; 
		this.auditLogsService = auditlogsService; 
		this.cfTypeService = cftypeService; 
		this.cfValueService = cfvalueService; 
		this.domainService = domainService; 
		this.customerService = customerService; 
		this.delegationService = delegationService; 
		this.emailTemplateService = emailtemplateService; 
		this.entityReferenceService = entityreferenceService; 
		this.eventService = eventService; 
		this.formulaTypeService = formulatypeService; 
		this.htmlTagService = htmltagService; 
		this.wfInstanceService = wfinstanceService; 
		this.instanceService = instanceService; 
		this.languageService = languageService; 
		this.messageService = messageService; 
		this.productService = productService; 
		this.nodeService = nodeService; 
		this.nodeCfService = nodecfService; 
		this.numberSequenceRuleService = numbersequenceruleService; 
		this.numberSequenceRuleSegmentService = numbersequencerulesegmentService; 
		this.organizationService = organizationService; 
		this.personService = personService; 
		this.personStatusService = personstatusService; 
		this.phaseService = phaseService; 
		this.preferenceService = preferenceService; 
		this.processService = processService; 
		this.requestService = requestService; 
		this.roleService = roleService; 
		this.segmentService = segmentService; 
		this.stageService = stageService; 
		this.statusService = statusService; 
		this.statusTypeService = statustypeService; 
		this.styleThemeService = stylethemeService; 
		this.tenantService = tenantService; 
		this.translationService = translationService; 
		this.typeService = typeService; 
		this.userService = userService; 
	
	}

}