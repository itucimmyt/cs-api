///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:06 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.model.CollaboratorModel;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.CollaboratorService;
import org.ebs.model.ComponentModel;
import org.ebs.model.repos.ComponentRepository;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.ComponentService;
import org.ebs.model.CountryModel;
import org.ebs.model.repos.CountryRepository;
import org.ebs.services.to.CountryTo;
import org.ebs.services.CountryService;
import org.ebs.model.CropModel;
import org.ebs.model.repos.CropRepository;
import org.ebs.services.to.CropTo;
import org.ebs.services.CropService;
import org.ebs.model.CustomerModel;
import org.ebs.model.repos.CustomerRepository;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.model.DelegationModel;
import org.ebs.model.repos.DelegationRepository;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.model.DonorModel;
import org.ebs.model.repos.DonorRepository;
import org.ebs.services.to.DonorTo;
import org.ebs.services.DonorService;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.model.InstanceModel;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.model.LanguageModel;
import org.ebs.model.repos.LanguageRepository;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.model.MessageModel;
import org.ebs.model.repos.MessageRepository;
import org.ebs.services.to.MessageTo;
import org.ebs.services.MessageService;
import org.ebs.model.ModuleModel;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.ModuleService;
import org.ebs.model.OrganizationModel;
import org.ebs.model.repos.OrganizationRepository;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.model.PartnerModel;
import org.ebs.model.repos.PartnerRepository;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.PartnerService;
import org.ebs.model.PermissionModel;
import org.ebs.model.repos.PermissionRepository;
import org.ebs.services.to.PermissionTo;
import org.ebs.services.PermissionService;
import org.ebs.model.PersonModel;
import org.ebs.model.repos.PersonRepository;
import org.ebs.services.to.PersonTo;
import org.ebs.services.PersonService;
import org.ebs.model.PreferenceModel;
import org.ebs.model.repos.PreferenceRepository;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.model.ProcessModel;
import org.ebs.model.repos.ProcessRepository;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.model.ProgramModel;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.ProgramService;
import org.ebs.model.ProjectModel;
import org.ebs.model.repos.ProjectRepository;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.ProjectService;
import org.ebs.model.RoleModel;
import org.ebs.model.repos.RoleRepository;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.model.RoleActionModel;
import org.ebs.model.repos.RoleActionRepository;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.RoleActionService;
import org.ebs.model.SchemeModel;
import org.ebs.model.repos.SchemeRepository;
import org.ebs.services.to.SchemeTo;
import org.ebs.services.SchemeService;
import org.ebs.model.SeasonModel;
import org.ebs.model.repos.SeasonRepository;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.SeasonService;
import org.ebs.model.SessionModel;
import org.ebs.model.UserModel;
import org.ebs.model.repos.UserRepository;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import org.ebs.model.VendorModel;
import org.ebs.model.repos.VendorRepository;
import org.ebs.services.to.VendorTo;
import org.ebs.services.VendorService;
import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.WorkflowService;
import org.ebs.model.StyleThemeModel;
import org.ebs.model.repos.StyleThemeRepository;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.StyleThemeService;
import org.ebs.model.StageModel;
import org.ebs.model.repos.StageRepository;
import org.ebs.services.to.StageTo;
import org.ebs.services.StageService;
import org.ebs.model.BreedingZoneModel;
import org.ebs.model.repos.BreedingZoneRepository;
import org.ebs.services.to.BreedingZoneTo;
import org.ebs.services.BreedingZoneService;
import org.ebs.model.PhaseModel;
import org.ebs.model.repos.PhaseRepository;
import org.ebs.services.to.PhaseTo;
import org.ebs.services.PhaseService;
import org.ebs.model.PipelineModel;
import org.ebs.model.repos.PipelineRepository;
import org.ebs.services.to.PipelineTo;
import org.ebs.services.PipelineService;
import org.ebs.model.SchemaModel;
import org.ebs.model.repos.SchemaRepository;
import org.ebs.services.to.SchemaTo;
import org.ebs.services.SchemaService;
import org.ebs.model.TraitClassModel;
import org.ebs.model.repos.TraitClassRepository;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.TraitClassService;
import org.ebs.model.AssayclassModel;
import org.ebs.model.repos.AssayclassRepository;
import org.ebs.services.to.AssayclassTo;
import org.ebs.services.AssayclassService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.model.AssayGeneModel;
import org.ebs.model.repos.AssayGeneRepository;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.AssayGeneService;
import org.ebs.model.DataFormatModel;
import org.ebs.model.repos.DataFormatRepository;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.DataFormatService;
import org.ebs.model.MarkerModel;
import org.ebs.model.repos.MarkerRepository;
import org.ebs.services.to.MarkerTo;
import org.ebs.services.MarkerService;
import org.ebs.model.MarkerSynonymModel;
import org.ebs.model.repos.MarkerSynonymRepository;
import org.ebs.services.to.MarkerSynonymTo;
import org.ebs.services.MarkerSynonymService;
import org.ebs.model.PurposeModel;
import org.ebs.model.repos.PurposeRepository;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.PurposeService;
import org.ebs.model.ServiceModel;
import org.ebs.model.repos.ServiceRepository;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.WorkflowNodeService;
import org.ebs.model.ActionModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.services.to.ActionTo;
import org.ebs.services.ActionService;
import org.ebs.model.AddressModel;
import org.ebs.model.repos.AddressRepository;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.model.AlertModel;
import org.ebs.model.repos.AlertRepository;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.model.AlertRuleModel;
import org.ebs.model.repos.AlertRuleRepository;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.AlertRuleService;
import org.ebs.model.AttributesModel;
import org.ebs.model.repos.AttributesRepository;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.AttributesService;
import org.ebs.model.AuditLogsModel;
import org.ebs.model.repos.AuditLogsRepository;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.model.AuthenticationTypeModel;
import org.ebs.model.repos.AuthenticationTypeRepository;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.ServiceService;
import org.ebs.model.ServiceProviderModel;
import org.ebs.model.repos.ServiceProviderRepository;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.ServiceProviderService;
import org.ebs.model.ServiceTypeModel;
import org.ebs.model.repos.ServiceTypeRepository;
import org.ebs.services.to.ServiceTypeTo;
import org.ebs.services.ServiceTypeService;
import org.ebs.model.TechnologyPlatformModel;
import org.ebs.model.repos.TechnologyPlatformRepository;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.TechnologyPlatformService;
import org.ebs.model.TraitModel;
import org.ebs.model.repos.TraitRepository;
import org.ebs.services.to.TraitTo;
import org.ebs.services.TraitService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import org.ebs.model.repos.SessionRepository;
import org.ebs.services.to.SessionTo;
import org.ebs.services.SessionService;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.TenantTo;
import org.ebs.services.TenantService;
import org.ebs.model.TranslationModel;
import org.ebs.model.repos.TranslationRepository;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:06 PM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private WorkflowNodeService workflownodeService;
	private ActionService actionService;
	private AddressService addressService;
	private AlertService alertService;
	private AlertRuleService alertruleService;
	private AttributesService attributesService;
	private AuditLogsService auditlogsService;
	private AuthenticationTypeService authenticationtypeService;
	private CollaboratorService collaboratorService;
	private ComponentService componentService;
	private CountryService countryService;
	private CropService cropService;
	private CustomerService customerService;
	private DelegationService delegationService;
	private DonorService donorService;
	private HtmlTagService htmltagService;
	private InstanceService instanceService;
	private LanguageService languageService;
	private MessageService messageService;
	private ModuleService moduleService;
	private OrganizationService organizationService;
	private PartnerService partnerService;
	private PermissionService permissionService;
	private PersonService personService;
	private PreferenceService preferenceService;
	private ProcessService processService;
	private ProgramService programService;
	private ProjectService projectService;
	private RoleService roleService;
	private RoleActionService roleactionService;
	private SchemeService schemeService;
	private SeasonService seasonService;
	private SessionService sessionService;
	private TenantService tenantService;
	private TranslationService translationService;
	private UserService userService;
	private VendorService vendorService;
	private WorkflowService workflowService;
	private StyleThemeService stylethemeService;
	private StageService stageService;
	private BreedingZoneService breedingzoneService;
	private PhaseService phaseService;
	private PipelineService pipelineService;
	private SchemaService schemaService;
	private TraitClassService traitclassService;
	private AssayclassService assayclassService;
	private AssayGeneService assaygeneService;
	private DataFormatService dataformatService;
	private MarkerService markerService;
	private MarkerSynonymService markersynonymService;
	private PurposeService purposeService;
	private ServiceService serviceService;
	private ServiceProviderService serviceproviderService;
	private ServiceTypeService servicetypeService;
	private TechnologyPlatformService technologyplatformService;
	private TraitService traitService;

	/**
	 * 
	 * @param actionId
	 */
	public Optional<ActionTo> findAction(int actionId){
		return this.actionService.findAction(actionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ActionTo> findActionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.actionService.findActions(page,sort,filters);
	}

	/**
	 * 
	 * @param addressId
	 */
	public Optional<AddressTo> findAddress(int addressId){
		return this.addressService.findAddress(addressId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findAddressList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.addressService.findAddresss(page,sort,filters);
	}

	/**
	 * 
	 * @param alertId
	 */
	public Optional<AlertTo> findAlert(int alertId){
		return this.alertService.findAlert(alertId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findAlertList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertService.findAlerts(page,sort,filters);
	}

	/**
	 * 
	 * @param alertruleId
	 */
	public Optional<AlertRuleTo> findAlertRule(int alertruleId){
		return this.alertruleService.findAlertRule(alertruleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findAlertRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertruleService.findAlertRules(page,sort,filters);
	}

	/**
	 * 
	 * @param assayclassId
	 */
	public Optional<AssayclassTo> findAssayclass(int assayclassId){
		return this.assayclassService.findAssayclass(assayclassId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayclassTo> findAssayclassList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.assayclassService.findAssayclasss(page,sort,filters);
	}

	/**
	 * 
	 * @param assaygeneId
	 */
	public Optional<AssayGeneTo> findAssayGene(int assaygeneId){
		return this.assaygeneService.findAssayGene(assaygeneId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayGeneTo> findAssayGeneList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.assaygeneService.findAssayGenes(page,sort,filters);
	}

	/**
	 * 
	 * @param attributesId
	 */
	public Optional<AttributesTo> findAttributes(int attributesId){
		return this.attributesService.findAttributes(attributesId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AttributesTo> findAttributesList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.attributesService.findAttributess(page,sort,filters);
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	public Optional<AuditLogsTo> findAuditLogs(int auditlogsId){
		return this.auditlogsService.findAuditLogs(auditlogsId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findAuditLogsList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.auditlogsService.findAuditLogss(page,sort,filters);
	}

	/**
	 * 
	 * @param authenticationtypeId
	 */
	public Optional<AuthenticationTypeTo> findAuthenticationType(int authenticationtypeId){
		return this.authenticationtypeService.findAuthenticationType(authenticationtypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuthenticationTypeTo> findAuthenticationTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.authenticationtypeService.findAuthenticationTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param breedingzoneId
	 */
	public Optional<BreedingZoneTo> findBreedingZone(int breedingzoneId){
		return this.breedingzoneService.findBreedingZone(breedingzoneId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<BreedingZoneTo> findBreedingZoneList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.breedingzoneService.findBreedingZones(page,sort,filters);
	}

	/**
	 * 
	 * @param collaboratorId
	 */
	public Optional<CollaboratorTo> findCollaborator(int collaboratorId){
		return this.collaboratorService.findCollaborator(collaboratorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CollaboratorTo> findCollaboratorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.collaboratorService.findCollaborators(page,sort,filters);
	}

	/**
	 * 
	 * @param componentId
	 */
	public Optional<ComponentTo> findComponent(int componentId){
		return this.componentService.findComponent(componentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ComponentTo> findComponentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.componentService.findComponents(page,sort,filters);
	}

	/**
	 * 
	 * @param countryId
	 */
	public Optional<CountryTo> findCountry(int countryId){
		return this.countryService.findCountry(countryId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CountryTo> findCountryList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.countryService.findCountrys(page,sort,filters);
	}

	/**
	 * 
	 * @param cropId
	 */
	public Optional<CropTo> findCrop(int cropId){
		return this.cropService.findCrop(cropId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CropTo> findCropList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.cropService.findCrops(page,sort,filters);
	}

	/**
	 * 
	 * @param customerId
	 */
	public Optional<CustomerTo> findCustomer(int customerId){
		return this.customerService.findCustomer(customerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findCustomerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.customerService.findCustomers(page,sort,filters);
	}

	/**
	 * 
	 * @param dataformatId
	 */
	public Optional<DataFormatTo> findDataFormat(int dataformatId){
		return this.dataformatService.findDataFormat(dataformatId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DataFormatTo> findDataFormatList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.dataformatService.findDataFormats(page,sort,filters);
	}

	/**
	 * 
	 * @param delegationId
	 */
	public Optional<DelegationTo> findDelegation(int delegationId){
		return this.delegationService.findDelegation(delegationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> findDelegationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.delegationService.findDelegations(page,sort,filters);
	}

	/**
	 * 
	 * @param donorId
	 */
	public Optional<DonorTo> findDonor(int donorId){
		return this.donorService.findDonor(donorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DonorTo> findDonorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.donorService.findDonors(page,sort,filters);
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int htmltagId){
		return this.htmltagService.findHtmlTags(htmltagId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findHtmlTagList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.htmltagService.findHtmlTags(page,sort,filters);
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<InstanceTo> findInstance(int instanceId){
		return this.instanceService.findInstance(instanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.instanceService.findInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param languageId
	 */
	public Optional<LanguageTo> findLanguage(int languageId){
		return this.languageService.findLanguage(languageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findLanguageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.languageService.findLanguages(page,sort,filters);
	}

	/**
	 * 
	 * @param markerId
	 */
	public Optional<MarkerTo> findMarker(int markerId){
		return this.markerService.findMarker(markerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerTo> findMarkerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.markerService.findMarkers(page,sort,filters);
	}

	/**
	 * 
	 * @param markersynonymId
	 */
	public Optional<MarkerSynonymTo> findMarkerSynonym(int markersynonymId){
		return this.markersynonymService.findMarkerSynonym(markersynonymId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerSynonymTo> findMarkerSynonymList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.markersynonymService.findMarkerSynonyms(page,sort,filters);
	}

	/**
	 * 
	 * @param messageId
	 */
	public Optional<MessageTo> findMessage(int messageId){
		return this.messageService.findMessage(messageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MessageTo> findMessageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.messageService.findMessages(page,sort,filters);
	}

	/**
	 * 
	 * @param moduleId
	 */
	public Optional<ModuleTo> findModule(int moduleId){
		return this.moduleService.findModule(moduleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ModuleTo> findModuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.moduleService.findModules(page,sort,filters);
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findOrganization(int organizationId){
		return this.organizationService.findOrganization(organizationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findOrganizationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.organizationService.findOrganizations(page,sort,filters);
	}

	/**
	 * 
	 * @param partnerId
	 */
	public Optional<PartnerTo> findPartner(int partnerId){
		return this.partnerService.findPartner(partnerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PartnerTo> findPartnerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.partnerService.findPartners(page,sort,filters);
	}

	/**
	 * 
	 * @param permissionId
	 */
	public Optional<PermissionTo> findPermission(int permissionId){
		return this.permissionService.findPermission(permissionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PermissionTo> findPermissionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.permissionService.findPermissions(page,sort,filters);
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<PersonTo> findPerson(int personId){
		return this.personService.findPerson(personId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonTo> findPersonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personService.findPersons(page,sort,filters);
	}

	/**
	 * 
	 * @param phaseId
	 */
	public Optional<PhaseTo> findPhase(int phaseId){
		return this.phaseService.findPhase(phaseId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PhaseTo> findPhaseList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.phaseService.findPhases(page,sort,filters);
	}

	/**
	 * 
	 * @param pipelineId
	 */
	public Optional<PipelineTo> findPipeline(int pipelineId){
		return this.pipelineService.findPipeline(pipelineId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PipelineTo> findPipelineList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.pipelineService.findPipelines(page,sort,filters);
	}

	/**
	 * 
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findPreference(int preferenceId){
		return this.preferenceService.findPreference(preferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findPreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.preferenceService.findPreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param processId
	 */
	public Optional<ProcessTo> findProcess(int processId){
		return this.processService.findProcess(processId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findProcessList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.processService.findProcesss(page,sort,filters);
	}

	/**
	 * 
	 * @param programId
	 */
	public Optional<ProgramTo> findProgram(int programId){
		return this.programService.findProgram(programId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProgramTo> findProgramList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.programService.findPrograms(page,sort,filters);
	}

	/**
	 * 
	 * @param projectId
	 */
	public Optional<ProjectTo> findProject(int projectId){
		return this.projectService.findProject(projectId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProjectTo> findProjectList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.projectService.findProjects(page,sort,filters);
	}

	/**
	 * 
	 * @param purposeId
	 */
	public Optional<PurposeTo> findPurpose(int purposeId){
		return this.purposeService.findPurpose(purposeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PurposeTo> findPurposeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.purposeService.findPurposes(page,sort,filters);
	}

	/**
	 * 
	 * @param roleId
	 */
	public Optional<RoleTo> findRole(int roleId){
		return this.roleService.findRole(roleId);
	}

	/**
	 * 
	 * @param roleactionId
	 */
	public Optional<RoleActionTo> findRoleAction(int roleactionId){
		return this.roleactionService.findRoleAction(roleactionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleActionTo> findRoleActionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleactionService.findRoleActions(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findRoleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleService.findRoles(page,sort,filters);
	}

	/**
	 * 
	 * @param schemaId
	 */
	public Optional<SchemaTo> findSchema(int schemaId){
		return this.schemaService.findSchema(schemaId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SchemaTo> findSchemaList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.schemaService.findSchemas(page,sort,filters);
	}

	/**
	 * 
	 * @param schemeId
	 */
	public Optional<SchemeTo> findScheme(int schemeId){
		return this.schemeService.findScheme(schemeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SchemeTo> findSchemeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.schemeService.findSchemes(page,sort,filters);
	}

	/**
	 * 
	 * @param seasonId
	 */
	public Optional<SeasonTo> findSeason(int seasonId){
		return this.seasonService.findSeason(seasonId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SeasonTo> findSeasonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.seasonService.findSeasons(page,sort,filters);
	}

	/**
	 * 
	 * @param serviceId
	 */
	public Optional<ServiceTo> findService(int serviceId){
		return this.serviceService.findService(serviceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTo> findServiceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.serviceService.findServices(page,sort,filters);
	}

	/**
	 * 
	 * @param serviceproviderId
	 */
	public Optional<ServiceProviderTo> findServiceProvider(int serviceproviderId){
		return this.serviceproviderService.findServiceProvider(serviceproviderId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceProviderTo> findServiceProviderList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.serviceproviderService.findServiceProviders(page,sort,filters);
	}

	/**
	 * 
	 * @param servicetypeId
	 */
	public Optional<ServiceTypeTo> findServiceType(int servicetypeId){
		return this.servicetypeService.findServiceType(servicetypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTypeTo> findServiceTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.servicetypeService.findServiceTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param sessionId
	 */
	public Optional<SessionTo> findSession(int sessionId){
		return this.sessionService.findSession(sessionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SessionTo> findSessionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.sessionService.findSessions(page,sort,filters);
	}

	/**
	 * 
	 * @param stageId
	 */
	public Optional<StageTo> findStage(int stageId){
		return this.stageService.findStage(stageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StageTo> findStageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.stageService.findStages(page,sort,filters);
	}

	/**
	 * 
	 * @param stylethemeId
	 */
	public Optional<StyleThemeTo> findStyleTheme(int stylethemeId){
		return this.stylethemeService.findStyleTheme(stylethemeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StyleThemeTo> findStyleThemeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.stylethemeService.findStyleThemes(page,sort,filters);
	}

	/**
	 * 
	 * @param technologyplatformId
	 */
	public Optional<TechnologyPlatformTo> findTechnologyPlatform(int technologyplatformId){
		return this.technologyplatformService.findTechnologyPlatform(technologyplatformId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TechnologyPlatformTo> findTechnologyPlatformList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.technologyplatformService.findTechnologyPlatforms(page,sort,filters);
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<TenantTo> findTenant(int tenantId){
		return this.tenantService.findTenant(tenantId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findTenantList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.tenantService.findTenants(page,sort,filters);
	}

	/**
	 * 
	 * @param traitId
	 */
	public Optional<TraitTo> findTrait(int traitId){
		return this.traitService.findTrait(traitId);
	}

	/**
	 * 
	 * @param traitclassId
	 */
	public Optional<TraitClassTo> findTraitClass(int traitclassId){
		return this.traitclassService.findTraitClass(traitclassId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitClassTo> findTraitClassList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.traitclassService.findTraitClasss(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitTo> findTraitList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.traitService.findTraits(page,sort,filters);
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<TranslationTo> findTranslation(int translationId){
		return this.translationService.findTranslation(translationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findTranslationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.translationService.findTranslations(page,sort,filters);
	}

	/**
	 * 
	 * @param userId
	 */
	public Optional<UserTo> findUser(int userId){
		return this.userService.findUser(userId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> findUserList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.userService.findUsers(page,sort,filters);
	}

	/**
	 * 
	 * @param vendorId
	 */
	public Optional<VendorTo> findVendor(int vendorId){
		return this.vendorService.findVendor(vendorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<VendorTo> findVendorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.vendorService.findVendors(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		return this.workflowService.findWorkflow(workflowId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowTo> findWorkflowList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowService.findWorkflows(page,sort,filters);
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflownodeId){
		return this.workflownodeService.findWorkflowNode(workflownodeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findWorkflowNodeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflownodeService.findWorkflowNodes(page,sort,filters);
	}

	/**
	 * 
	 * @param processService
	 * @param schemaService
	 * @param pipelineService
	 * @param phaseService
	 * @param breedingzoneService
	 * @param stageService
	 * @param seasonService
	 * @param schemeService
	 * @param roleactionService
	 * @param roleService
	 * @param donorService
	 * @param programService
	 * @param assaygeneService
	 * @param preferenceService
	 * @param personService
	 * @param permissionService
	 * @param partnerService
	 * @param organizationService
	 * @param moduleService
	 * @param messageService
	 * @param languageService
	 * @param instanceService
	 * @param htmltagService
	 * @param projectService
	 * @param alertService
	 * @param workflownodeService
	 * @param stylethemeService
	 * @param workflowService
	 * @param vendorService
	 * @param userService
	 * @param translationService
	 * @param tenantService
	 * @param componentService
	 * @param authenticationtypeService
	 * @param auditlogsService
	 * @param traitclassService
	 * @param alertruleService
	 * @param assayclassService
	 * @param traitService
	 * @param technologyplatformService
	 * @param servicetypeService
	 * @param serviceproviderService
	 * @param serviceService
	 * @param purposeService
	 * @param markersynonymService
	 * @param markerService
	 * @param dataformatService
	 * @param collaboratorService
	 * @param attributesService
	 * @param customerService
	 * @param cropService
	 * @param countryService
	 * @param addressService
	 * @param actionService
	 * @param delegationService
	 * @param sessionService
	 */
	@Autowired
	public QueryResolver(ProcessService processService, SchemaService schemaService, PipelineService pipelineService, PhaseService phaseService, BreedingZoneService breedingzoneService, StageService stageService, SeasonService seasonService, SchemeService schemeService, RoleActionService roleactionService, RoleService roleService, DonorService donorService, ProgramService programService, AssayGeneService assaygeneService, PreferenceService preferenceService, PersonService personService, PermissionService permissionService, PartnerService partnerService, OrganizationService organizationService, ModuleService moduleService, MessageService messageService, LanguageService languageService, InstanceService instanceService, HtmlTagService htmltagService, ProjectService projectService, AlertService alertService, WorkflowNodeService workflownodeService, StyleThemeService stylethemeService, WorkflowService workflowService, VendorService vendorService, UserService userService, TranslationService translationService, TenantService tenantService, ComponentService componentService, AuthenticationTypeService authenticationtypeService, AuditLogsService auditlogsService, TraitClassService traitclassService, AlertRuleService alertruleService, AssayclassService assayclassService, TraitService traitService, TechnologyPlatformService technologyplatformService, ServiceTypeService servicetypeService, ServiceProviderService serviceproviderService, ServiceService serviceService, PurposeService purposeService, MarkerSynonymService markersynonymService, MarkerService markerService, DataFormatService dataformatService, CollaboratorService collaboratorService, AttributesService attributesService, CustomerService customerService, CropService cropService, CountryService countryService, AddressService addressService, ActionService actionService, DelegationService delegationService, SessionService sessionService){
		this.workflownodeService = workflownodeService; 
		this.actionService = actionService; 
		this.addressService = addressService; 
		this.alertService = alertService; 
		this.alertruleService = alertruleService; 
		this.attributesService = attributesService; 
		this.auditlogsService = auditlogsService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.collaboratorService = collaboratorService; 
		this.componentService = componentService; 
		this.countryService = countryService; 
		this.cropService = cropService; 
		this.customerService = customerService; 
		this.delegationService = delegationService; 
		this.donorService = donorService; 
		this.htmltagService = htmltagService; 
		this.instanceService = instanceService; 
		this.languageService = languageService; 
		this.messageService = messageService; 
		this.moduleService = moduleService; 
		this.organizationService = organizationService; 
		this.partnerService = partnerService; 
		this.permissionService = permissionService; 
		this.personService = personService; 
		this.preferenceService = preferenceService; 
		this.processService = processService; 
		this.programService = programService; 
		this.projectService = projectService; 
		this.roleService = roleService; 
		this.roleactionService = roleactionService; 
		this.schemeService = schemeService; 
		this.seasonService = seasonService; 
		this.sessionService = sessionService; 
		this.tenantService = tenantService; 
		this.translationService = translationService; 
		this.userService = userService; 
		this.vendorService = vendorService; 
		this.workflowService = workflowService; 
		this.stylethemeService = stylethemeService; 
		this.stageService = stageService; 
		this.breedingzoneService = breedingzoneService; 
		this.phaseService = phaseService; 
		this.pipelineService = pipelineService; 
		this.schemaService = schemaService; 
		this.traitclassService = traitclassService; 
		this.assayclassService = assayclassService; 
		this.assaygeneService = assaygeneService; 
		this.dataformatService = dataformatService; 
		this.markerService = markerService; 
		this.markersynonymService = markersynonymService; 
		this.purposeService = purposeService; 
		this.serviceService = serviceService; 
		this.serviceproviderService = serviceproviderService; 
		this.servicetypeService = servicetypeService; 
		this.technologyplatformService = technologyplatformService; 
		this.traitService = traitService; 
	
	}

}