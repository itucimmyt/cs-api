///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:05:50 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.ebs.services.MarkerService;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.DataFormatService;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.AssayGeneService;
import org.ebs.services.to.AssayclassTo;
import org.ebs.services.AssayclassService;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.TraitClassService;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.WorkflowStatusService;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.WorkflowStageService;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.WorkflowPhaseService;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.WorkflowNodeCFService;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.WorkflowInstanceService;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.WorkflowEventService;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.WorkflowCFValueService;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.WorkflowCFTypeService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.VendorTo;
import org.ebs.services.VendorService;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.TenantService;
import org.ebs.services.to.TeamTo;
import org.ebs.services.TeamService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.SessionTo;
import org.ebs.services.SessionService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.SegmentService;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.SeasonService;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.RoleActionService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.services.to.RequestTo;
import org.ebs.services.RequestService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.ProjectService;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.ProgramService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.PersonService;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.PartnerService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.ModuleService;
import org.ebs.services.to.NotificationTo;
import org.ebs.services.NotificationService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.DonorTo;
import org.ebs.services.DonorService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.services.to.CropTo;
import org.ebs.services.CropService;
import org.ebs.services.to.CountryTo;
import org.ebs.services.CountryService;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.ComponentService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.ActionService;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.WorkflowStatusTypeService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.services.to.TraitTo;
import org.ebs.services.TraitService;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.TechnologyPlatformService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.ebs.services.to.ServiceTypeTo;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.ServiceProviderService;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.ServiceService;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.PurposeService;
import org.ebs.services.to.MarkerSynonymTo;
import org.ebs.services.MarkerSynonymService;
import org.ebs.services.to.MarkerTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:05:50 AM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private TraitService traitService;
	private TechnologyPlatformService technologyplatformService;
	private ServiceTypeService servicetypeService;
	private ServiceProviderService serviceproviderService;
	private ServiceService serviceService;
	private PurposeService purposeService;
	private MarkerSynonymService markersynonymService;
	private MarkerService markerService;
	private DataFormatService dataformatService;
	private AssayGeneService assaygeneService;
	private AssayclassService assayclassService;
	private TraitClassService traitclassService;
	private WorkflowStatusService workflowstatusService;
	private WorkflowStageService workflowstageService;
	private WorkflowPhaseService workflowphaseService;
	private WorkflowNodeCFService workflownodecfService;
	private WorkflowNodeService workflownodeService;
	private WorkflowInstanceService workflowinstanceService;
	private WorkflowEventService workfloweventService;
	private WorkflowCFValueService workflowcfvalueService;
	private WorkflowCFTypeService workflowcftypeService;
	private WorkflowService workflowService;
	private VendorService vendorService;
	private UserService userService;
	private TranslationService translationService;
	private TenantService tenantService;
	private TeamService teamService;
	private StyleThemeService stylethemeService;
	private SessionService sessionService;
	private SegmentService segmentService;
	private SeasonService seasonService;
	private RoleActionService roleactionService;
	private RoleService roleService;
	private RequestService requestService;
	private ProjectService projectService;
	private ProgramService programService;
	private ProcessService processService;
	private PreferenceService preferenceService;
	private PersonService personService;
	private PartnerService partnerService;
	private OrganizationService organizationService;
	private NumberSequenceRuleSegmentService numbersequencerulesegmentService;
	private NumberSequenceRuleService numbersequenceruleService;
	private ModuleService moduleService;
	private NotificationService notificationService;
	private LanguageService languageService;
	private InstanceService instanceService;
	private HtmlTagService htmltagService;
	private EntityReferenceService entityreferenceService;
	private EmailTemplateService emailtemplateService;
	private DonorService donorService;
	private DelegationService delegationService;
	private CustomerService customerService;
	private CropService cropService;
	private CountryService countryService;
	private ComponentService componentService;
	private CollaboratorService collaboratorService;
	private AuthenticationTypeService authenticationtypeService;
	private AuditLogsService auditlogsService;
	private AttributesService attributesService;
	private AlertRuleService alertruleService;
	private AlertService alertService;
	private AddressService addressService;
	private ActionService actionService;
	private WorkflowStatusTypeService workflowstatustypeService;

	/**
	 * 
	 * @param actionId
	 */
	public Optional<ActionTo> findaction(int actionId){
		return this.actionService.findaction(actionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ActionTo> findactionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.actionService.findactions(page,sort,filters);
	}

	/**
	 * 
	 * @param addressId
	 */
	public Optional<AddressTo> findaddress(int addressId){
		return this.addressService.findaddress(addressId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findaddressList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.addressService.findaddresss(page,sort,filters);
	}

	/**
	 * 
	 * @param alertId
	 */
	public Optional<AlertTo> findalert(int alertId){
		return this.alertService.findalert(alertId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findalertList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertService.findalerts(page,sort,filters);
	}

	/**
	 * 
	 * @param alertruleId
	 */
	public Optional<AlertRuleTo> findalertrule(int alertruleId){
		return this.alertruleService.findalertrule(alertruleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findalertruleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertruleService.findalertrules(page,sort,filters);
	}

	/**
	 * 
	 * @param assayclassId
	 */
	public Optional<AssayclassTo> findassayclass(int assayclassId){
		return this.assayclassService.findassayclass(assayclassId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayclassTo> findassayclassList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.assayclassService.findassayclasss(page,sort,filters);
	}

	/**
	 * 
	 * @param assaygeneId
	 */
	public Optional<AssayGeneTo> findassaygene(int assaygeneId){
		return this.assaygeneService.findassaygene(assaygeneId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayGeneTo> findassaygeneList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.assaygeneService.findassaygenes(page,sort,filters);
	}

	/**
	 * 
	 * @param attributesId
	 */
	public Optional<AttributesTo> findattributes(int attributesId){
		return this.attributesService.findattributes(attributesId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AttributesTo> findattributesList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.attributesService.findattributess(page,sort,filters);
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	public Optional<AuditLogsTo> findauditlogs(int auditlogsId){
		return this.auditlogsService.findauditlogs(auditlogsId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findauditlogsList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.auditlogsService.findauditlogss(page,sort,filters);
	}

	/**
	 * 
	 * @param authenticationtypeId
	 */
	public Optional<AuthenticationTypeTo> findauthenticationtype(int authenticationtypeId){
		return this.authenticationtypeService.findauthenticationtype(authenticationtypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuthenticationTypeTo> findauthenticationtypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.authenticationtypeService.findauthenticationtypes(page,sort,filters);
	}

	/**
	 * 
	 * @param collaboratorId
	 */
	public Optional<CollaboratorTo> findcollaborator(int collaboratorId){
		return this.collaboratorService.findcollaborator(collaboratorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CollaboratorTo> findcollaboratorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.collaboratorService.findcollaborators(page,sort,filters);
	}

	/**
	 * 
	 * @param componentId
	 */
	public Optional<ComponentTo> findcomponent(int componentId){
		return this.componentService.findcomponent(componentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ComponentTo> findcomponentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.componentService.findcomponents(page,sort,filters);
	}

	/**
	 * 
	 * @param countryId
	 */
	public Optional<CountryTo> findcountry(int countryId){
		return this.countryService.findcountry(countryId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CountryTo> findcountryList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.countryService.findcountrys(page,sort,filters);
	}

	/**
	 * 
	 * @param cropId
	 */
	public Optional<CropTo> findcrop(int cropId){
		return this.cropService.findcrop(cropId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CropTo> findcropList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.cropService.findcrops(page,sort,filters);
	}

	/**
	 * 
	 * @param customerId
	 */
	public Optional<CustomerTo> findcustomer(int customerId){
		return this.customerService.findcustomer(customerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findcustomerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.customerService.findcustomers(page,sort,filters);
	}

	/**
	 * 
	 * @param dataformatId
	 */
	public Optional<DataFormatTo> finddataformat(int dataformatId){
		return this.dataformatService.finddataformat(dataformatId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DataFormatTo> finddataformatList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.dataformatService.finddataformats(page,sort,filters);
	}

	/**
	 * 
	 * @param delegationId
	 */
	public Optional<DelegationTo> finddelegation(int delegationId){
		return this.delegationService.finddelegation(delegationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> finddelegationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.delegationService.finddelegations(page,sort,filters);
	}

	/**
	 * 
	 * @param donorId
	 */
	public Optional<DonorTo> finddonor(int donorId){
		return this.donorService.finddonor(donorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DonorTo> finddonorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.donorService.finddonors(page,sort,filters);
	}

	/**
	 * 
	 * @param emailtemplateId
	 */
	public Optional<EmailTemplateTo> findemailtemplate(int emailtemplateId){
		return this.emailtemplateService.findemailtemplate(emailtemplateId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EmailTemplateTo> findemailtemplateList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.emailtemplateService.findemailtemplates(page,sort,filters);
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Optional<EntityReferenceTo> findentityreference(int entityreferenceId){
		return this.entityreferenceService.findentityreference(entityreferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EntityReferenceTo> findentityreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.entityreferenceService.findentityreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Optional<HtmlTagTo> findhtmltag(int htmltagId){
		return this.htmltagService.findhtmltag(htmltagId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findhtmltagList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.htmltagService.findhtmltags(page,sort,filters);
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<InstanceTo> findinstance(int instanceId){
		return this.instanceService.findinstance(instanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findinstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.instanceService.findinstances(page,sort,filters);
	}

	/**
	 * 
	 * @param languageId
	 */
	public Optional<LanguageTo> findlanguage(int languageId){
		return this.languageService.findlanguage(languageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findlanguageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.languageService.findlanguages(page,sort,filters);
	}

	/**
	 * 
	 * @param markerId
	 */
	public Optional<MarkerTo> findmarker(int markerId){
		return this.markerService.findmarker(markerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerTo> findmarkerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.markerService.findmarkers(page,sort,filters);
	}

	/**
	 * 
	 * @param markersynonymId
	 */
	public Optional<MarkerSynonymTo> findmarkersynonym(int markersynonymId){
		return this.markersynonymService.findmarkersynonym(markersynonymId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerSynonymTo> findmarkersynonymList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.markersynonymService.findmarkersynonyms(page,sort,filters);
	}

	/**
	 * 
	 * @param moduleId
	 */
	public Optional<ModuleTo> findmodule(int moduleId){
		return this.moduleService.findmodule(moduleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ModuleTo> findmoduleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.moduleService.findmodules(page,sort,filters);
	}

	/**
	 * 
	 * @param notificationId
	 */
	public Optional<NotificationTo> findnotification(int notificationId){
		return this.notificationService.findnotification(notificationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NotificationTo> findnotificationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.notificationService.findnotifications(page,sort,filters);
	}

	/**
	 * 
	 * @param numbersequenceruleId
	 */
	public Optional<NumberSequenceRuleTo> findnumbersequencerule(int numbersequenceruleId){
		return this.numbersequenceruleService.findnumbersequencerule(numbersequenceruleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleTo> findnumbersequenceruleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numbersequenceruleService.findnumbersequencerules(page,sort,filters);
	}

	/**
	 * 
	 * @param numbersequencerulesegmentId
	 */
	public Optional<NumberSequenceRuleSegmentTo> findnumbersequencerulesegment(int numbersequencerulesegmentId){
		return this.numbersequencerulesegmentService.findnumbersequencerulesegment(numbersequencerulesegmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleSegmentTo> findnumbersequencerulesegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numbersequencerulesegmentService.findnumbersequencerulesegments(page,sort,filters);
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findorganization(int organizationId){
		return this.organizationService.findorganization(organizationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findorganizationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.organizationService.findorganizations(page,sort,filters);
	}

	/**
	 * 
	 * @param partnerId
	 */
	public Optional<PartnerTo> findpartner(int partnerId){
		return this.partnerService.findpartner(partnerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PartnerTo> findpartnerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.partnerService.findpartners(page,sort,filters);
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<PersonTo> findperson(int personId){
		return this.personService.findperson(personId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonTo> findpersonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personService.findpersons(page,sort,filters);
	}

	/**
	 * 
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findpreference(int preferenceId){
		return this.preferenceService.findpreference(preferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findpreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.preferenceService.findpreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param processId
	 */
	public Optional<ProcessTo> findprocess(int processId){
		return this.processService.findprocess(processId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findprocessList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.processService.findprocesss(page,sort,filters);
	}

	/**
	 * 
	 * @param programId
	 */
	public Optional<ProgramTo> findprogram(int programId){
		return this.programService.findprogram(programId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProgramTo> findprogramList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.programService.findprograms(page,sort,filters);
	}

	/**
	 * 
	 * @param projectId
	 */
	public Optional<ProjectTo> findproject(int projectId){
		return this.projectService.findproject(projectId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProjectTo> findprojectList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.projectService.findprojects(page,sort,filters);
	}

	/**
	 * 
	 * @param purposeId
	 */
	public Optional<PurposeTo> findpurpose(int purposeId){
		return this.purposeService.findpurpose(purposeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PurposeTo> findpurposeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.purposeService.findpurposes(page,sort,filters);
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<RequestTo> findrequest(int requestId){
		return this.requestService.findrequest(requestId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RequestTo> findrequestList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.requestService.findrequests(page,sort,filters);
	}

	/**
	 * 
	 * @param roleId
	 */
	public Optional<RoleTo> findrole(int roleId){
		return this.roleService.findrole(roleId);
	}

	/**
	 * 
	 * @param roleactionId
	 */
	public Optional<RoleActionTo> findroleaction(int roleactionId){
		return this.roleactionService.findroleaction(roleactionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleActionTo> findroleactionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleactionService.findroleactions(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findroleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleService.findroles(page,sort,filters);
	}

	/**
	 * 
	 * @param seasonId
	 */
	public Optional<SeasonTo> findseason(int seasonId){
		return this.seasonService.findseason(seasonId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SeasonTo> findseasonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.seasonService.findseasons(page,sort,filters);
	}

	/**
	 * 
	 * @param segmentId
	 */
	public Optional<SegmentTo> findsegment(int segmentId){
		return this.segmentService.findsegment(segmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SegmentTo> findsegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.segmentService.findsegments(page,sort,filters);
	}

	/**
	 * 
	 * @param serviceId
	 */
	public Optional<ServiceTo> findservice(int serviceId){
		return this.serviceService.findservice(serviceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTo> findserviceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.serviceService.findservices(page,sort,filters);
	}

	/**
	 * 
	 * @param serviceproviderId
	 */
	public Optional<ServiceProviderTo> findserviceprovider(int serviceproviderId){
		return this.serviceproviderService.findserviceprovider(serviceproviderId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceProviderTo> findserviceproviderList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.serviceproviderService.findserviceproviders(page,sort,filters);
	}

	/**
	 * 
	 * @param servicetypeId
	 */
	public Optional<ServiceTypeTo> findservicetype(int servicetypeId){
		return this.servicetypeService.findservicetype(servicetypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTypeTo> findservicetypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.servicetypeService.findservicetypes(page,sort,filters);
	}

	/**
	 * 
	 * @param sessionId
	 */
	public Optional<SessionTo> findsession(int sessionId){
		return this.sessionService.findsession(sessionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SessionTo> findsessionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.sessionService.findsessions(page,sort,filters);
	}

	/**
	 * 
	 * @param stylethemeId
	 */
	public Optional<StyleThemeTo> findstyletheme(int stylethemeId){
		return this.stylethemeService.findstyletheme(stylethemeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StyleThemeTo> findstylethemeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.stylethemeService.findstylethemes(page,sort,filters);
	}

	/**
	 * 
	 * @param teamId
	 */
	public Optional<TeamTo> findteam(int teamId){
		return this.teamService.findteam(teamId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TeamTo> findteamList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.teamService.findteams(page,sort,filters);
	}

	/**
	 * 
	 * @param technologyplatformId
	 */
	public Optional<TechnologyPlatformTo> findtechnologyplatform(int technologyplatformId){
		return this.technologyplatformService.findtechnologyplatform(technologyplatformId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TechnologyPlatformTo> findtechnologyplatformList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.technologyplatformService.findtechnologyplatforms(page,sort,filters);
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<TenantTo> findtenant(int tenantId){
		return this.tenantService.findtenant(tenantId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findtenantList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.tenantService.findtenants(page,sort,filters);
	}

	/**
	 * 
	 * @param traitId
	 */
	public Optional<TraitTo> findtrait(int traitId){
		return this.traitService.findtrait(traitId);
	}

	/**
	 * 
	 * @param traitclassId
	 */
	public Optional<TraitClassTo> findtraitclass(int traitclassId){
		return this.traitclassService.findtraitclass(traitclassId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitClassTo> findtraitclassList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.traitclassService.findtraitclasss(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitTo> findtraitList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.traitService.findtraits(page,sort,filters);
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<TranslationTo> findtranslation(int translationId){
		return this.translationService.findtranslation(translationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findtranslationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.translationService.findtranslations(page,sort,filters);
	}

	/**
	 * 
	 * @param userId
	 */
	public Optional<UserTo> finduser(int userId){
		return this.userService.finduser(userId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> finduserList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.userService.findusers(page,sort,filters);
	}

	/**
	 * 
	 * @param vendorId
	 */
	public Optional<VendorTo> findvendor(int vendorId){
		return this.vendorService.findvendor(vendorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<VendorTo> findvendorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.vendorService.findvendors(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<WorkflowTo> findworkflow(int workflowId){
		return this.workflowService.findworkflow(workflowId);
	}

	/**
	 * 
	 * @param workflowcftypeId
	 */
	public Optional<WorkflowCFTypeTo> findworkflowcftype(int workflowcftypeId){
		return this.workflowcftypeService.findworkflowcftype(workflowcftypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowCFTypeTo> findworkflowcftypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowcftypeService.findworkflowcftypes(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowcfvalueId
	 */
	public Optional<WorkflowCFValueTo> findworkflowcfvalue(int workflowcfvalueId){
		return this.workflowcfvalueService.findworkflowcfvalue(workflowcfvalueId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowCFValueTo> findworkflowcfvalueList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowcfvalueService.findworkflowcfvalues(page,sort,filters);
	}

	/**
	 * 
	 * @param workfloweventId
	 */
	public Optional<WorkflowEventTo> findworkflowevent(int workfloweventId){
		return this.workfloweventService.findworkflowevent(workfloweventId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowEventTo> findworkfloweventList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workfloweventService.findworkflowevents(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowinstanceId
	 */
	public Optional<WorkflowInstanceTo> findworkflowinstance(int workflowinstanceId){
		return this.workflowinstanceService.findworkflowinstance(workflowinstanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowInstanceTo> findworkflowinstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowinstanceService.findworkflowinstances(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowTo> findworkflowList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowService.findworkflows(page,sort,filters);
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowNodeTo> findworkflownode(int workflownodeId){
		return this.workflownodeService.findworkflownode(workflownodeId);
	}

	/**
	 * 
	 * @param workflownodecfId
	 */
	public Optional<WorkflowNodeCFTo> findworkflownodecf(int workflownodecfId){
		return this.workflownodecfService.findworkflownodecf(workflownodecfId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeCFTo> findworkflownodecfList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflownodecfService.findworkflownodecfs(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findworkflownodeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflownodeService.findworkflownodes(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowphaseId
	 */
	public Optional<WorkflowPhaseTo> findworkflowphase(int workflowphaseId){
		return this.workflowphaseService.findworkflowphase(workflowphaseId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowPhaseTo> findworkflowphaseList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowphaseService.findworkflowphases(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	public Optional<WorkflowStageTo> findworkflowstage(int workflowstageId){
		return this.workflowstageService.findworkflowstage(workflowstageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStageTo> findworkflowstageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowstageService.findworkflowstages(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowstatusId
	 */
	public Optional<WorkflowStatusTo> findworkflowstatus(int workflowstatusId){
		return this.workflowstatusService.findworkflowstatus(workflowstatusId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStatusTo> findworkflowstatusList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowstatusService.findworkflowstatuss(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowstatustypeId
	 */
	public Optional<WorkflowStatusTypeTo> findworkflowstatustype(int workflowstatustypeId){
		return this.workflowstatustypeService.findworkflowstatustype(workflowstatustypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStatusTypeTo> findworkflowstatustypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowstatustypeService.findworkflowstatustypes(page,sort,filters);
	}

	/**
	 * 
	 * @param roleService
	 * @param partnerService
	 * @param teamService
	 * @param stylethemeService
	 * @param sessionService
	 * @param segmentService
	 * @param translationService
	 * @param roleactionService
	 * @param userService
	 * @param requestService
	 * @param projectService
	 * @param programService
	 * @param processService
	 * @param preferenceService
	 * @param dataformatService
	 * @param seasonService
	 * @param workflownodeService
	 * @param assaygeneService
	 * @param assayclassService
	 * @param traitclassService
	 * @param workflowstatusService
	 * @param workflowstageService
	 * @param tenantService
	 * @param workflownodecfService
	 * @param organizationService
	 * @param workflowinstanceService
	 * @param workfloweventService
	 * @param workflowcfvalueService
	 * @param workflowcftypeService
	 * @param workflowService
	 * @param vendorService
	 * @param workflowphaseService
	 * @param servicetypeService
	 * @param personService
	 * @param alertruleService
	 * @param alertService
	 * @param addressService
	 * @param actionService
	 * @param auditlogsService
	 * @param technologyplatformService
	 * @param authenticationtypeService
	 * @param serviceproviderService
	 * @param serviceService
	 * @param purposeService
	 * @param markersynonymService
	 * @param markerService
	 * @param traitService
	 * @param workflowstatustypeService
	 * @param donorService
	 * @param numbersequencerulesegmentService
	 * @param numbersequenceruleService
	 * @param moduleService
	 * @param notificationService
	 * @param instanceService
	 * @param attributesService
	 * @param emailtemplateService
	 * @param languageService
	 * @param delegationService
	 * @param customerService
	 * @param cropService
	 * @param countryService
	 * @param componentService
	 * @param collaboratorService
	 * @param entityreferenceService
	 * @param htmltagService
	 */
	@Autowired
	public QueryResolver(RoleService roleService, PartnerService partnerService, TeamService teamService, StyleThemeService stylethemeService, SessionService sessionService, SegmentService segmentService, TranslationService translationService, RoleActionService roleactionService, UserService userService, RequestService requestService, ProjectService projectService, ProgramService programService, ProcessService processService, PreferenceService preferenceService, DataFormatService dataformatService, SeasonService seasonService, WorkflowNodeService workflownodeService, AssayGeneService assaygeneService, AssayclassService assayclassService, TraitClassService traitclassService, WorkflowStatusService workflowstatusService, WorkflowStageService workflowstageService, TenantService tenantService, WorkflowNodeCFService workflownodecfService, OrganizationService organizationService, WorkflowInstanceService workflowinstanceService, WorkflowEventService workfloweventService, WorkflowCFValueService workflowcfvalueService, WorkflowCFTypeService workflowcftypeService, WorkflowService workflowService, VendorService vendorService, WorkflowPhaseService workflowphaseService, ServiceTypeService servicetypeService, PersonService personService, AlertRuleService alertruleService, AlertService alertService, AddressService addressService, ActionService actionService, AuditLogsService auditlogsService, TechnologyPlatformService technologyplatformService, AuthenticationTypeService authenticationtypeService, ServiceProviderService serviceproviderService, ServiceService serviceService, PurposeService purposeService, MarkerSynonymService markersynonymService, MarkerService markerService, TraitService traitService, WorkflowStatusTypeService workflowstatustypeService, DonorService donorService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, NumberSequenceRuleService numbersequenceruleService, ModuleService moduleService, NotificationService notificationService, InstanceService instanceService, AttributesService attributesService, EmailTemplateService emailtemplateService, LanguageService languageService, DelegationService delegationService, CustomerService customerService, CropService cropService, CountryService countryService, ComponentService componentService, CollaboratorService collaboratorService, EntityReferenceService entityreferenceService, HtmlTagService htmltagService){
		this.traitService = traitService; 
		this.technologyplatformService = technologyplatformService; 
		this.servicetypeService = servicetypeService; 
		this.serviceproviderService = serviceproviderService; 
		this.serviceService = serviceService; 
		this.purposeService = purposeService; 
		this.markersynonymService = markersynonymService; 
		this.markerService = markerService; 
		this.dataformatService = dataformatService; 
		this.assaygeneService = assaygeneService; 
		this.assayclassService = assayclassService; 
		this.traitclassService = traitclassService; 
		this.workflowstatusService = workflowstatusService; 
		this.workflowstageService = workflowstageService; 
		this.workflowphaseService = workflowphaseService; 
		this.workflownodecfService = workflownodecfService; 
		this.workflownodeService = workflownodeService; 
		this.workflowinstanceService = workflowinstanceService; 
		this.workfloweventService = workfloweventService; 
		this.workflowcfvalueService = workflowcfvalueService; 
		this.workflowcftypeService = workflowcftypeService; 
		this.workflowService = workflowService; 
		this.vendorService = vendorService; 
		this.userService = userService; 
		this.translationService = translationService; 
		this.tenantService = tenantService; 
		this.teamService = teamService; 
		this.stylethemeService = stylethemeService; 
		this.sessionService = sessionService; 
		this.segmentService = segmentService; 
		this.seasonService = seasonService; 
		this.roleactionService = roleactionService; 
		this.roleService = roleService; 
		this.requestService = requestService; 
		this.projectService = projectService; 
		this.programService = programService; 
		this.processService = processService; 
		this.preferenceService = preferenceService; 
		this.personService = personService; 
		this.partnerService = partnerService; 
		this.organizationService = organizationService; 
		this.numbersequencerulesegmentService = numbersequencerulesegmentService; 
		this.numbersequenceruleService = numbersequenceruleService; 
		this.moduleService = moduleService; 
		this.notificationService = notificationService; 
		this.languageService = languageService; 
		this.instanceService = instanceService; 
		this.htmltagService = htmltagService; 
		this.entityreferenceService = entityreferenceService; 
		this.emailtemplateService = emailtemplateService; 
		this.donorService = donorService; 
		this.delegationService = delegationService; 
		this.customerService = customerService; 
		this.cropService = cropService; 
		this.countryService = countryService; 
		this.componentService = componentService; 
		this.collaboratorService = collaboratorService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.auditlogsService = auditlogsService; 
		this.attributesService = attributesService; 
		this.alertruleService = alertruleService; 
		this.alertService = alertService; 
		this.addressService = addressService; 
		this.actionService = actionService; 
		this.workflowstatustypeService = workflowstatustypeService; 
	
	}

}