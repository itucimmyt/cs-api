///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      10-Sep-2020 10:44:23 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.ebs.services.WorkflowPhaseService;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.WorkflowNodeCFService;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.WorkflowInstanceService;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.WorkflowEventService;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.WorkflowCFValueService;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.WorkflowCFTypeService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.VendorTo;
import org.ebs.services.VendorService;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.RoleActionService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.services.to.RequestTo;
import org.ebs.services.RequestService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.ProjectService;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.ProgramService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.PersonService;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.PartnerService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.ModuleService;
import org.ebs.services.to.NotificationTo;
import org.ebs.services.NotificationService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.DonorTo;
import org.ebs.services.DonorService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.services.to.CropTo;
import org.ebs.services.CropService;
import org.ebs.services.to.CountryTo;
import org.ebs.services.CountryService;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.ComponentService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.ActionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.services.to.TraitTo;
import org.ebs.services.TraitService;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.TechnologyPlatformService;
import org.ebs.services.to.ServiceTypeTo;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.ServiceProviderService;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.ServiceService;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.PurposeService;
import org.ebs.services.to.MarkerSynonymTo;
import org.ebs.services.MarkerSynonymService;
import org.ebs.services.to.MarkerTo;
import org.ebs.services.MarkerService;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.DataFormatService;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.AssayGeneService;
import org.ebs.services.to.AssayclassTo;
import org.ebs.services.AssayclassService;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.TraitClassService;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.WorkflowStatusService;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.WorkflowStageService;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.TenantService;
import org.ebs.services.to.TeamTo;
import org.ebs.services.TeamService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.SessionTo;
import org.ebs.services.SessionService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.SegmentService;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.SeasonService;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.WorkflowStatusTypeService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 10-Sep-2020 10:44:23 PM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private TraitService traitService;
	private TechnologyPlatformService technologyPlatformService;
	private ServiceTypeService serviceTypeService;
	private ServiceProviderService serviceProviderService;
	private ServiceService serviceService;
	private PurposeService purposeService;
	private MarkerSynonymService markerSynonymService;
	private MarkerService markerService;
	private DataFormatService dataFormatService;
	private AssayGeneService assayGeneService;
	private AssayclassService assayclassService;
	private TraitClassService traitClassService;
	private WorkflowStatusService workflowStatusService;
	private WorkflowStageService workflowStageService;
	private WorkflowPhaseService workflowPhaseService;
	private WorkflowNodeCFService workflowNodeCFService;
	private WorkflowNodeService workflowNodeService;
	private WorkflowInstanceService workflowInstanceService;
	private WorkflowEventService workflowEventService;
	private WorkflowCFValueService workflowCFValueService;
	private WorkflowCFTypeService workflowCFTypeService;
	private WorkflowService workflowService;
	private VendorService vendorService;
	private UserService userService;
	private TranslationService translationService;
	private TenantService tenantService;
	private TeamService teamService;
	private StyleThemeService styleThemeService;
	private SessionService sessionService;
	private SegmentService segmentService;
	private SeasonService seasonService;
	private RoleActionService roleActionService;
	private RoleService roleService;
	private RequestService requestService;
	private ProjectService projectService;
	private ProgramService programService;
	private ProcessService processService;
	private PreferenceService preferenceService;
	private PersonService personService;
	private PartnerService partnerService;
	private OrganizationService organizationService;
	private NumberSequenceRuleSegmentService numberSequenceRuleSegmentService;
	private NumberSequenceRuleService numberSequenceRuleService;
	private ModuleService moduleService;
	private NotificationService notificationService;
	private LanguageService languageService;
	private InstanceService instanceService;
	private HtmlTagService htmlTagService;
	private EntityReferenceService entityReferenceService;
	private EmailTemplateService emailTemplateService;
	private DonorService donorService;
	private DelegationService delegationService;
	private CustomerService customerService;
	private CropService cropService;
	private CountryService countryService;
	private ComponentService componentService;
	private CollaboratorService collaboratorService;
	private AuthenticationTypeService authenticationTypeService;
	private AuditLogsService auditLogsService;
	private AttributesService attributesService;
	private AlertRuleService alertRuleService;
	private AlertService alertService;
	private AddressService addressService;
	private ActionService actionService;
	private WorkflowStatusTypeService workflowStatusTypeService;

	/**
	 *
	 * @param actionId
	 */
	public Optional<ActionTo> findAction(int actionId){
		return this.actionService.findAction(actionId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ActionTo> findActionList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.actionService.findActions(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param addressId
	 */
	public Optional<AddressTo> findAddress(int addressId){
		return this.addressService.findAddress(addressId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findAddressList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.addressService.findAddresss(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param alertId
	 */
	public Optional<AlertTo> findAlert(int alertId){
		return this.alertService.findAlert(alertId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findAlertList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.alertService.findAlerts(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param alertRuleId
	 */
	public Optional<AlertRuleTo> findAlertRule(int alertRuleId){
		return this.alertRuleService.findAlertRule(alertRuleId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findAlertRuleList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.alertRuleService.findAlertRules(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param assayclassId
	 */
	public Optional<AssayclassTo> findAssayclass(int assayclassId){
		return this.assayclassService.findAssayclass(assayclassId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayclassTo> findAssayclassList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.assayclassService.findAssayclasss(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param assayGeneId
	 */
	public Optional<AssayGeneTo> findAssayGene(int assayGeneId){
		return this.assayGeneService.findAssayGene(assayGeneId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayGeneTo> findAssayGeneList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.assayGeneService.findAssayGenes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param attributesId
	 */
	public Optional<AttributesTo> findAttributes(int attributesId){
		return this.attributesService.findAttributes(attributesId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AttributesTo> findAttributesList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.attributesService.findAttributess(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param auditLogsId
	 */
	public Optional<AuditLogsTo> findAuditLogs(int auditLogsId){
		return this.auditLogsService.findAuditLogs(auditLogsId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findAuditLogsList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.auditLogsService.findAuditLogss(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param authenticationTypeId
	 */
	public Optional<AuthenticationTypeTo> findAuthenticationType(int authenticationTypeId){
		return this.authenticationTypeService.findAuthenticationType(authenticationTypeId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuthenticationTypeTo> findAuthenticationTypeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.authenticationTypeService.findAuthenticationTypes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param collaboratorId
	 */
	public Optional<CollaboratorTo> findCollaborator(int collaboratorId){
		return this.collaboratorService.findCollaborator(collaboratorId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CollaboratorTo> findCollaboratorList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.collaboratorService.findCollaborators(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param componentId
	 */
	public Optional<ComponentTo> findComponent(int componentId){
		return this.componentService.findComponent(componentId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ComponentTo> findComponentList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.componentService.findComponents(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param countryId
	 */
	public Optional<CountryTo> findCountry(int countryId){
		return this.countryService.findCountry(countryId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CountryTo> findCountryList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.countryService.findCountrys(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param cropId
	 */
	public Optional<CropTo> findCrop(int cropId){
		return this.cropService.findCrop(cropId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CropTo> findCropList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.cropService.findCrops(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param customerId
	 */
	public Optional<CustomerTo> findCustomer(int customerId){
		return this.customerService.findCustomer(customerId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findCustomerList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.customerService.findCustomers(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param dataFormatId
	 */
	public Optional<DataFormatTo> findDataFormat(int dataFormatId){
		return this.dataFormatService.findDataFormat(dataFormatId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DataFormatTo> findDataFormatList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.dataFormatService.findDataFormats(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param delegationId
	 */
	public Optional<DelegationTo> findDelegation(int delegationId){
		return this.delegationService.findDelegation(delegationId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> findDelegationList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.delegationService.findDelegations(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param donorId
	 */
	public Optional<DonorTo> findDonor(int donorId){
		return this.donorService.findDonor(donorId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DonorTo> findDonorList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.donorService.findDonors(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param emailTemplateId
	 */
	public Optional<EmailTemplateTo> findEmailTemplate(int emailTemplateId){
		return this.emailTemplateService.findEmailTemplate(emailTemplateId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EmailTemplateTo> findEmailTemplateList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.emailTemplateService.findEmailTemplates(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param entityReferenceId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int entityReferenceId){
		return this.entityReferenceService.findEntityReference(entityReferenceId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EntityReferenceTo> findEntityReferenceList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.entityReferenceService.findEntityReferences(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param htmlTagId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int htmlTagId){
		return this.htmlTagService.findHtmlTag(htmlTagId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findHtmlTagList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.htmlTagService.findHtmlTags(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param instanceId
	 */
	public Optional<InstanceTo> findInstance(int instanceId){
		return this.instanceService.findInstance(instanceId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findInstanceList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.instanceService.findInstances(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param languageId
	 */
	public Optional<LanguageTo> findLanguage(int languageId){
		return this.languageService.findLanguage(languageId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findLanguageList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.languageService.findLanguages(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param markerId
	 */
	public Optional<MarkerTo> findMarker(int markerId){
		return this.markerService.findMarker(markerId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerTo> findMarkerList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.markerService.findMarkers(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param markerSynonymId
	 */
	public Optional<MarkerSynonymTo> findMarkerSynonym(int markerSynonymId){
		return this.markerSynonymService.findMarkerSynonym(markerSynonymId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerSynonymTo> findMarkerSynonymList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.markerSynonymService.findMarkerSynonyms(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param moduleId
	 */
	public Optional<ModuleTo> findModule(int moduleId){
		return this.moduleService.findModule(moduleId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ModuleTo> findModuleList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.moduleService.findModules(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param notificationId
	 */
	public Optional<NotificationTo> findNotification(int notificationId){
		return this.notificationService.findNotification(notificationId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NotificationTo> findNotificationList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.notificationService.findNotifications(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param numberSequenceRuleId
	 */
	public Optional<NumberSequenceRuleTo> findNumberSequenceRule(int numberSequenceRuleId){
		return this.numberSequenceRuleService.findNumberSequenceRule(numberSequenceRuleId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleTo> findNumberSequenceRuleList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.numberSequenceRuleService.findNumberSequenceRules(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param numberSequenceRuleSegmentId
	 */
	public Optional<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegment(int numberSequenceRuleSegmentId){
		return this.numberSequenceRuleSegmentService.findNumberSequenceRuleSegment(numberSequenceRuleSegmentId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegmentList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.numberSequenceRuleSegmentService.findNumberSequenceRuleSegments(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findOrganization(int organizationId){
		return this.organizationService.findOrganization(organizationId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findOrganizationList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.organizationService.findOrganizations(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param partnerId
	 */
	public Optional<PartnerTo> findPartner(int partnerId){
		return this.partnerService.findPartner(partnerId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PartnerTo> findPartnerList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.partnerService.findPartners(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param personId
	 */
	public Optional<PersonTo> findPerson(int personId){
		return this.personService.findPerson(personId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonTo> findPersonList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.personService.findPersons(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findPreference(int preferenceId){
		return this.preferenceService.findPreference(preferenceId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findPreferenceList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.preferenceService.findPreferences(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param processId
	 */
	public Optional<ProcessTo> findProcess(int processId){
		return this.processService.findProcess(processId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findProcessList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.processService.findProcesss(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param programId
	 */
	public Optional<ProgramTo> findProgram(int programId){
		return this.programService.findProgram(programId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProgramTo> findProgramList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.programService.findPrograms(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param projectId
	 */
	public Optional<ProjectTo> findProject(int projectId){
		return this.projectService.findProject(projectId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProjectTo> findProjectList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.projectService.findProjects(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param purposeId
	 */
	public Optional<PurposeTo> findPurpose(int purposeId){
		return this.purposeService.findPurpose(purposeId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PurposeTo> findPurposeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.purposeService.findPurposes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param requestId
	 */
	public Optional<RequestTo> findRequest(int requestId){
		return this.requestService.findRequest(requestId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RequestTo> findRequestList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.requestService.findRequests(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param roleId
	 */
	public Optional<RoleTo> findRole(int roleId){
		return this.roleService.findRole(roleId);
	}

	/**
	 *
	 * @param roleActionId
	 */
	public Optional<RoleActionTo> findRoleAction(int roleActionId){
		return this.roleActionService.findRoleAction(roleActionId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleActionTo> findRoleActionList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.roleActionService.findRoleActions(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findRoleList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.roleService.findRoles(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param seasonId
	 */
	public Optional<SeasonTo> findSeason(int seasonId){
		return this.seasonService.findSeason(seasonId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SeasonTo> findSeasonList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.seasonService.findSeasons(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param segmentId
	 */
	public Optional<SegmentTo> findSegment(int segmentId){
		return this.segmentService.findSegment(segmentId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SegmentTo> findSegmentList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.segmentService.findSegments(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param serviceId
	 */
	public Optional<ServiceTo> findService(int serviceId){
		return this.serviceService.findService(serviceId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTo> findServiceList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.serviceService.findServices(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param serviceProviderId
	 */
	public Optional<ServiceProviderTo> findServiceProvider(int serviceProviderId){
		return this.serviceProviderService.findServiceProvider(serviceProviderId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceProviderTo> findServiceProviderList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.serviceProviderService.findServiceProviders(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param serviceTypeId
	 */
	public Optional<ServiceTypeTo> findServiceType(int serviceTypeId){
		return this.serviceTypeService.findServiceType(serviceTypeId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTypeTo> findServiceTypeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.serviceTypeService.findServiceTypes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param sessionId
	 */
	public Optional<SessionTo> findSession(int sessionId){
		return this.sessionService.findSession(sessionId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SessionTo> findSessionList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.sessionService.findSessions(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param styleThemeId
	 */
	public Optional<StyleThemeTo> findStyleTheme(int styleThemeId){
		return this.styleThemeService.findStyleTheme(styleThemeId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StyleThemeTo> findStyleThemeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.styleThemeService.findStyleThemes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param teamId
	 */
	public Optional<TeamTo> findTeam(int teamId){
		return this.teamService.findTeam(teamId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TeamTo> findTeamList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.teamService.findTeams(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param technologyPlatformId
	 */
	public Optional<TechnologyPlatformTo> findTechnologyPlatform(int technologyPlatformId){
		return this.technologyPlatformService.findTechnologyPlatform(technologyPlatformId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TechnologyPlatformTo> findTechnologyPlatformList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.technologyPlatformService.findTechnologyPlatforms(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param tenantId
	 */
	public Optional<TenantTo> findTenant(int tenantId){
		return this.tenantService.findTenant(tenantId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findTenantList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.tenantService.findTenants(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param traitId
	 */
	public Optional<TraitTo> findTrait(int traitId){
		return this.traitService.findTrait(traitId);
	}

	/**
	 *
	 * @param traitClassId
	 */
	public Optional<TraitClassTo> findTraitClass(int traitClassId){
		return this.traitClassService.findTraitClass(traitClassId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitClassTo> findTraitClassList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.traitClassService.findTraitClasss(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitTo> findTraitList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.traitService.findTraits(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param translationId
	 */
	public Optional<TranslationTo> findTranslation(int translationId){
		return this.translationService.findTranslation(translationId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findTranslationList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.translationService.findTranslations(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param userId
	 */
	public Optional<UserTo> findUser(int userId){
		return this.userService.findUser(userId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> findUserList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.userService.findUsers(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param vendorId
	 */
	public Optional<VendorTo> findVendor(int vendorId){
		return this.vendorService.findVendor(vendorId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<VendorTo> findVendorList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.vendorService.findVendors(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		return this.workflowService.findWorkflow(workflowId);
	}

	/**
	 *
	 * @param workflowCFTypeId
	 */
	public Optional<WorkflowCFTypeTo> findWorkflowCFType(int workflowCFTypeId){
		return this.workflowCFTypeService.findWorkflowCFType(workflowCFTypeId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowCFTypeTo> findWorkflowCFTypeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowCFTypeService.findWorkflowCFTypes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowCFValueId
	 */
	public Optional<WorkflowCFValueTo> findWorkflowCFValue(int workflowCFValueId){
		return this.workflowCFValueService.findWorkflowCFValue(workflowCFValueId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowCFValueTo> findWorkflowCFValueList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowCFValueService.findWorkflowCFValues(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowEventId
	 */
	public Optional<WorkflowEventTo> findWorkflowEvent(int workflowEventId){
		return this.workflowEventService.findWorkflowEvent(workflowEventId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowEventTo> findWorkflowEventList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowEventService.findWorkflowEvents(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowInstanceId
	 */
	public Optional<WorkflowInstanceTo> findWorkflowInstance(int workflowInstanceId){
		return this.workflowInstanceService.findWorkflowInstance(workflowInstanceId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowInstanceTo> findWorkflowInstanceList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowInstanceService.findWorkflowInstances(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowTo> findWorkflowList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowService.findWorkflows(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowNodeId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflowNodeId){
		return this.workflowNodeService.findWorkflowNode(workflowNodeId);
	}

	/**
	 *
	 * @param workflowNodeCFId
	 */
	public Optional<WorkflowNodeCFTo> findWorkflowNodeCF(int workflowNodeCFId){
		return this.workflowNodeCFService.findWorkflowNodeCF(workflowNodeCFId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeCFTo> findWorkflowNodeCFList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowNodeCFService.findWorkflowNodeCFs(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findWorkflowNodeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowNodeService.findWorkflowNodes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowPhaseId
	 */
	public Optional<WorkflowPhaseTo> findWorkflowPhase(int workflowPhaseId){
		return this.workflowPhaseService.findWorkflowPhase(workflowPhaseId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowPhaseTo> findWorkflowPhaseList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowPhaseService.findWorkflowPhases(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowStageId
	 */
	public Optional<WorkflowStageTo> findWorkflowStage(int workflowStageId){
		return this.workflowStageService.findWorkflowStage(workflowStageId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStageTo> findWorkflowStageList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowStageService.findWorkflowStages(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowStatusId
	 */
	public Optional<WorkflowStatusTo> findWorkflowStatus(int workflowStatusId){
		return this.workflowStatusService.findWorkflowStatus(workflowStatusId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStatusTo> findWorkflowStatusList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowStatusService.findWorkflowStatuss(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param workflowStatusTypeId
	 */
	public Optional<WorkflowStatusTypeTo> findWorkflowStatusType(int workflowStatusTypeId){
		return this.workflowStatusTypeService.findWorkflowStatusType(workflowStatusTypeId);
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStatusTypeTo> findWorkflowStatusTypeList(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return this.workflowStatusTypeService.findWorkflowStatusTypes(page,sort,filters,disjunctionFilters);
	}

	/**
	 *
	 * @param partnerService
	 * @param roleService
	 * @param languageService
	 * @param notificationService
	 * @param moduleService
	 * @param numbersequenceruleService
	 * @param htmltagService
	 * @param organizationService
	 * @param entityreferenceService
	 * @param personService
	 * @param preferenceService
	 * @param processService
	 * @param programService
	 * @param projectService
	 * @param requestService
	 * @param numbersequencerulesegmentService
	 * @param componentService
	 * @param workflowstatustypeService
	 * @param actionService
	 * @param addressService
	 * @param alertService
	 * @param alertruleService
	 * @param instanceService
	 * @param collaboratorService
	 * @param authenticationtypeService
	 * @param countryService
	 * @param cropService
	 * @param customerService
	 * @param delegationService
	 * @param donorService
	 * @param emailtemplateService
	 * @param auditlogsService
	 * @param attributesService
	 * @param markersynonymService
	 * @param purposeService
	 * @param serviceproviderService
	 * @param roleactionService
	 * @param technologyplatformService
	 * @param markerService
	 * @param stylethemeService
	 * @param serviceService
	 * @param teamService
	 * @param tenantService
	 * @param translationService
	 * @param userService
	 * @param vendorService
	 * @param workflowService
	 * @param traitService
	 * @param workflowcfvalueService
	 * @param seasonService
	 * @param segmentService
	 * @param sessionService
	 * @param servicetypeService
	 * @param workflowcftypeService
	 * @param dataformatService
	 * @param workfloweventService
	 * @param workflowinstanceService
	 * @param assaygeneService
	 * @param workflownodecfService
	 * @param workflowphaseService
	 * @param workflowstageService
	 * @param workflowstatusService
	 * @param traitclassService
	 * @param assayclassService
	 * @param workflownodeService
	 */
	@Autowired
	public QueryResolver(PartnerService partnerService, RoleService roleService, LanguageService languageService, NotificationService notificationService, ModuleService moduleService, NumberSequenceRuleService numbersequenceruleService, HtmlTagService htmltagService, OrganizationService organizationService, EntityReferenceService entityreferenceService, PersonService personService, PreferenceService preferenceService, ProcessService processService, ProgramService programService, ProjectService projectService, RequestService requestService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, ComponentService componentService, WorkflowStatusTypeService workflowstatustypeService, ActionService actionService, AddressService addressService, AlertService alertService, AlertRuleService alertruleService, InstanceService instanceService, CollaboratorService collaboratorService, AuthenticationTypeService authenticationtypeService, CountryService countryService, CropService cropService, CustomerService customerService, DelegationService delegationService, DonorService donorService, EmailTemplateService emailtemplateService, AuditLogsService auditlogsService, AttributesService attributesService, MarkerSynonymService markersynonymService, PurposeService purposeService, ServiceProviderService serviceproviderService, RoleActionService roleactionService, TechnologyPlatformService technologyplatformService, MarkerService markerService, StyleThemeService stylethemeService, ServiceService serviceService, TeamService teamService, TenantService tenantService, TranslationService translationService, UserService userService, VendorService vendorService, WorkflowService workflowService, TraitService traitService, WorkflowCFValueService workflowcfvalueService, SeasonService seasonService, SegmentService segmentService, SessionService sessionService, ServiceTypeService servicetypeService, WorkflowCFTypeService workflowcftypeService, DataFormatService dataformatService, WorkflowEventService workfloweventService, WorkflowInstanceService workflowinstanceService, AssayGeneService assaygeneService, WorkflowNodeCFService workflownodecfService, WorkflowPhaseService workflowphaseService, WorkflowStageService workflowstageService, WorkflowStatusService workflowstatusService, TraitClassService traitclassService, AssayclassService assayclassService, WorkflowNodeService workflownodeService){
		this.traitService = traitService;
		this.technologyPlatformService = technologyplatformService;
		this.serviceTypeService = servicetypeService;
		this.serviceProviderService = serviceproviderService;
		this.serviceService = serviceService;
		this.purposeService = purposeService;
		this.markerSynonymService = markersynonymService;
		this.markerService = markerService;
		this.dataFormatService = dataformatService;
		this.assayGeneService = assaygeneService;
		this.assayclassService = assayclassService;
		this.traitClassService = traitclassService;
		this.workflowStatusService = workflowstatusService;
		this.workflowStageService = workflowstageService;
		this.workflowPhaseService = workflowphaseService;
		this.workflowNodeCFService = workflownodecfService;
		this.workflowNodeService = workflownodeService;
		this.workflowInstanceService = workflowinstanceService;
		this.workflowEventService = workfloweventService;
		this.workflowCFValueService = workflowcfvalueService;
		this.workflowCFTypeService = workflowcftypeService;
		this.workflowService = workflowService;
		this.vendorService = vendorService;
		this.userService = userService;
		this.translationService = translationService;
		this.tenantService = tenantService;
		this.teamService = teamService;
		this.styleThemeService = stylethemeService;
		this.sessionService = sessionService;
		this.segmentService = segmentService;
		this.seasonService = seasonService;
		this.roleActionService = roleactionService;
		this.roleService = roleService;
		this.requestService = requestService;
		this.projectService = projectService;
		this.programService = programService;
		this.processService = processService;
		this.preferenceService = preferenceService;
		this.personService = personService;
		this.partnerService = partnerService;
		this.organizationService = organizationService;
		this.numberSequenceRuleSegmentService = numbersequencerulesegmentService;
		this.numberSequenceRuleService = numbersequenceruleService;
		this.moduleService = moduleService;
		this.notificationService = notificationService;
		this.languageService = languageService;
		this.instanceService = instanceService;
		this.htmlTagService = htmltagService;
		this.entityReferenceService = entityreferenceService;
		this.emailTemplateService = emailtemplateService;
		this.donorService = donorService;
		this.delegationService = delegationService;
		this.customerService = customerService;
		this.cropService = cropService;
		this.countryService = countryService;
		this.componentService = componentService;
		this.collaboratorService = collaboratorService;
		this.authenticationTypeService = authenticationtypeService;
		this.auditLogsService = auditlogsService;
		this.attributesService = attributesService;
		this.alertRuleService = alertruleService;
		this.alertService = alertService;
		this.addressService = addressService;
		this.actionService = actionService;
		this.workflowStatusTypeService = workflowstatustypeService;

	}

}