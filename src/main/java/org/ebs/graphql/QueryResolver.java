///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 12:07:11 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.model.CollaboratorModel;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.CollaboratorService;
import org.ebs.model.PartnerModel;
import org.ebs.model.repos.PartnerRepository;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.PartnerService;
import org.ebs.model.ThemeStyleModel;
import org.ebs.model.repos.ThemeStyleRepository;
import org.ebs.services.to.ThemeStyleTo;
import org.ebs.services.ThemeStyleService;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.model.TranslationModel;
import org.ebs.model.repos.TranslationRepository;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;
import org.ebs.model.LanguageModel;
import org.ebs.model.repos.LanguageRepository;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.model.DonorModel;
import org.ebs.model.repos.DonorRepository;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.ebs.services.to.DonorTo;
import org.ebs.services.DonorService;
import org.ebs.model.AuditLogsModel;
import org.ebs.model.repos.AuditLogsRepository;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.model.ProcessModel;
import org.ebs.model.repos.ProcessRepository;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.model.PreferenceModel;
import org.ebs.model.repos.PreferenceRepository;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.model.AlertRuleModel;
import org.ebs.model.repos.AlertRuleRepository;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.AlertRuleService;
import org.ebs.model.AlertModel;
import org.ebs.model.repos.AlertRepository;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.model.MessageModel;
import org.ebs.model.repos.MessageRepository;
import org.ebs.services.to.MessageTo;
import org.ebs.services.MessageService;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.WorkflowNodeService;
import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.WorkflowService;
import org.ebs.model.SessionModel;
import org.ebs.model.repos.SessionRepository;
import org.ebs.services.to.SessionTo;
import org.ebs.services.SessionService;
import org.ebs.model.AuthenticationTypeModel;
import org.ebs.model.repos.AuthenticationTypeRepository;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.model.AddressModel;
import org.ebs.model.repos.AddressRepository;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.model.RoleModel;
import org.ebs.model.repos.RoleRepository;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.model.PearsonModel;
import org.ebs.model.repos.PearsonRepository;
import org.ebs.services.to.PearsonTo;
import org.ebs.services.PearsonService;
import org.ebs.model.UserModel;
import org.ebs.model.repos.UserRepository;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.TenantTo;
import org.ebs.services.TenantService;
import org.ebs.model.OrganizationModel;
import org.ebs.model.repos.OrganizationRepository;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.model.CustomerModel;
import org.ebs.model.repos.CustomerRepository;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.model.ModuleModel;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.ModuleService;
import org.ebs.model.ActionModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.services.to.ActionTo;
import org.ebs.services.ActionService;
import org.ebs.model.DelegationModel;
import org.ebs.model.repos.DelegationRepository;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.model.ComponentModel;
import org.ebs.model.repos.ComponentRepository;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.ComponentService;
import org.ebs.model.InstanceModel;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.model.CountryModel;
import org.ebs.model.repos.CountryRepository;
import org.ebs.services.to.CountryTo;
import org.ebs.services.CountryService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 12:07:11 AM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private CollaboratorService collaboratorService;
	private PartnerService partnerService;
	private ThemeStyleService themestyleService;
	private HtmlTagService htmltagService;
	private TranslationService translationService;
	private LanguageService languageService;
	private DonorService donorService;
	private AuditLogsService auditlogsService;
	private ProcessService processService;
	private PreferenceService preferenceService;
	private AlertRuleService alertruleService;
	private AlertService alertService;
	private MessageService messageService;
	private WorkflowNodeService workflownodeService;
	private WorkflowService workflowService;
	private SessionService sessionService;
	private AuthenticationTypeService authenticationtypeService;
	private AddressService addressService;
	private RoleService roleService;
	private PearsonService pearsonService;
	private UserService userService;
	private TenantService tenantService;
	private OrganizationService organizationService;
	private CustomerService customerService;
	private ModuleService moduleService;
	private ActionService actionService;
	private DelegationService delegationService;
	private ComponentService componentService;
	private InstanceService instanceService;
	private CountryService countryService;

	/**
	 * 
	 * @param actionId
	 */
	public Optional<ActionTo> findAction(int actionId){
		return this.actionService.findAction(actionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ActionTo> findActionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.actionService.findActions(page,sort,filters);
	}

	/**
	 * 
	 * @param addressId
	 */
	public Optional<AddressTo> findAddress(int addressId){
		return this.addressService.findAddress(addressId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findAddressList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.addressService.findAddresss(page,sort,filters);
	}

	/**
	 * 
	 * @param alertId
	 */
	public Optional<AlertTo> findAlert(int alertId){
		return this.alertService.findAlert(alertId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findAlertList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertService.findAlerts(page,sort,filters);
	}

	/**
	 * 
	 * @param alertruleId
	 */
	public Optional<AlertRuleTo> findAlertRule(int alertruleId){
		return this.alertruleService.findAlertRule(alertruleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findAlertRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertruleService.findAlertRules(page,sort,filters);
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	public Optional<AuditLogsTo> findAuditLogs(int auditlogsId){
		return this.auditlogsService.findAuditLogs(auditlogsId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findAuditLogsList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.auditlogsService.findAuditLogss(page,sort,filters);
	}

	/**
	 * 
	 * @param authenticationtypeId
	 */
	public Optional<AuthenticationTypeTo> findAuthenticationType(int authenticationtypeId){
		return this.authenticationtypeService.findAuthenticationType(authenticationtypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuthenticationTypeTo> findAuthenticationTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.authenticationtypeService.findAuthenticationTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param collaboratorId
	 */
	public Optional<CollaboratorTo> findCollaborator(int collaboratorId){
		return this.collaboratorService.findCollaborator(collaboratorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CollaboratorTo> findCollaboratorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.collaboratorService.findCollaborators(page,sort,filters);
	}

	/**
	 * 
	 * @param componentId
	 */
	public Optional<ComponentTo> findComponent(int componentId){
		return this.componentService.findComponent(componentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ComponentTo> findComponentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.componentService.findComponents(page,sort,filters);
	}

	/**
	 * 
	 * @param countryId
	 */
	public Optional<CountryTo> findCountry(int countryId){
		return this.countryService.findCountry(countryId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CountryTo> findCountryList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.countryService.findCountrys(page,sort,filters);
	}

	/**
	 * 
	 * @param customerId
	 */
	public Optional<CustomerTo> findCustomer(int customerId){
		return this.customerService.findCustomer(customerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findCustomerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.customerService.findCustomers(page,sort,filters);
	}

	/**
	 * 
	 * @param delegationId
	 */
	public Optional<DelegationTo> findDelegation(int delegationId){
		return this.delegationService.findDelegation(delegationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> findDelegationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.delegationService.findDelegations(page,sort,filters);
	}

	/**
	 * 
	 * @param donorId
	 */
	public Optional<DonorTo> findDonor(int donorId){
		return this.donorService.findDonor(donorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DonorTo> findDonorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.donorService.findDonors(page,sort,filters);
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int htmltagId){
		return this.htmltagService.findHtmlTag(htmltagId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findHtmlTagList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.htmltagService.findHtmlTags(page,sort,filters);
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<InstanceTo> findInstance(int instanceId){
		return this.instanceService.findInstance(instanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.instanceService.findInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param languageId
	 */
	public Optional<LanguageTo> findLanguage(int languageId){
		return this.languageService.findLanguage(languageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findLanguageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.languageService.findLanguages(page,sort,filters);
	}

	/**
	 * 
	 * @param messageId
	 */
	public Optional<MessageTo> findMessage(int messageId){
		return this.messageService.findMessage(messageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MessageTo> findMessageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.messageService.findMessages(page,sort,filters);
	}

	/**
	 * 
	 * @param moduleId
	 */
	public Optional<ModuleTo> findModule(int moduleId){
		return this.moduleService.findModule(moduleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ModuleTo> findModuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.moduleService.findModules(page,sort,filters);
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findOrganization(int organizationId){
		return this.organizationService.findOrganization(organizationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findOrganizationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.organizationService.findOrganizations(page,sort,filters);
	}

	/**
	 * 
	 * @param partnerId
	 */
	public Optional<PartnerTo> findPartner(int partnerId){
		return this.partnerService.findPartner(partnerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PartnerTo> findPartnerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.partnerService.findPartners(page,sort,filters);
	}

	/**
	 * 
	 * @param pearsonId
	 */
	public Optional<PearsonTo> findPearson(int pearsonId){
		return this.pearsonService.findPearson(pearsonId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PearsonTo> findPearsonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.pearsonService.findPearsons(page,sort,filters);
	}

	/**
	 * 
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findPreference(int preferenceId){
		return this.preferenceService.findPreference(preferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findPreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.preferenceService.findPreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param processId
	 */
	public Optional<ProcessTo> findProcess(int processId){
		return this.processService.findProcess(processId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findProcessList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.processService.findProcesss(page,sort,filters);
	}

	/**
	 * 
	 * @param roleId
	 */
	public Optional<RoleTo> findRole(int roleId){
		return this.roleService.findRole(roleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findRoleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleService.findRoles(page,sort,filters);
	}

	/**
	 * 
	 * @param sessionId
	 */
	public Optional<SessionTo> findSession(int sessionId){
		return this.sessionService.findSession(sessionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SessionTo> findSessionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.sessionService.findSessions(page,sort,filters);
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<TenantTo> findTenant(int tenantId){
		return this.tenantService.findTenant(tenantId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findTenantList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.tenantService.findTenants(page,sort,filters);
	}

	/**
	 * 
	 * @param themestyleId
	 */
	public Optional<ThemeStyleTo> findThemeStyle(int themestyleId){
		return this.themestyleService.findThemeStyle(themestyleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ThemeStyleTo> findThemeStyleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.themestyleService.findThemeStyles(page,sort,filters);
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<TranslationTo> findTranslation(int translationId){
		return this.translationService.findTranslation(translationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findTranslationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.translationService.findTranslations(page,sort,filters);
	}

	/**
	 * 
	 * @param userId
	 */
	public Optional<UserTo> findUser(int userId){
		return this.userService.findUser(userId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> findUserList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.userService.findUsers(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		return this.workflowService.findWorkflow(workflowId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowTo> findWorkflowList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowService.findWorkflows(page,sort,filters);
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflownodeId){
		return this.workflownodeService.findWorkflowNode(workflownodeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findWorkflowNodeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflownodeService.findWorkflowNodes(page,sort,filters);
	}

	/**
	 * 
	 * @param addressService
	 * @param countryService
	 * @param instanceService
	 * @param componentService
	 * @param delegationService
	 * @param actionService
	 * @param moduleService
	 * @param customerService
	 * @param organizationService
	 * @param tenantService
	 * @param userService
	 * @param collaboratorService
	 * @param roleService
	 * @param authenticationtypeService
	 * @param sessionService
	 * @param languageService
	 * @param partnerService
	 * @param themestyleService
	 * @param pearsonService
	 * @param translationService
	 * @param workflowService
	 * @param donorService
	 * @param auditlogsService
	 * @param processService
	 * @param preferenceService
	 * @param alertruleService
	 * @param alertService
	 * @param messageService
	 * @param workflownodeService
	 * @param htmltagService
	 */
	@Autowired
	public QueryResolver(AddressService addressService, CountryService countryService, InstanceService instanceService, ComponentService componentService, DelegationService delegationService, ActionService actionService, ModuleService moduleService, CustomerService customerService, OrganizationService organizationService, TenantService tenantService, UserService userService, CollaboratorService collaboratorService, RoleService roleService, AuthenticationTypeService authenticationtypeService, SessionService sessionService, LanguageService languageService, PartnerService partnerService, ThemeStyleService themestyleService, PearsonService pearsonService, TranslationService translationService, WorkflowService workflowService, DonorService donorService, AuditLogsService auditlogsService, ProcessService processService, PreferenceService preferenceService, AlertRuleService alertruleService, AlertService alertService, MessageService messageService, WorkflowNodeService workflownodeService, HtmlTagService htmltagService){
		this.collaboratorService = collaboratorService; 
		this.partnerService = partnerService; 
		this.themestyleService = themestyleService; 
		this.htmltagService = htmltagService; 
		this.translationService = translationService; 
		this.languageService = languageService; 
		this.donorService = donorService; 
		this.auditlogsService = auditlogsService; 
		this.processService = processService; 
		this.preferenceService = preferenceService; 
		this.alertruleService = alertruleService; 
		this.alertService = alertService; 
		this.messageService = messageService; 
		this.workflownodeService = workflownodeService; 
		this.workflowService = workflowService; 
		this.sessionService = sessionService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.addressService = addressService; 
		this.roleService = roleService; 
		this.pearsonService = pearsonService; 
		this.userService = userService; 
		this.tenantService = tenantService; 
		this.organizationService = organizationService; 
		this.customerService = customerService; 
		this.moduleService = moduleService; 
		this.actionService = actionService; 
		this.delegationService = delegationService; 
		this.componentService = componentService; 
		this.instanceService = instanceService; 
		this.countryService = countryService; 
	
	}

}