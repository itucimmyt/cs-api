///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:20:00 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.ebs.services.to.ReportTo;
import org.ebs.services.ReportService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.services.to.ProductFunctionTo;
import org.ebs.services.ProductFunctionService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.services.to.AlertRuleTo;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.DomainTo;
import org.ebs.services.DomainService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.FormulaTypeTo;
import org.ebs.services.FormulaTypeService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.services.to.MessageTo;
import org.ebs.services.MessageService;
import org.ebs.services.to.ProductTo;
import org.ebs.services.ProductService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.PersonService;
import org.ebs.services.to.PersonStatusTo;
import org.ebs.services.PersonStatusService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.SegmentService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.FunctionalUnitTo;
import org.ebs.services.FunctionalUnitService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.TenantService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TypeTo;
import org.ebs.services.TypeService;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.BreedingCycleTo;
import org.ebs.services.BreedingCycleService;
import org.ebs.services.to.CropTo;
import org.ebs.services.CropService;
import org.ebs.services.to.DomainInstanceTo;
import org.ebs.services.DomainInstanceService;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.ProgramService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.ProjectService;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:20:00 AM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private TranslationService translationService;
	private TypeService typeService;
	private UserService userService;
	private NumberSequenceRuleSegmentService numberSequenceRuleSegmentService;
	private BreedingCycleService breedingCycleService;
	private CropService cropService;
	private DomainInstanceService domainInstanceService;
	private ProgramService programService;
	private ProjectService projectService;
	private ReportService reportService;
	private AddressService addressService;
	private ProductFunctionService productFunctionService;
	private AlertService alertService;
	private AlertRuleService alertRuleService;
	private AttributesService attributesService;
	private AuditLogsService auditLogsService;
	private DomainService domainService;
	private CustomerService customerService;
	private DelegationService delegationService;
	private EmailTemplateService emailTemplateService;
	private EntityReferenceService entityReferenceService;
	private FormulaTypeService formulaTypeService;
	private HtmlTagService htmlTagService;
	private InstanceService instanceService;
	private LanguageService languageService;
	private MessageService messageService;
	private ProductService productService;
	private NumberSequenceRuleService numberSequenceRuleService;
	private OrganizationService organizationService;
	private PersonService personService;
	private PersonStatusService personStatusService;
	private PreferenceService preferenceService;
	private ProcessService processService;
	private RoleService roleService;
	private SegmentService segmentService;
	private StyleThemeService styleThemeService;
	private FunctionalUnitService functionalUnitService;
	private TenantService tenantService;

	/**
	 * 
	 * @param addressId
	 */
	public Optional<AddressTo> findAddress(int addressId){
		return this.addressService.findAddress(addressId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findAddressList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.addressService.findAddresss(page,sort,filters);
	}

	/**
	 * 
	 * @param alertId
	 */
	public Optional<AlertTo> findAlert(int alertId){
		return this.alertService.findAlert(alertId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findAlertList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertService.findAlerts(page,sort,filters);
	}

	/**
	 * 
	 * @param alertRuleId
	 */
	public Optional<AlertRuleTo> findAlertRule(int alertRuleId){
		return this.alertRuleService.findAlertRule(alertRuleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findAlertRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertRuleService.findAlertRules(page,sort,filters);
	}

	/**
	 * 
	 * @param attributesId
	 */
	public Optional<AttributesTo> findAttributes(int attributesId){
		return this.attributesService.findAttributes(attributesId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AttributesTo> findAttributesList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.attributesService.findAttributess(page,sort,filters);
	}

	/**
	 * 
	 * @param auditLogsId
	 */
	public Optional<AuditLogsTo> findAuditLogs(int auditLogsId){
		return this.auditLogsService.findAuditLogs(auditLogsId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findAuditLogsList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.auditLogsService.findAuditLogss(page,sort,filters);
	}

	/**
	 * 
	 * @param breedingCycleId
	 */
	public Optional<BreedingCycleTo> findBreedingCycle(int breedingCycleId){
		return this.breedingCycleService.findBreedingCycle(breedingCycleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<BreedingCycleTo> findBreedingCycleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.breedingCycleService.findBreedingCycles(page,sort,filters);
	}

	/**
	 * 
	 * @param cropId
	 */
	public Optional<CropTo> findCrop(int cropId){
		return this.cropService.findCrop(cropId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CropTo> findCropList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.cropService.findCrops(page,sort,filters);
	}

	/**
	 * 
	 * @param customerId
	 */
	public Optional<CustomerTo> findCustomer(int customerId){
		return this.customerService.findCustomer(customerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findCustomerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.customerService.findCustomers(page,sort,filters);
	}

	/**
	 * 
	 * @param delegationId
	 */
	public Optional<DelegationTo> findDelegation(int delegationId){
		return this.delegationService.findDelegation(delegationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> findDelegationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.delegationService.findDelegations(page,sort,filters);
	}

	/**
	 * 
	 * @param domainId
	 */
	public Optional<DomainTo> findDomain(int domainId){
		return this.domainService.findDomain(domainId);
	}

	/**
	 * 
	 * @param domainInstanceId
	 */
	public Optional<DomainInstanceTo> findDomainInstance(int domainInstanceId){
		return this.domainInstanceService.findDomainInstance(domainInstanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DomainInstanceTo> findDomainInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.domainInstanceService.findDomainInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DomainTo> findDomainList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.domainService.findDomains(page,sort,filters);
	}

	/**
	 * 
	 * @param emailTemplateId
	 */
	public Optional<EmailTemplateTo> findEmailTemplate(int emailTemplateId){
		return this.emailTemplateService.findEmailTemplate(emailTemplateId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EmailTemplateTo> findEmailTemplateList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.emailTemplateService.findEmailTemplates(page,sort,filters);
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int entityReferenceId){
		return this.entityReferenceService.findEntityReference(entityReferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EntityReferenceTo> findEntityReferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.entityReferenceService.findEntityReferences(page,sort,filters);
	}

	/**
	 * 
	 * @param formulaTypeId
	 */
	public Optional<FormulaTypeTo> findFormulaType(int formulaTypeId){
		return this.formulaTypeService.findFormulaType(formulaTypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<FormulaTypeTo> findFormulaTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.formulaTypeService.findFormulaTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param functionalUnitId
	 */
	public Optional<FunctionalUnitTo> findFunctionalUnit(int functionalUnitId){
		return this.functionalUnitService.findFunctionalUnit(functionalUnitId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<FunctionalUnitTo> findFunctionalUnitList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.functionalUnitService.findFunctionalUnits(page,sort,filters);
	}

	/**
	 * 
	 * @param htmlTagId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int htmlTagId){
		return this.htmlTagService.findHtmlTag(htmlTagId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findHtmlTagList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.htmlTagService.findHtmlTags(page,sort,filters);
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<InstanceTo> findInstance(int instanceId){
		return this.instanceService.findInstance(instanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.instanceService.findInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param languageId
	 */
	public Optional<LanguageTo> findLanguage(int languageId){
		return this.languageService.findLanguage(languageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findLanguageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.languageService.findLanguages(page,sort,filters);
	}

	/**
	 * 
	 * @param messageId
	 */
	public Optional<MessageTo> findMessage(int messageId){
		return this.messageService.findMessage(messageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MessageTo> findMessageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.messageService.findMessages(page,sort,filters);
	}

	/**
	 * 
	 * @param numberSequenceRuleId
	 */
	public Optional<NumberSequenceRuleTo> findNumberSequenceRule(int numberSequenceRuleId){
		return this.numberSequenceRuleService.findNumberSequenceRule(numberSequenceRuleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleTo> findNumberSequenceRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numberSequenceRuleService.findNumberSequenceRules(page,sort,filters);
	}

	/**
	 * 
	 * @param numberSequenceRuleSegmentId
	 */
	public Optional<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegment(int numberSequenceRuleSegmentId){
		return this.numberSequenceRuleSegmentService.findNumberSequenceRuleSegment(numberSequenceRuleSegmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numberSequenceRuleSegmentService.findNumberSequenceRuleSegments(page,sort,filters);
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findOrganization(int organizationId){
		return this.organizationService.findOrganization(organizationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findOrganizationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.organizationService.findOrganizations(page,sort,filters);
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<PersonTo> findPerson(int personId){
		return this.personService.findPerson(personId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonTo> findPersonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personService.findPersons(page,sort,filters);
	}

	/**
	 * 
	 * @param personStatusId
	 */
	public Optional<PersonStatusTo> findPersonStatus(int personStatusId){
		return this.personStatusService.findPersonStatus(personStatusId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonStatusTo> findPersonStatusList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personStatusService.findPersonStatuss(page,sort,filters);
	}

	/**
	 * 
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findPreference(int preferenceId){
		return this.preferenceService.findPreference(preferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findPreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.preferenceService.findPreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param processId
	 */
	public Optional<ProcessTo> findProcess(int processId){
		return this.processService.findProcess(processId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findProcessList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.processService.findProcesss(page,sort,filters);
	}

	/**
	 * 
	 * @param productId
	 */
	public Optional<ProductTo> findProduct(int productId){
		return this.productService.findProduct(productId);
	}

	/**
	 * 
	 * @param productFunctionId
	 */
	public Optional<ProductFunctionTo> findProductFunction(int productFunctionId){
		return this.productFunctionService.findProductFunction(productFunctionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProductFunctionTo> findProductFunctionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.productFunctionService.findProductFunctions(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProductTo> findProductList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.productService.findProducts(page,sort,filters);
	}

	/**
	 * 
	 * @param programId
	 */
	public Optional<ProgramTo> findProgram(int programId){
		return this.programService.findProgram(programId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProgramTo> findProgramList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.programService.findPrograms(page,sort,filters);
	}

	/**
	 * 
	 * @param projectId
	 */
	public Optional<ProjectTo> findProject(int projectId){
		return this.projectService.findProject(projectId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProjectTo> findProjectList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.projectService.findProjects(page,sort,filters);
	}

	/**
	 * 
	 * @param reportId
	 */
	public Optional<ReportTo> findReport(int reportId){
		return this.reportService.findReport(reportId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ReportTo> findReportList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.reportService.findReports(page,sort,filters);
	}

	/**
	 * 
	 * @param roleId
	 */
	public Optional<RoleTo> findRole(int roleId){
		return this.roleService.findRole(roleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findRoleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleService.findRoles(page,sort,filters);
	}

	/**
	 * 
	 * @param segmentId
	 */
	public Optional<SegmentTo> findSegment(int segmentId){
		return this.segmentService.findSegment(segmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SegmentTo> findSegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.segmentService.findSegments(page,sort,filters);
	}

	/**
	 * 
	 * @param styleThemeId
	 */
	public Optional<StyleThemeTo> findStyleTheme(int styleThemeId){
		return this.styleThemeService.findStyleTheme(styleThemeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StyleThemeTo> findStyleThemeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.styleThemeService.findStyleThemes(page,sort,filters);
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<TenantTo> findTenant(int tenantId){
		return this.tenantService.findTenant(tenantId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findTenantList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.tenantService.findTenants(page,sort,filters);
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<TranslationTo> findTranslation(int translationId){
		return this.translationService.findTranslation(translationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findTranslationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.translationService.findTranslations(page,sort,filters);
	}

	/**
	 * 
	 * @param typeId
	 */
	public Optional<TypeTo> findType(int typeId){
		return this.typeService.findType(typeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TypeTo> findTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.typeService.findTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param userId
	 */
	public Optional<UserTo> findUser(int userId){
		return this.userService.findUser(userId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> findUserList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.userService.findUsers(page,sort,filters);
	}

	/**
	 * 
	 * @param domainService
	 * @param languageService
	 * @param instanceService
	 * @param htmltagService
	 * @param formulatypeService
	 * @param entityreferenceService
	 * @param emailtemplateService
	 * @param typeService
	 * @param customerService
	 * @param numbersequenceruleService
	 * @param auditlogsService
	 * @param attributesService
	 * @param domaininstanceService
	 * @param cropService
	 * @param breedingcycleService
	 * @param numbersequencerulesegmentService
	 * @param userService
	 * @param delegationService
	 * @param functionalunitService
	 * @param translationService
	 * @param alertruleService
	 * @param alertService
	 * @param productfunctionService
	 * @param addressService
	 * @param reportService
	 * @param projectService
	 * @param messageService
	 * @param tenantService
	 * @param productService
	 * @param stylethemeService
	 * @param roleService
	 * @param preferenceService
	 * @param personstatusService
	 * @param personService
	 * @param organizationService
	 * @param processService
	 * @param programService
	 * @param segmentService
	 */
	@Autowired
	public QueryResolver(DomainService domainService, LanguageService languageService, InstanceService instanceService, HtmlTagService htmltagService, FormulaTypeService formulatypeService, EntityReferenceService entityreferenceService, EmailTemplateService emailtemplateService, TypeService typeService, CustomerService customerService, NumberSequenceRuleService numbersequenceruleService, AuditLogsService auditlogsService, AttributesService attributesService, DomainInstanceService domaininstanceService, CropService cropService, BreedingCycleService breedingcycleService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, UserService userService, DelegationService delegationService, FunctionalUnitService functionalunitService, TranslationService translationService, AlertRuleService alertruleService, AlertService alertService, ProductFunctionService productfunctionService, AddressService addressService, ReportService reportService, ProjectService projectService, MessageService messageService, TenantService tenantService, ProductService productService, StyleThemeService stylethemeService, RoleService roleService, PreferenceService preferenceService, PersonStatusService personstatusService, PersonService personService, OrganizationService organizationService, ProcessService processService, ProgramService programService, SegmentService segmentService){
		this.translationService = translationService; 
		this.typeService = typeService; 
		this.userService = userService; 
		this.numberSequenceRuleSegmentService = numbersequencerulesegmentService; 
		this.breedingCycleService = breedingcycleService; 
		this.cropService = cropService; 
		this.domainInstanceService = domaininstanceService; 
		this.programService = programService; 
		this.projectService = projectService; 
		this.reportService = reportService; 
		this.addressService = addressService; 
		this.productFunctionService = productfunctionService; 
		this.alertService = alertService; 
		this.alertRuleService = alertruleService; 
		this.attributesService = attributesService; 
		this.auditLogsService = auditlogsService; 
		this.domainService = domainService; 
		this.customerService = customerService; 
		this.delegationService = delegationService; 
		this.emailTemplateService = emailtemplateService; 
		this.entityReferenceService = entityreferenceService; 
		this.formulaTypeService = formulatypeService; 
		this.htmlTagService = htmltagService; 
		this.instanceService = instanceService; 
		this.languageService = languageService; 
		this.messageService = messageService; 
		this.productService = productService; 
		this.numberSequenceRuleService = numbersequenceruleService; 
		this.organizationService = organizationService; 
		this.personService = personService; 
		this.personStatusService = personstatusService; 
		this.preferenceService = preferenceService; 
		this.processService = processService; 
		this.roleService = roleService; 
		this.segmentService = segmentService; 
		this.styleThemeService = stylethemeService; 
		this.functionalUnitService = functionalunitService; 
		this.tenantService = tenantService; 
	
	}

}