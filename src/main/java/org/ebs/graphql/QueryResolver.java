///////////////////////////////////////////////////////////
//  QueryResolver.java
//  Macromedia ActionScript Implementation of the Class QueryResolver
//  Generated by Enterprise Architect
//  Created on:      20-Aug-2020 1:06:19 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql;

import org.ebs.services.PurposeService;
import org.ebs.services.to.MarkerSynonymTo;
import org.ebs.services.MarkerSynonymService;
import org.ebs.services.to.MarkerTo;
import org.ebs.services.MarkerService;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.DataFormatService;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.AssayGeneService;
import org.ebs.services.to.AssayclassTo;
import org.ebs.services.AssayclassService;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.TraitClassService;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.WorkflowStatusService;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.WorkflowStageService;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.WorkflowPhaseService;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.WorkflowNodeCFService;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.WorkflowInstanceService;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.WorkflowEventService;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.WorkflowCFValueService;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.WorkflowCFTypeService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.VendorTo;
import org.ebs.services.VendorService;
import org.ebs.services.to.UserTo;
import org.ebs.services.UserService;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.TenantService;
import org.ebs.services.to.TeamTo;
import org.ebs.services.TeamService;
import org.ebs.services.to.StyleThemeTo;
import org.ebs.services.StyleThemeService;
import org.ebs.services.to.SessionTo;
import org.ebs.services.SessionService;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.SegmentService;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.SeasonService;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.RoleActionService;
import org.ebs.services.to.RoleTo;
import org.ebs.services.RoleService;
import org.ebs.services.to.RequestTo;
import org.ebs.services.RequestService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.ProjectService;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.ProgramService;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.ProcessService;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.PreferenceService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.PersonService;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.PartnerService;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.OrganizationService;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.NumberSequenceRuleSegmentService;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.NumberSequenceRuleService;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.ModuleService;
import org.ebs.services.to.MessageTo;
import org.ebs.services.MessageService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.LanguageService;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.InstanceService;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.HtmlTagService;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.EntityReferenceService;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.EmailTemplateService;
import org.ebs.services.to.DonorTo;
import org.ebs.services.DonorService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.DelegationService;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.CustomerService;
import org.ebs.services.to.CropTo;
import org.ebs.services.CropService;
import org.ebs.services.to.CountryTo;
import org.ebs.services.CountryService;
import org.ebs.services.AlertRuleService;
import org.ebs.services.to.AlertTo;
import org.ebs.services.AlertService;
import org.ebs.services.to.AddressTo;
import org.ebs.services.AddressService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.ActionService;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.WorkflowStatusTypeService;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import org.ebs.services.to.TraitTo;
import org.ebs.services.TraitService;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.TechnologyPlatformService;
import org.ebs.services.to.ServiceTypeTo;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.ServiceProviderService;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.ServiceService;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.to.ComponentTo;
import org.ebs.services.ComponentService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.AuditLogsService;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.AttributesService;
import org.ebs.services.to.AlertRuleTo;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 20-Aug-2020 1:06:19 PM
 */
@Component @Validated
public class QueryResolver implements GraphQLQueryResolver {

	private TraitService traitService;
	private TechnologyPlatformService technologyplatformService;
	private ServiceTypeService servicetypeService;
	private ServiceProviderService serviceproviderService;
	private ServiceService serviceService;
	private PurposeService purposeService;
	private MarkerSynonymService markersynonymService;
	private MarkerService markerService;
	private DataFormatService dataformatService;
	private AssayGeneService assaygeneService;
	private AssayclassService assayclassService;
	private TraitClassService traitclassService;
	private WorkflowStatusService workflowstatusService;
	private WorkflowStageService workflowstageService;
	private WorkflowPhaseService workflowphaseService;
	private WorkflowNodeCFService workflownodecfService;
	private WorkflowNodeService workflownodeService;
	private WorkflowInstanceService workflowinstanceService;
	private WorkflowEventService workfloweventService;
	private WorkflowCFValueService workflowcfvalueService;
	private WorkflowCFTypeService workflowcftypeService;
	private WorkflowService workflowService;
	private VendorService vendorService;
	private UserService userService;
	private TranslationService translationService;
	private TenantService tenantService;
	private TeamService teamService;
	private StyleThemeService stylethemeService;
	private SessionService sessionService;
	private SegmentService segmentService;
	private SeasonService seasonService;
	private RoleActionService roleactionService;
	private RoleService roleService;
	private RequestService requestService;
	private ProjectService projectService;
	private ProgramService programService;
	private ProcessService processService;
	private PreferenceService preferenceService;
	private PersonService personService;
	private PartnerService partnerService;
	private OrganizationService organizationService;
	private NumberSequenceRuleSegmentService numbersequencerulesegmentService;
	private NumberSequenceRuleService numbersequenceruleService;
	private ModuleService moduleService;
	private MessageService messageService;
	private LanguageService languageService;
	private InstanceService instanceService;
	private HtmlTagService htmltagService;
	private EntityReferenceService entityreferenceService;
	private EmailTemplateService emailtemplateService;
	private DonorService donorService;
	private DelegationService delegationService;
	private CustomerService customerService;
	private CropService cropService;
	private CountryService countryService;
	private ComponentService componentService;
	private CollaboratorService collaboratorService;
	private AuthenticationTypeService authenticationtypeService;
	private AuditLogsService auditlogsService;
	private AttributesService attributesService;
	private AlertRuleService alertruleService;
	private AlertService alertService;
	private AddressService addressService;
	private ActionService actionService;
	private WorkflowStatusTypeService workflowstatustypeService;

	/**
	 * 
	 * @param actionId
	 */
	public Optional<ActionTo> findAction(int actionId){
		return this.actionService.findAction(actionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ActionTo> findActionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.actionService.findActions(page,sort,filters);
	}

	/**
	 * 
	 * @param addressId
	 */
	public Optional<AddressTo> findAddress(int addressId){
		return this.addressService.findAddress(addressId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AddressTo> findAddressList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.addressService.findAddresss(page,sort,filters);
	}

	/**
	 * 
	 * @param alertId
	 */
	public Optional<AlertTo> findAlert(int alertId){
		return this.alertService.findAlert(alertId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertTo> findAlertList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertService.findAlerts(page,sort,filters);
	}

	/**
	 * 
	 * @param alertruleId
	 */
	public Optional<AlertRuleTo> findAlertRule(int alertruleId){
		return this.alertruleService.findAlertRule(alertruleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AlertRuleTo> findAlertRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.alertruleService.findAlertRules(page,sort,filters);
	}

	/**
	 * 
	 * @param assayclassId
	 */
	public Optional<AssayclassTo> findAssayclass(int assayclassId){
		return this.assayclassService.findAssayclass(assayclassId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayclassTo> findAssayclassList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.assayclassService.findAssayclasss(page,sort,filters);
	}

	/**
	 * 
	 * @param assaygeneId
	 */
	public Optional<AssayGeneTo> findAssayGene(int assaygeneId){
		return this.assaygeneService.findAssayGene(assaygeneId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AssayGeneTo> findAssayGeneList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.assaygeneService.findAssayGenes(page,sort,filters);
	}

	/**
	 * 
	 * @param attributesId
	 */
	public Optional<AttributesTo> findAttributes(int attributesId){
		return this.attributesService.findAttributes(attributesId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AttributesTo> findAttributesList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.attributesService.findAttributess(page,sort,filters);
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	public Optional<AuditLogsTo> findAuditLogs(int auditlogsId){
		return this.auditlogsService.findAuditLogs(auditlogsId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuditLogsTo> findAuditLogsList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.auditlogsService.findAuditLogss(page,sort,filters);
	}

	/**
	 * 
	 * @param authenticationtypeId
	 */
	public Optional<AuthenticationTypeTo> findAuthenticationType(int authenticationtypeId){
		return this.authenticationtypeService.findAuthenticationType(authenticationtypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<AuthenticationTypeTo> findAuthenticationTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.authenticationtypeService.findAuthenticationTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param collaboratorId
	 */
	public Optional<CollaboratorTo> findCollaborator(int collaboratorId){
		return this.collaboratorService.findCollaborator(collaboratorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CollaboratorTo> findCollaboratorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.collaboratorService.findCollaborators(page,sort,filters);
	}

	/**
	 * 
	 * @param componentId
	 */
	public Optional<ComponentTo> findComponent(int componentId){
		return this.componentService.findComponent(componentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ComponentTo> findComponentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.componentService.findComponents(page,sort,filters);
	}

	/**
	 * 
	 * @param countryId
	 */
	public Optional<CountryTo> findCountry(int countryId){
		return this.countryService.findCountry(countryId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CountryTo> findCountryList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.countryService.findCountrys(page,sort,filters);
	}

	/**
	 * 
	 * @param cropId
	 */
	public Optional<CropTo> findCrop(int cropId){
		return this.cropService.findCrop(cropId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CropTo> findCropList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.cropService.findCrops(page,sort,filters);
	}

	/**
	 * 
	 * @param customerId
	 */
	public Optional<CustomerTo> findCustomer(int customerId){
		return this.customerService.findCustomer(customerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<CustomerTo> findCustomerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.customerService.findCustomers(page,sort,filters);
	}

	/**
	 * 
	 * @param dataformatId
	 */
	public Optional<DataFormatTo> findDataFormat(int dataformatId){
		return this.dataformatService.findDataFormat(dataformatId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DataFormatTo> findDataFormatList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.dataformatService.findDataFormats(page,sort,filters);
	}

	/**
	 * 
	 * @param delegationId
	 */
	public Optional<DelegationTo> findDelegation(int delegationId){
		return this.delegationService.findDelegation(delegationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DelegationTo> findDelegationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.delegationService.findDelegations(page,sort,filters);
	}

	/**
	 * 
	 * @param donorId
	 */
	public Optional<DonorTo> findDonor(int donorId){
		return this.donorService.findDonor(donorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<DonorTo> findDonorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.donorService.findDonors(page,sort,filters);
	}

	/**
	 * 
	 * @param emailtemplateId
	 */
	public Optional<EmailTemplateTo> findEmailTemplate(int emailtemplateId){
		return this.emailtemplateService.findEmailTemplate(emailtemplateId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EmailTemplateTo> findEmailTemplateList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.emailtemplateService.findEmailTemplates(page,sort,filters);
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int entityreferenceId){
		return this.entityreferenceService.findEntityReference(entityreferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<EntityReferenceTo> findEntityReferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.entityreferenceService.findEntityReferences(page,sort,filters);
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int htmltagId){
		return this.htmltagService.findHtmlTag(htmltagId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<HtmlTagTo> findHtmlTagList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.htmltagService.findHtmlTags(page,sort,filters);
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<InstanceTo> findInstance(int instanceId){
		return this.instanceService.findInstance(instanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<InstanceTo> findInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.instanceService.findInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param languageId
	 */
	public Optional<LanguageTo> findLanguage(int languageId){
		return this.languageService.findLanguage(languageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<LanguageTo> findLanguageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.languageService.findLanguages(page,sort,filters);
	}

	/**
	 * 
	 * @param markerId
	 */
	public Optional<MarkerTo> findMarker(int markerId){
		return this.markerService.findMarker(markerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerTo> findMarkerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.markerService.findMarkers(page,sort,filters);
	}

	/**
	 * 
	 * @param markersynonymId
	 */
	public Optional<MarkerSynonymTo> findMarkerSynonym(int markersynonymId){
		return this.markersynonymService.findMarkerSynonym(markersynonymId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MarkerSynonymTo> findMarkerSynonymList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.markersynonymService.findMarkerSynonyms(page,sort,filters);
	}

	/**
	 * 
	 * @param messageId
	 */
	public Optional<MessageTo> findMessage(int messageId){
		return this.messageService.findMessage(messageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<MessageTo> findMessageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.messageService.findMessages(page,sort,filters);
	}

	/**
	 * 
	 * @param moduleId
	 */
	public Optional<ModuleTo> findModule(int moduleId){
		return this.moduleService.findModule(moduleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ModuleTo> findModuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.moduleService.findModules(page,sort,filters);
	}

	/**
	 * 
	 * @param numbersequenceruleId
	 */
	public Optional<NumberSequenceRuleTo> findNumberSequenceRule(int numbersequenceruleId){
		return this.numbersequenceruleService.findNumberSequenceRule(numbersequenceruleId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleTo> findNumberSequenceRuleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numbersequenceruleService.findNumberSequenceRules(page,sort,filters);
	}

	/**
	 * 
	 * @param numbersequencerulesegmentId
	 */
	public Optional<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegment(int numbersequencerulesegmentId){
		return this.numbersequencerulesegmentService.findNumberSequenceRuleSegment(numbersequencerulesegmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.numbersequencerulesegmentService.findNumberSequenceRuleSegments(page,sort,filters);
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<OrganizationTo> findOrganization(int organizationId){
		return this.organizationService.findOrganization(organizationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<OrganizationTo> findOrganizationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.organizationService.findOrganizations(page,sort,filters);
	}

	/**
	 * 
	 * @param partnerId
	 */
	public Optional<PartnerTo> findPartner(int partnerId){
		return this.partnerService.findPartner(partnerId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PartnerTo> findPartnerList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.partnerService.findPartners(page,sort,filters);
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<PersonTo> findPerson(int personId){
		return this.personService.findPerson(personId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PersonTo> findPersonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.personService.findPersons(page,sort,filters);
	}

	/**
	 * 
	 * @param preferenceId
	 */
	public Optional<PreferenceTo> findPreference(int preferenceId){
		return this.preferenceService.findPreference(preferenceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PreferenceTo> findPreferenceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.preferenceService.findPreferences(page,sort,filters);
	}

	/**
	 * 
	 * @param processId
	 */
	public Optional<ProcessTo> findProcess(int processId){
		return this.processService.findProcess(processId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProcessTo> findProcessList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.processService.findProcesss(page,sort,filters);
	}

	/**
	 * 
	 * @param programId
	 */
	public Optional<ProgramTo> findProgram(int programId){
		return this.programService.findProgram(programId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProgramTo> findProgramList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.programService.findPrograms(page,sort,filters);
	}

	/**
	 * 
	 * @param projectId
	 */
	public Optional<ProjectTo> findProject(int projectId){
		return this.projectService.findProject(projectId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ProjectTo> findProjectList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.projectService.findProjects(page,sort,filters);
	}

	/**
	 * 
	 * @param purposeId
	 */
	public Optional<PurposeTo> findPurpose(int purposeId){
		return this.purposeService.findPurpose(purposeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<PurposeTo> findPurposeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.purposeService.findPurposes(page,sort,filters);
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<RequestTo> findRequest(int requestId){
		return this.requestService.findRequest(requestId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RequestTo> findRequestList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.requestService.findRequests(page,sort,filters);
	}

	/**
	 * 
	 * @param roleId
	 */
	public Optional<RoleTo> findRole(int roleId){
		return this.roleService.findRole(roleId);
	}

	/**
	 * 
	 * @param roleactionId
	 */
	public Optional<RoleActionTo> findRoleAction(int roleactionId){
		return this.roleactionService.findRoleAction(roleactionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleActionTo> findRoleActionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleactionService.findRoleActions(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<RoleTo> findRoleList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.roleService.findRoles(page,sort,filters);
	}

	/**
	 * 
	 * @param seasonId
	 */
	public Optional<SeasonTo> findSeason(int seasonId){
		return this.seasonService.findSeason(seasonId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SeasonTo> findSeasonList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.seasonService.findSeasons(page,sort,filters);
	}

	/**
	 * 
	 * @param segmentId
	 */
	public Optional<SegmentTo> findSegment(int segmentId){
		return this.segmentService.findSegment(segmentId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SegmentTo> findSegmentList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.segmentService.findSegments(page,sort,filters);
	}

	/**
	 * 
	 * @param serviceId
	 */
	public Optional<ServiceTo> findService(int serviceId){
		return this.serviceService.findService(serviceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTo> findServiceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.serviceService.findServices(page,sort,filters);
	}

	/**
	 * 
	 * @param serviceproviderId
	 */
	public Optional<ServiceProviderTo> findServiceProvider(int serviceproviderId){
		return this.serviceproviderService.findServiceProvider(serviceproviderId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceProviderTo> findServiceProviderList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.serviceproviderService.findServiceProviders(page,sort,filters);
	}

	/**
	 * 
	 * @param servicetypeId
	 */
	public Optional<ServiceTypeTo> findServiceType(int servicetypeId){
		return this.servicetypeService.findServiceType(servicetypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<ServiceTypeTo> findServiceTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.servicetypeService.findServiceTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param sessionId
	 */
	public Optional<SessionTo> findSession(int sessionId){
		return this.sessionService.findSession(sessionId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<SessionTo> findSessionList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.sessionService.findSessions(page,sort,filters);
	}

	/**
	 * 
	 * @param stylethemeId
	 */
	public Optional<StyleThemeTo> findStyleTheme(int stylethemeId){
		return this.stylethemeService.findStyleTheme(stylethemeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<StyleThemeTo> findStyleThemeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.stylethemeService.findStyleThemes(page,sort,filters);
	}

	/**
	 * 
	 * @param teamId
	 */
	public Optional<TeamTo> findTeam(int teamId){
		return this.teamService.findTeam(teamId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TeamTo> findTeamList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.teamService.findTeams(page,sort,filters);
	}

	/**
	 * 
	 * @param technologyplatformId
	 */
	public Optional<TechnologyPlatformTo> findTechnologyPlatform(int technologyplatformId){
		return this.technologyplatformService.findTechnologyPlatform(technologyplatformId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TechnologyPlatformTo> findTechnologyPlatformList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.technologyplatformService.findTechnologyPlatforms(page,sort,filters);
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<TenantTo> findTenant(int tenantId){
		return this.tenantService.findTenant(tenantId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TenantTo> findTenantList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.tenantService.findTenants(page,sort,filters);
	}

	/**
	 * 
	 * @param traitId
	 */
	public Optional<TraitTo> findTrait(int traitId){
		return this.traitService.findTrait(traitId);
	}

	/**
	 * 
	 * @param traitclassId
	 */
	public Optional<TraitClassTo> findTraitClass(int traitclassId){
		return this.traitclassService.findTraitClass(traitclassId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitClassTo> findTraitClassList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.traitclassService.findTraitClasss(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TraitTo> findTraitList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.traitService.findTraits(page,sort,filters);
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<TranslationTo> findTranslation(int translationId){
		return this.translationService.findTranslation(translationId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<TranslationTo> findTranslationList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.translationService.findTranslations(page,sort,filters);
	}

	/**
	 * 
	 * @param userId
	 */
	public Optional<UserTo> findUser(int userId){
		return this.userService.findUser(userId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<UserTo> findUserList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.userService.findUsers(page,sort,filters);
	}

	/**
	 * 
	 * @param vendorId
	 */
	public Optional<VendorTo> findVendor(int vendorId){
		return this.vendorService.findVendor(vendorId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<VendorTo> findVendorList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.vendorService.findVendors(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		return this.workflowService.findWorkflow(workflowId);
	}

	/**
	 * 
	 * @param workflowcftypeId
	 */
	public Optional<WorkflowCFTypeTo> findWorkflowCFType(int workflowcftypeId){
		return this.workflowcftypeService.findWorkflowCFType(workflowcftypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowCFTypeTo> findWorkflowCFTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowcftypeService.findWorkflowCFTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowcfvalueId
	 */
	public Optional<WorkflowCFValueTo> findWorkflowCFValue(int workflowcfvalueId){
		return this.workflowcfvalueService.findWorkflowCFValue(workflowcfvalueId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowCFValueTo> findWorkflowCFValueList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowcfvalueService.findWorkflowCFValues(page,sort,filters);
	}

	/**
	 * 
	 * @param workfloweventId
	 */
	public Optional<WorkflowEventTo> findWorkflowEvent(int workfloweventId){
		return this.workfloweventService.findWorkflowEvent(workfloweventId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowEventTo> findWorkflowEventList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workfloweventService.findWorkflowEvents(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowinstanceId
	 */
	public Optional<WorkflowInstanceTo> findWorkflowInstance(int workflowinstanceId){
		return this.workflowinstanceService.findWorkflowInstance(workflowinstanceId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowInstanceTo> findWorkflowInstanceList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowinstanceService.findWorkflowInstances(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowTo> findWorkflowList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowService.findWorkflows(page,sort,filters);
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflownodeId){
		return this.workflownodeService.findWorkflowNode(workflownodeId);
	}

	/**
	 * 
	 * @param workflownodecfId
	 */
	public Optional<WorkflowNodeCFTo> findWorkflowNodeCF(int workflownodecfId){
		return this.workflownodecfService.findWorkflowNodeCF(workflownodecfId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeCFTo> findWorkflowNodeCFList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflownodecfService.findWorkflowNodeCFs(page,sort,filters);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findWorkflowNodeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflownodeService.findWorkflowNodes(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowphaseId
	 */
	public Optional<WorkflowPhaseTo> findWorkflowPhase(int workflowphaseId){
		return this.workflowphaseService.findWorkflowPhase(workflowphaseId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowPhaseTo> findWorkflowPhaseList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowphaseService.findWorkflowPhases(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	public Optional<WorkflowStageTo> findWorkflowStage(int workflowstageId){
		return this.workflowstageService.findWorkflowStage(workflowstageId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStageTo> findWorkflowStageList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowstageService.findWorkflowStages(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowstatusId
	 */
	public Optional<WorkflowStatusTo> findWorkflowStatus(int workflowstatusId){
		return this.workflowstatusService.findWorkflowStatus(workflowstatusId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStatusTo> findWorkflowStatusList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowstatusService.findWorkflowStatuss(page,sort,filters);
	}

	/**
	 * 
	 * @param workflowstatustypeId
	 */
	public Optional<WorkflowStatusTypeTo> findWorkflowStatusType(int workflowstatustypeId){
		return this.workflowstatustypeService.findWorkflowStatusType(workflowstatustypeId);
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowStatusTypeTo> findWorkflowStatusTypeList(PageInput page, SortInput sort, List<FilterInput> filters){
		return this.workflowstatustypeService.findWorkflowStatusTypes(page,sort,filters);
	}

	/**
	 * 
	 * @param htmltagService
	 * @param organizationService
	 * @param cropService
	 * @param customerService
	 * @param delegationService
	 * @param donorService
	 * @param componentService
	 * @param entityreferenceService
	 * @param collaboratorService
	 * @param instanceService
	 * @param languageService
	 * @param messageService
	 * @param moduleService
	 * @param numbersequenceruleService
	 * @param dataformatService
	 * @param emailtemplateService
	 * @param actionService
	 * @param markerService
	 * @param markersynonymService
	 * @param purposeService
	 * @param serviceService
	 * @param serviceproviderService
	 * @param countryService
	 * @param workflowstatustypeService
	 * @param partnerService
	 * @param addressService
	 * @param alertService
	 * @param alertruleService
	 * @param attributesService
	 * @param auditlogsService
	 * @param authenticationtypeService
	 * @param servicetypeService
	 * @param workflowstageService
	 * @param numbersequencerulesegmentService
	 * @param workflowcfvalueService
	 * @param workfloweventService
	 * @param workflowinstanceService
	 * @param workflownodeService
	 * @param userService
	 * @param workflowphaseService
	 * @param translationService
	 * @param workflowstatusService
	 * @param traitclassService
	 * @param assayclassService
	 * @param assaygeneService
	 * @param technologyplatformService
	 * @param traitService
	 * @param workflownodecfService
	 * @param roleactionService
	 * @param personService
	 * @param preferenceService
	 * @param processService
	 * @param programService
	 * @param projectService
	 * @param workflowService
	 * @param roleService
	 * @param vendorService
	 * @param seasonService
	 * @param segmentService
	 * @param sessionService
	 * @param stylethemeService
	 * @param teamService
	 * @param tenantService
	 * @param requestService
	 * @param workflowcftypeService
	 */
	@Autowired
	public QueryResolver(HtmlTagService htmltagService, OrganizationService organizationService, CropService cropService, CustomerService customerService, DelegationService delegationService, DonorService donorService, ComponentService componentService, EntityReferenceService entityreferenceService, CollaboratorService collaboratorService, InstanceService instanceService, LanguageService languageService, MessageService messageService, ModuleService moduleService, NumberSequenceRuleService numbersequenceruleService, DataFormatService dataformatService, EmailTemplateService emailtemplateService, ActionService actionService, MarkerService markerService, MarkerSynonymService markersynonymService, PurposeService purposeService, ServiceService serviceService, ServiceProviderService serviceproviderService, CountryService countryService, WorkflowStatusTypeService workflowstatustypeService, PartnerService partnerService, AddressService addressService, AlertService alertService, AlertRuleService alertruleService, AttributesService attributesService, AuditLogsService auditlogsService, AuthenticationTypeService authenticationtypeService, ServiceTypeService servicetypeService, WorkflowStageService workflowstageService, NumberSequenceRuleSegmentService numbersequencerulesegmentService, WorkflowCFValueService workflowcfvalueService, WorkflowEventService workfloweventService, WorkflowInstanceService workflowinstanceService, WorkflowNodeService workflownodeService, UserService userService, WorkflowPhaseService workflowphaseService, TranslationService translationService, WorkflowStatusService workflowstatusService, TraitClassService traitclassService, AssayclassService assayclassService, AssayGeneService assaygeneService, TechnologyPlatformService technologyplatformService, TraitService traitService, WorkflowNodeCFService workflownodecfService, RoleActionService roleactionService, PersonService personService, PreferenceService preferenceService, ProcessService processService, ProgramService programService, ProjectService projectService, WorkflowService workflowService, RoleService roleService, VendorService vendorService, SeasonService seasonService, SegmentService segmentService, SessionService sessionService, StyleThemeService stylethemeService, TeamService teamService, TenantService tenantService, RequestService requestService, WorkflowCFTypeService workflowcftypeService){
		this.traitService = traitService; 
		this.technologyplatformService = technologyplatformService; 
		this.servicetypeService = servicetypeService; 
		this.serviceproviderService = serviceproviderService; 
		this.serviceService = serviceService; 
		this.purposeService = purposeService; 
		this.markersynonymService = markersynonymService; 
		this.markerService = markerService; 
		this.dataformatService = dataformatService; 
		this.assaygeneService = assaygeneService; 
		this.assayclassService = assayclassService; 
		this.traitclassService = traitclassService; 
		this.workflowstatusService = workflowstatusService; 
		this.workflowstageService = workflowstageService; 
		this.workflowphaseService = workflowphaseService; 
		this.workflownodecfService = workflownodecfService; 
		this.workflownodeService = workflownodeService; 
		this.workflowinstanceService = workflowinstanceService; 
		this.workfloweventService = workfloweventService; 
		this.workflowcfvalueService = workflowcfvalueService; 
		this.workflowcftypeService = workflowcftypeService; 
		this.workflowService = workflowService; 
		this.vendorService = vendorService; 
		this.userService = userService; 
		this.translationService = translationService; 
		this.tenantService = tenantService; 
		this.teamService = teamService; 
		this.stylethemeService = stylethemeService; 
		this.sessionService = sessionService; 
		this.segmentService = segmentService; 
		this.seasonService = seasonService; 
		this.roleactionService = roleactionService; 
		this.roleService = roleService; 
		this.requestService = requestService; 
		this.projectService = projectService; 
		this.programService = programService; 
		this.processService = processService; 
		this.preferenceService = preferenceService; 
		this.personService = personService; 
		this.partnerService = partnerService; 
		this.organizationService = organizationService; 
		this.numbersequencerulesegmentService = numbersequencerulesegmentService; 
		this.numbersequenceruleService = numbersequenceruleService; 
		this.moduleService = moduleService; 
		this.messageService = messageService; 
		this.languageService = languageService; 
		this.instanceService = instanceService; 
		this.htmltagService = htmltagService; 
		this.entityreferenceService = entityreferenceService; 
		this.emailtemplateService = emailtemplateService; 
		this.donorService = donorService; 
		this.delegationService = delegationService; 
		this.customerService = customerService; 
		this.cropService = cropService; 
		this.countryService = countryService; 
		this.componentService = componentService; 
		this.collaboratorService = collaboratorService; 
		this.authenticationtypeService = authenticationtypeService; 
		this.auditlogsService = auditlogsService; 
		this.attributesService = attributesService; 
		this.alertruleService = alertruleService; 
		this.alertService = alertService; 
		this.addressService = addressService; 
		this.actionService = actionService; 
		this.workflowstatustypeService = workflowstatustypeService; 
	
	}

}