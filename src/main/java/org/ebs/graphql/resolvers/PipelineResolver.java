///////////////////////////////////////////////////////////
//  PipelineResolver.java
//  Macromedia ActionScript Implementation of the Class PipelineResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:56 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.repos.BreedingZoneRepository;
import org.ebs.model.repos.PhaseRepository;
import org.ebs.model.repos.PipelineRepository;
import org.ebs.model.repos.ProjectRepository;
import org.ebs.model.repos.SchemaRepository;
import org.ebs.model.repos.SchemeRepository;
import org.ebs.services.BreedingZoneService;
import org.ebs.services.PhaseService;
import org.ebs.services.PipelineService;
import org.ebs.services.ProjectService;
import org.ebs.services.SchemaService;
import org.ebs.services.SchemeService;
import org.ebs.services.to.BreedingZoneTo;
import org.ebs.services.to.PhaseTo;
import org.ebs.services.to.PipelineTo;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.to.SchemaTo;
import org.ebs.services.to.SchemeTo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:56 PM
 */
@Component @Validated
public class PipelineResolver implements GraphQLResolver<PipelineTo> {

	private PipelineService pipelineService;
	private PipelineRepository pipelineRepository;
	@Autowired
	private ConversionService converter;
	private SchemeService schemeService;
	private SchemeRepository schemeRepository;
	private PhaseService phaseService;
	private PhaseRepository phaseRepository;
	private ProjectService projectService;
	private ProjectRepository projectRepository;
	private BreedingZoneService breedingzoneService;
	private BreedingZoneRepository breedingzoneRepository;
	private SchemaService schemaService;
	private SchemaRepository schemaRepository;

	/**
	 * 
	 * @param pipelineTo
	 */
	public Set<BreedingZoneTo> getBreedingZones(PipelineTo pipelineTo){
		return breedingzoneRepository.findByPipelineId(pipelineTo.getId()).stream() 
		 .map(e -> converter.convert(e,BreedingZoneTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pipelineTo
	 */
	public Set<PhaseTo> getPhases(PipelineTo pipelineTo){
		return phaseRepository.findByPipelineId(pipelineTo.getId()).stream() 
		 .map(e -> converter.convert(e,PhaseTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pipelineTo
	 */
	public Set<ProjectTo> getProjects(PipelineTo pipelineTo){
		return projectRepository.findByPipelineId(pipelineTo.getId()).stream() 
		 .map(e -> converter.convert(e,ProjectTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pipelineTo
	 */
	public Set<SchemaTo> getSchemas(PipelineTo pipelineTo){
		return schemaRepository.findByPipelineId(pipelineTo.getId()).stream() 
		 .map(e -> converter.convert(e,SchemaTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pipelineTo
	 */
	public Set<SchemeTo> getSchemes(PipelineTo pipelineTo){
		return schemeRepository.findByPipelineId(pipelineTo.getId()).stream() 
		 .map(e -> converter.convert(e,SchemeTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param breedingzoneService
	 * @param pipelineService
	 * @param pipelineRepository
	 * @param schemeService
	 * @param schemeRepository
	 * @param phaseService
	 * @param phaseRepository
	 * @param schemaRepository
	 * @param projectRepository
	 * @param breedingzoneRepository
	 * @param schemaService
	 * @param projectService
	 */
	@Autowired
	public PipelineResolver(BreedingZoneService breedingzoneService, PipelineService pipelineService, PipelineRepository pipelineRepository, SchemeService schemeService, SchemeRepository schemeRepository, PhaseService phaseService, PhaseRepository phaseRepository, SchemaRepository schemaRepository, ProjectRepository projectRepository, BreedingZoneRepository breedingzoneRepository, SchemaService schemaService, ProjectService projectService){
		this.pipelineService = pipelineService; 
		this.pipelineRepository = pipelineRepository; 
		this.schemeService = schemeService; 
		this.schemeRepository = schemeRepository; 
		this.phaseService = phaseService; 
		this.phaseRepository = phaseRepository; 
		this.projectService = projectService; 
		this.projectRepository = projectRepository; 
		this.breedingzoneService = breedingzoneService; 
		this.breedingzoneRepository = breedingzoneRepository; 
		this.schemaService = schemaService; 
		this.schemaRepository = schemaRepository; 
	
	}

}