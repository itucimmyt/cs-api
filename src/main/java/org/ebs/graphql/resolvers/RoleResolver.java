///////////////////////////////////////////////////////////
//  RoleResolver.java
//  Macromedia ActionScript Implementation of the Class RoleResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:09 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.RoleModel;
import org.ebs.services.to.RoleTo;
import org.ebs.model.repos.RoleRepository;
import org.ebs.services.RoleService;
import org.ebs.model.repos.RoleActionRepository;
import org.ebs.services.RoleActionService;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.UserService;
import org.ebs.model.repos.UserRepository;
import org.ebs.services.to.UserTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:09 PM
 */
@Component @Validated
public class RoleResolver implements GraphQLResolver<RoleTo> {

	private RoleService roleService;
	private RoleRepository roleRepository;
	@Autowired
	private ConversionService converter;
	private RoleActionService roleactionService;
	private RoleActionRepository roleactionRepository;
	private UserService userService;
	private UserRepository userRepository;

	/**
	 * 
	 * @param roleTo
	 */
	public Set<RoleActionTo> getRoleActions(RoleTo roleTo){
		return roleactionRepository.findByRoleId(roleTo.getId()).stream() 
		 .map(e -> converter.convert(e,RoleActionTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param userRepository
	 * @param userService
	 * @param roleactionRepository
	 * @param roleactionService
	 * @param roleRepository
	 * @param roleService
	 */
	@Autowired
	public RoleResolver(UserRepository userRepository, UserService userService, RoleActionRepository roleactionRepository, RoleActionService roleactionService, RoleRepository roleRepository, RoleService roleService){
		this.roleService = roleService; 
		this.roleRepository = roleRepository; 
		this.roleactionService = roleactionService; 
		this.roleactionRepository = roleactionRepository; 
		this.userService = userService; 
		this.userRepository = userRepository; 
	
	}

}