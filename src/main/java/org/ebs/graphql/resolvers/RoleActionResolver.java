///////////////////////////////////////////////////////////
//  RoleActionResolver.java
//  Macromedia ActionScript Implementation of the Class RoleActionResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:08 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.RoleActionModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.model.repos.PermissionRepository;
import org.ebs.model.repos.RoleActionRepository;
import org.ebs.model.repos.RoleRepository;
import org.ebs.services.ActionService;
import org.ebs.services.PermissionService;
import org.ebs.services.RoleActionService;
import org.ebs.services.RoleService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.PermissionTo;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.to.RoleTo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:08 PM
 */
@Component @Validated
public class RoleActionResolver implements GraphQLResolver<RoleActionTo> {

	private RoleActionService roleactionService;
	private RoleActionRepository roleactionRepository;
	@Autowired
	private ConversionService converter;
	private ActionService actionService;
	private ActionRepository actionRepository;
	private PermissionService permissionService;
	private PermissionRepository permissionRepository;
	private RoleService roleService;
	private RoleRepository roleRepository;

	/**
	 * 
	 * @param roleactionTo
	 */
	public ActionTo getAction(RoleActionTo roleactionTo){
		RoleActionModel roleactionModel = roleactionRepository.findById(roleactionTo.getId()).get(); 
		 return actionService.findAction(roleactionModel.getAction().getId()).get();
	}

	/**
	 * 
	 * @param roleactionTo
	 */
	public Set<PermissionTo> getPermissions(RoleActionTo roleactionTo){
		return permissionRepository.findByRoleactionId(roleactionTo.getId()).stream() 
		 .map(e -> converter.convert(e,PermissionTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param roleactionTo
	 */
	public RoleTo getRole(RoleActionTo roleactionTo){
		RoleActionModel roleactionModel = roleactionRepository.findById(roleactionTo.getId()).get(); 
		 return roleService.findRole(roleactionModel.getRole().getId()).get();
	}

	/**
	 * 
	 * @param roleRepository
	 * @param roleService
	 * @param permissionRepository
	 * @param permissionService
	 * @param actionRepository
	 * @param actionService
	 * @param roleactionRepository
	 * @param roleactionService
	 */
	@Autowired
	public RoleActionResolver(RoleRepository roleRepository, RoleService roleService, PermissionRepository permissionRepository, PermissionService permissionService, ActionRepository actionRepository, ActionService actionService, RoleActionRepository roleactionRepository, RoleActionService roleactionService){
		this.roleactionService = roleactionService; 
		this.roleactionRepository = roleactionRepository; 
		this.actionService = actionService; 
		this.actionRepository = actionRepository; 
		this.permissionService = permissionService; 
		this.permissionRepository = permissionRepository; 
		this.roleService = roleService; 
		this.roleRepository = roleRepository; 
	
	}

}