///////////////////////////////////////////////////////////
//  TenantResolver.java
//  Macromedia ActionScript Implementation of the Class TenantResolver
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 12:07:14 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.TenantModel;
import org.ebs.services.to.TenantTo;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.TenantService;
import org.ebs.model.repos.UserRepository;
import org.ebs.services.AuthenticationTypeService;
import org.ebs.model.repos.AuthenticationTypeRepository;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.CustomerService;
import org.ebs.model.repos.CustomerRepository;
import org.ebs.services.to.CustomerTo;
import org.ebs.model.repos.PearsonRepository;
import org.ebs.services.PearsonService;
import org.ebs.services.to.PearsonTo;
import org.ebs.services.UserService;
import org.ebs.services.to.UserTo;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.services.InstanceService;
import org.ebs.services.to.InstanceTo;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.services.WorkflowService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.OrganizationService;
import org.ebs.model.repos.OrganizationRepository;
import org.ebs.services.to.OrganizationTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 12:07:14 AM
 */
@Component @Validated
public class TenantResolver implements GraphQLResolver<TenantTo> {

	private TenantService tenantService;
	private TenantRepository tenantRepository;
	@Autowired
	private ConversionService converter;
	private UserService userService;
	private UserRepository userRepository;
	private InstanceService instanceService;
	private InstanceRepository instanceRepository;
	private WorkflowService workflowService;
	private WorkflowRepository workflowRepository;
	private OrganizationService organizationService;
	private OrganizationRepository organizationRepository;
	private AuthenticationTypeService authenticationtypeService;
	private AuthenticationTypeRepository authenticationtypeRepository;
	private CustomerService customerService;
	private CustomerRepository customerRepository;
	private PearsonService pearsonService;
	private PearsonRepository pearsonRepository;

	/**
	 * 
	 * @param tenantTo
	 */
	public AuthenticationTypeTo getAuthenticationType(TenantTo tenantTo){
		TenantModel tenantModel = tenantRepository.findById(tenantTo.getId()).get(); 
		 return authenticationtypeService.findAuthenticationType(tenantModel.getAuthenticationType().getId()).get();
	}

	/**
	 * 
	 * @param tenantTo
	 */
	public CustomerTo getCustomer(TenantTo tenantTo){
		TenantModel tenantModel = tenantRepository.findById(tenantTo.getId()).get(); 
		 return customerService.findCustomer(tenantModel.getCustomer().getId()).get();
	}

	/**
	 * 
	 * @param tenantTo
	 */
	public Set<InstanceTo> getInstances(TenantTo tenantTo){
		return instanceRepository.findByTenantId(tenantTo.getId()).stream() 
		 .map(e -> converter.convert(e,InstanceTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantTo
	 */
	public OrganizationTo getOrganization(TenantTo tenantTo){
		TenantModel tenantModel = tenantRepository.findById(tenantTo.getId()).get(); 
		 return organizationService.findOrganization(tenantModel.getOrganization().getId()).get();
	}

	/**
	 * 
	 * @param tenantTo
	 */
	public Set<PearsonTo> getPearsons(TenantTo tenantTo){
		return pearsonRepository.findByTenantId(tenantTo.getId()).stream() 
		 .map(e -> converter.convert(e,PearsonTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantTo
	 */
	public Set<UserTo> getUsers(TenantTo tenantTo){
		return userRepository.findByTenantId(tenantTo.getId()).stream() 
		 .map(e -> converter.convert(e,UserTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantTo
	 */
	public Set<WorkflowTo> getWorkflows(TenantTo tenantTo){
		return workflowRepository.findByTenantId(tenantTo.getId()).stream() 
		 .map(e -> converter.convert(e,WorkflowTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param customerService
	 * @param tenantRepository
	 * @param userService
	 * @param userRepository
	 * @param instanceService
	 * @param instanceRepository
	 * @param workflowService
	 * @param workflowRepository
	 * @param organizationService
	 * @param organizationRepository
	 * @param tenantService
	 * @param authenticationtypeRepository
	 * @param customerRepository
	 * @param pearsonService
	 * @param pearsonRepository
	 * @param authenticationtypeService
	 */
	@Autowired
	public TenantResolver(CustomerService customerService, TenantRepository tenantRepository, UserService userService, UserRepository userRepository, InstanceService instanceService, InstanceRepository instanceRepository, WorkflowService workflowService, WorkflowRepository workflowRepository, OrganizationService organizationService, OrganizationRepository organizationRepository, TenantService tenantService, AuthenticationTypeRepository authenticationtypeRepository, CustomerRepository customerRepository, PearsonService pearsonService, PearsonRepository pearsonRepository, AuthenticationTypeService authenticationtypeService){
		this.tenantService = tenantService; 
		this.tenantRepository = tenantRepository; 
		this.userService = userService; 
		this.userRepository = userRepository; 
		this.instanceService = instanceService; 
		this.instanceRepository = instanceRepository; 
		this.workflowService = workflowService; 
		this.workflowRepository = workflowRepository; 
		this.organizationService = organizationService; 
		this.organizationRepository = organizationRepository; 
		this.authenticationtypeService = authenticationtypeService; 
		this.authenticationtypeRepository = authenticationtypeRepository; 
		this.customerService = customerService; 
		this.customerRepository = customerRepository; 
		this.pearsonService = pearsonService; 
		this.pearsonRepository = pearsonRepository; 
	
	}

}