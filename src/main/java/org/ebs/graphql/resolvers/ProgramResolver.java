///////////////////////////////////////////////////////////
//  ProgramResolver.java
//  Macromedia ActionScript Implementation of the Class ProgramResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:01 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.CropModel;
import org.ebs.model.ProgramModel;
import org.ebs.services.to.ProgramTo;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.services.ProgramService;
import org.ebs.model.repos.ProjectRepository;
import org.ebs.services.ProjectService;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.CropService;
import org.ebs.model.repos.CropRepository;
import org.ebs.services.to.CropTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:01 PM
 */
@Component @Validated
public class ProgramResolver implements GraphQLResolver<ProgramTo> {

	private ProgramService programService;
	private ProgramRepository programRepository;
	@Autowired
	private ConversionService converter;
	private ProjectService projectService;
	private ProjectRepository projectRepository;
	private CropService cropService;
	private CropRepository cropRepository;



/**
	 * 
	 * @param customerTo
	 */
	public CropTo getCrop(ProgramTo programTo){
		ProgramModel programModel = programRepository.findById(programTo.getId()).get();
		 return cropService.findCrop(programModel.getCrop().getId()).get();
	}


	/**
	 * 
	 * @param programTo
	 */
	public Set<ProjectTo> getProjects(ProgramTo programTo){
		return projectRepository.findByProgramId(programTo.getId()).stream() 
		 .map(e -> converter.convert(e,ProjectTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param cropRepository
	 * @param cropService
	 * @param projectRepository
	 * @param projectService
	 * @param programRepository
	 * @param programService
	 */
	@Autowired
	public ProgramResolver(CropRepository cropRepository, CropService cropService, ProjectRepository projectRepository, ProjectService projectService, ProgramRepository programRepository, ProgramService programService){
		this.programService = programService; 
		this.programRepository = programRepository; 
		this.projectService = projectService; 
		this.projectRepository = projectRepository; 
		this.cropService = cropService; 
		this.cropRepository = cropRepository; 
	
	}

}