///////////////////////////////////////////////////////////
//  PearsonResolver.java
//  Macromedia ActionScript Implementation of the Class PearsonResolver
//  Generated by Enterprise Architect
//  Created on:      27-Apr-2020 9:47:48 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.PearsonModel;
import org.ebs.services.to.PearsonTo;
import org.ebs.model.repos.PearsonRepository;
import org.ebs.services.PearsonService;
import org.ebs.services.AddressService;
import org.ebs.model.repos.AddressRepository;
import org.ebs.services.to.AddressTo;
import org.ebs.services.TenantService;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.TenantTo;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.model.repos.DonorRepository;
import org.ebs.services.DonorService;
import org.ebs.services.to.DonorTo;
import org.ebs.model.repos.PartnerRepository;
import org.ebs.services.PartnerService;
import org.ebs.services.to.PartnerTo;
import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Apr-2020 9:47:48 AM
 */
@Component @Validated
public class PearsonResolver implements GraphQLResolver<PearsonTo> {

	private AddressRepository addressRepository;
	private AddressService addressService;
	private CollaboratorRepository collaboratorRepository;
	private CollaboratorService collaboratorService;
	@Autowired
	private ConversionService converter;
	private DonorRepository donorRepository;
	private DonorService donorService;
	private PartnerRepository partnerRepository;
	private PartnerService partnerService;
	private PearsonRepository pearsonRepository;
	private PearsonService pearsonService;
	private TenantRepository tenantRepository;
	private TenantService tenantService;

	/**
	 * 
	 * @param pearsonTo
	 */
	public AddressTo getAddress(PearsonTo pearsonTo){
		PearsonModel pearsonModel = pearsonRepository.findById(pearsonTo.getId()).get(); 
		 return addressService.findAddress(pearsonModel.getAddress().getId()).get();
	}

	/**
	 * 
	 * @param pearsonTo
	 */
	public Set<CollaboratorTo> getCollaborators(PearsonTo pearsonTo){
		return collaboratorRepository.findByPearsonId(pearsonTo.getId()).stream() 
		 .map(e -> converter.convert(e,CollaboratorTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pearsonTo
	 */
	public Set<DonorTo> getDonors(PearsonTo pearsonTo){
		return donorRepository.findByPearsonId(pearsonTo.getId()).stream() 
		 .map(e -> converter.convert(e,DonorTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pearsonTo
	 */
	public Set<PartnerTo> getPartners(PearsonTo pearsonTo){
		return partnerRepository.findByPearsonId(pearsonTo.getId()).stream() 
		 .map(e -> converter.convert(e,PartnerTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param pearsonTo
	 */
	public TenantTo getTenant(PearsonTo pearsonTo){
		PearsonModel pearsonModel = pearsonRepository.findById(pearsonTo.getId()).get(); 
		 return tenantService.findTenant(pearsonModel.getTenant().getId()).get();
	}

	/**
	 * 
	 * @param donorRepository
	 * @param pearsonRepository
	 * @param addressService
	 * @param addressRepository
	 * @param tenantService
	 * @param tenantRepository
	 * @param collaboratorService
	 * @param pearsonService
	 * @param donorService
	 * @param partnerService
	 * @param partnerRepository
	 * @param collaboratorRepository
	 */
	@Autowired
	public PearsonResolver(DonorRepository donorRepository, PearsonRepository pearsonRepository, AddressService addressService, AddressRepository addressRepository, TenantService tenantService, TenantRepository tenantRepository, CollaboratorService collaboratorService, PearsonService pearsonService, DonorService donorService, PartnerService partnerService, PartnerRepository partnerRepository, CollaboratorRepository collaboratorRepository){
		this.pearsonService = pearsonService; 
		this.pearsonRepository = pearsonRepository; 
		this.addressService = addressService; 
		this.addressRepository = addressRepository; 
		this.tenantService = tenantService; 
		this.tenantRepository = tenantRepository; 
		this.collaboratorService = collaboratorService; 
		this.collaboratorRepository = collaboratorRepository; 
		this.donorService = donorService; 
		this.donorRepository = donorRepository; 
		this.partnerService = partnerService; 
		this.partnerRepository = partnerRepository; 
	
	}

}