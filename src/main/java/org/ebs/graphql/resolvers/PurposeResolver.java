///////////////////////////////////////////////////////////
//  PurposeResolver.java
//  Macromedia ActionScript Implementation of the Class PurposeResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:04 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.repos.PurposeRepository;
import org.ebs.model.repos.ServiceRepository;
import org.ebs.model.repos.ServiceTypeRepository;
import org.ebs.services.PurposeService;
import org.ebs.services.ServiceService;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.to.ServiceTypeTo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:04 PM
 */
@Component @Validated
public class PurposeResolver implements GraphQLResolver<PurposeTo> {

	private PurposeService purposeService;
	private PurposeRepository purposeRepository;
	@Autowired
	private ConversionService converter;
	private ServiceTypeService servicetypeService;
	private ServiceTypeRepository servicetypeRepository;
	private ServiceService serviceService;
	private ServiceRepository serviceRepository;

	
	
	/**
	 * 
	 * @param servicetypeTo
	 */
	
	public Set<ServiceTo> getService(PurposeTo purposeTo){
		return serviceRepository.findByServicetypeId(purposeTo.getId()).stream() 
		 .map(e -> converter.convert(e,ServiceTo.class)) 
		 .collect(Collectors.toSet());
	}
	
	
	/**
	 * 
	 * @param serviceRepository
	 * @param serviceService
	 * @param servicetypeRepository
	 * @param servicetypeService
	 * @param purposeRepository
	 * @param purposeService
	 */
	@Autowired
	public PurposeResolver(ServiceRepository serviceRepository, ServiceService serviceService, ServiceTypeRepository servicetypeRepository, ServiceTypeService servicetypeService, PurposeRepository purposeRepository, PurposeService purposeService){
		this.purposeService = purposeService; 
		this.purposeRepository = purposeRepository; 
		this.servicetypeService = servicetypeService; 
		this.servicetypeRepository = servicetypeRepository; 
		this.serviceService = serviceService; 
		this.serviceRepository = serviceRepository; 
	
	}

}