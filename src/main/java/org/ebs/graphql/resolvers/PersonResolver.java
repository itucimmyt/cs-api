///////////////////////////////////////////////////////////
//  PersonResolver.java
//  Macromedia ActionScript Implementation of the Class PersonResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:53 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.PersonModel;
import org.ebs.services.to.PersonTo;
import org.ebs.model.repos.PersonRepository;
import org.ebs.services.PersonService;
import org.ebs.services.AddressService;
import org.ebs.model.repos.AddressRepository;
import org.ebs.services.to.AddressTo;
import org.ebs.services.TenantService;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.TenantTo;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.services.CollaboratorService;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.model.repos.DonorRepository;
import org.ebs.services.DonorService;
import org.ebs.services.to.DonorTo;
import org.ebs.model.repos.PartnerRepository;
import org.ebs.services.PartnerService;
import org.ebs.services.to.PartnerTo;
import org.ebs.model.repos.VendorRepository;
import org.ebs.services.VendorService;
import org.ebs.services.to.VendorTo;
import org.ebs.model.repos.ProjectRepository;
import org.ebs.services.ProjectService;
import org.ebs.services.to.ProjectTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:53 PM
 */
@Component @Validated
public class PersonResolver implements GraphQLResolver<PersonTo> {

	private PersonService personService;
	private PersonRepository personRepository;
	@Autowired
	private ConversionService converter;
	private AddressService addressService;
	private AddressRepository addressRepository;
	private TenantService tenantService;
	private TenantRepository tenantRepository;
	private CollaboratorService collaboratorService;
	private CollaboratorRepository collaboratorRepository;
	private DonorService donorService;
	private DonorRepository donorRepository;
	private PartnerService partnerService;
	private PartnerRepository partnerRepository;
	private VendorService vendorService;
	private VendorRepository vendorRepository;
	private ProjectService projectService;
	private ProjectRepository projectRepository;

	/**
	 * 
	 * @param personTo
	 */
	public AddressTo getAddress(PersonTo personTo){
		PersonModel personModel = personRepository.findById(personTo.getId()).get(); 
		 return addressService.findAddress(personModel.getAddress().getId()).get();
	}

	/**
	 * 
	 * @param personTo
	 */
	public Set<CollaboratorTo> getCollaborators(PersonTo personTo){
		return collaboratorRepository.findByPersonId(personTo.getId()).stream() 
		 .map(e -> converter.convert(e,CollaboratorTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personTo
	 */
	public Set<DonorTo> getDonors(PersonTo personTo){
		return donorRepository.findByPersonId(personTo.getId()).stream() 
		 .map(e -> converter.convert(e,DonorTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personTo
	 */
	public Set<PartnerTo> getPartners(PersonTo personTo){
		return partnerRepository.findByPersonId(personTo.getId()).stream() 
		 .map(e -> converter.convert(e,PartnerTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personTo
	 */
	public Set<ProjectTo> getProjects(PersonTo personTo){
		return projectRepository.findByPersonId(personTo.getId()).stream() 
		 .map(e -> converter.convert(e,ProjectTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personTo
	 */
	public TenantTo getTenant(PersonTo personTo){
		PersonModel personModel = personRepository.findById(personTo.getId()).get(); 
		 return tenantService.findTenant(personModel.getTenant().getId()).get();
	}

	/**
	 * 
	 * @param personTo
	 */
	public Set<VendorTo> getVendors(PersonTo personTo){
		return vendorRepository.findByPersonId(personTo.getId()).stream() 
		 .map(e -> converter.convert(e,VendorTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param vendorService
	 * @param personRepository
	 * @param addressService
	 * @param addressRepository
	 * @param tenantService
	 * @param tenantRepository
	 * @param collaboratorService
	 * @param collaboratorRepository
	 * @param donorService
	 * @param donorRepository
	 * @param personService
	 * @param partnerRepository
	 * @param vendorRepository
	 * @param projectService
	 * @param projectRepository
	 * @param partnerService
	 */
	@Autowired
	public PersonResolver(VendorService vendorService, PersonRepository personRepository, AddressService addressService, AddressRepository addressRepository, TenantService tenantService, TenantRepository tenantRepository, CollaboratorService collaboratorService, CollaboratorRepository collaboratorRepository, DonorService donorService, DonorRepository donorRepository, PersonService personService, PartnerRepository partnerRepository, VendorRepository vendorRepository, ProjectService projectService, ProjectRepository projectRepository, PartnerService partnerService){
		this.personService = personService; 
		this.personRepository = personRepository; 
		this.addressService = addressService; 
		this.addressRepository = addressRepository; 
		this.tenantService = tenantService; 
		this.tenantRepository = tenantRepository; 
		this.collaboratorService = collaboratorService; 
		this.collaboratorRepository = collaboratorRepository; 
		this.donorService = donorService; 
		this.donorRepository = donorRepository; 
		this.partnerService = partnerService; 
		this.partnerRepository = partnerRepository; 
		this.vendorService = vendorService; 
		this.vendorRepository = vendorRepository; 
		this.projectService = projectService; 
		this.projectRepository = projectRepository; 
	
	}

}