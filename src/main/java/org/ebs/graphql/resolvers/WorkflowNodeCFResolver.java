///////////////////////////////////////////////////////////
//  WorkflowNodeCFResolver.java
//  Macromedia ActionScript Implementation of the Class WorkflowNodeCFResolver
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:40 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.Set;
import org.ebs.services.WorkflowNodeCFService;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.WorkflowNodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:40 AM
 */
@Component @Validated
public class WorkflowNodeCFResolver implements GraphQLResolver<WorkflowNodeCFTo> {

	private WorkflowNodeCFService workflowNodeCFService;

	/**
	 * 
	 * @param workflowNodeCFTo
	 */
	public EntityReferenceTo getEntityReference(WorkflowNodeCFTo workflowNodeCFTo){
		return workflowNodeCFService.findEntityReference(workflowNodeCFTo.getId()).get();
	}

	/**
	 * 
	 * @param workflowNodeCFTo
	 */
	public HtmlTagTo getHtmlTag(WorkflowNodeCFTo workflowNodeCFTo){
		return workflowNodeCFService.findHtmlTag(workflowNodeCFTo.getId()).get();
	}

	/**
	 * 
	 * @param workflowNodeCFTo
	 */
	public WorkflowCFTypeTo getWorkflowCFType(WorkflowNodeCFTo workflowNodeCFTo){
		return workflowNodeCFService.findWorkflowCFType(workflowNodeCFTo.getId()).get();
	}

	/**
	 * 
	 * @param workflowNodeCF
	 */
	public Set<WorkflowCFValueTo> getWorkflowCFValues(WorkflowNodeCFTo workflowNodeCF){
		return workflowNodeCFService.findWorkflowCFValues(workflowNodeCF.getId());
	}

	/**
	 * 
	 * @param workflowNodeCFTo
	 */
	public WorkflowNodeTo getWorkflowNode(WorkflowNodeCFTo workflowNodeCFTo){
		return workflowNodeCFService.findWorkflowNode(workflowNodeCFTo.getId()).get();
	}

	/**
	 * 
	 * @param workflownodecfService
	 */
	@Autowired
	public WorkflowNodeCFResolver(WorkflowNodeCFService workflownodecfService){
		this.workflowNodeCFService = workflownodecfService; 
	
	}

}