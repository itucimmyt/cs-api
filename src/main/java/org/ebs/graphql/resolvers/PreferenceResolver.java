///////////////////////////////////////////////////////////
//  PreferenceResolver.java
//  Macromedia ActionScript Implementation of the Class PreferenceResolver
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 11:58:24 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.PreferenceModel;
import org.ebs.services.to.PreferenceTo;
import org.ebs.model.repos.PreferenceRepository;
import org.ebs.services.PreferenceService;
import org.ebs.services.UserService;
import org.ebs.model.repos.UserRepository;
import org.ebs.services.to.UserTo;
import org.ebs.services.AlertService;
import org.ebs.model.repos.AlertRepository;
import org.ebs.services.to.AlertTo;
import org.ebs.services.ThemeStyleService;
import org.ebs.model.repos.ThemeStyleRepository;
import org.ebs.services.to.ThemeStyleTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 11:58:24 PM
 */
@Component @Validated
public class PreferenceResolver implements GraphQLResolver<PreferenceTo> {

	private PreferenceService preferenceService;
	private PreferenceRepository preferenceRepository;
	@Autowired
	private ConversionService converter;
	private UserService userService;
	private UserRepository userRepository;
	private AlertService alertService;
	private AlertRepository alertRepository;
	private ThemeStyleService themestyleService;
	private ThemeStyleRepository themestyleRepository;

	/**
	 * 
	 * @param preferenceTo
	 */
	public AlertTo getAlert(PreferenceTo preferenceTo){
		PreferenceModel preferenceModel = preferenceRepository.findById(preferenceTo.getId()).get(); 
		 return alertService.findAlert(preferenceModel.getAlert().getId()).get();
	}

	/**
	 * 
	 * @param preferenceTo
	 */
	public ThemeStyleTo getThemeStyle(PreferenceTo preferenceTo){
		PreferenceModel preferenceModel = preferenceRepository.findById(preferenceTo.getId()).get(); 
		 return themestyleService.findThemeStyle(preferenceModel.getThemeStyle().getId()).get();
	}

	/**
	 * 
	 * @param preferenceTo
	 */
	public UserTo getUser(PreferenceTo preferenceTo){
		PreferenceModel preferenceModel = preferenceRepository.findById(preferenceTo.getId()).get(); 
		 return userService.findUser(preferenceModel.getUser().getId()).get();
	}

	/**
	 * 
	 * @param themestyleRepository
	 * @param themestyleService
	 * @param alertRepository
	 * @param alertService
	 * @param userRepository
	 * @param userService
	 * @param preferenceRepository
	 * @param preferenceService
	 */
	@Autowired
	public PreferenceResolver(ThemeStyleRepository themestyleRepository, ThemeStyleService themestyleService, AlertRepository alertRepository, AlertService alertService, UserRepository userRepository, UserService userService, PreferenceRepository preferenceRepository, PreferenceService preferenceService){
		this.preferenceService = preferenceService; 
		this.preferenceRepository = preferenceRepository; 
		this.userService = userService; 
		this.userRepository = userRepository; 
		this.alertService = alertService; 
		this.alertRepository = alertRepository; 
		this.themestyleService = themestyleService; 
		this.themestyleRepository = themestyleRepository; 
	
	}

}