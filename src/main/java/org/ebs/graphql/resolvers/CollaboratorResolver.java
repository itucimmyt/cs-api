///////////////////////////////////////////////////////////
//  CollaboratorResolver.java
//  Macromedia ActionScript Implementation of the Class CollaboratorResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:24 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.CollaboratorModel;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.services.CollaboratorService;
import org.ebs.services.PersonService;
import org.ebs.model.repos.PersonRepository;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:24 PM
 */
@Component @Validated
public class CollaboratorResolver implements GraphQLResolver<CollaboratorTo> {

	private CollaboratorService collaboratorService;
	private CollaboratorRepository collaboratorRepository;
	@Autowired
	private ConversionService converter;
	private PersonService personService;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param personRepository
	 * @param personService
	 * @param collaboratorRepository
	 * @param collaboratorService
	 */
	@Autowired
	public CollaboratorResolver(PersonRepository personRepository, PersonService personService, CollaboratorRepository collaboratorRepository, CollaboratorService collaboratorService){
		this.collaboratorService = collaboratorService; 
		this.collaboratorRepository = collaboratorRepository; 
		this.personService = personService; 
		this.personRepository = personRepository; 
	
	}

	/**
	 * 
	 * @param collaboratorTo
	 */
	public PersonTo getPerson(CollaboratorTo collaboratorTo){
		CollaboratorModel collaboratorModel = collaboratorRepository.findById(collaboratorTo.getId()).get(); 
		 return personService.findPerson(collaboratorModel.getPerson().getId()).get();
	}

}