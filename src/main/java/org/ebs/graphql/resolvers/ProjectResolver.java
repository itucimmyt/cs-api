///////////////////////////////////////////////////////////
//  ProjectResolver.java
//  Macromedia ActionScript Implementation of the Class ProjectResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:03 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import org.ebs.model.ProjectModel;
import org.ebs.model.repos.PersonRepository;
import org.ebs.model.repos.PipelineRepository;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.model.repos.ProjectRepository;
import org.ebs.services.PersonService;
import org.ebs.services.PipelineService;
import org.ebs.services.ProgramService;
import org.ebs.services.ProjectService;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.PipelineTo;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.ProjectTo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:03 PM
 */
@Component @Validated
public class ProjectResolver implements GraphQLResolver<ProjectTo> {

	private ProjectService projectService;
	private ProjectRepository projectRepository;
	@Autowired
	private ConversionService converter;
	private ProgramService programService;
	private ProgramRepository programRepository;
	private PipelineService pipelineService;
	private PipelineRepository pipelineRepository;
	private PersonService personService;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param projectTo
	 */
	public PersonTo getPerson(ProjectTo projectTo){
		ProjectModel projectModel = projectRepository.findById(projectTo.getId()).get(); 
		 return personService.findPerson(projectModel.getPerson().getId()).get();
	}

	/**
	 * 
	 * @param projectTo
	 */
	public PipelineTo getPipeline(ProjectTo projectTo){
		ProjectModel projectModel = projectRepository.findById(projectTo.getId()).get(); 
		 return pipelineService.findPipeline(projectModel.getPipeline().getId()).get();
	}

	/**
	 * 
	 * @param projectTo
	 */
	public ProgramTo getProgram(ProjectTo projectTo){
		ProjectModel projectModel = projectRepository.findById(projectTo.getId()).get(); 
		 return programService.findProgram(projectModel.getProgram().getId()).get();
	}

	/**
	 * 
	 * @param personRepository
	 * @param personService
	 * @param pipelineRepository
	 * @param pipelineService
	 * @param programRepository
	 * @param programService
	 * @param projectRepository
	 * @param projectService
	 */
	@Autowired
	public ProjectResolver(PersonRepository personRepository, PersonService personService, PipelineRepository pipelineRepository, PipelineService pipelineService, ProgramRepository programRepository, ProgramService programService, ProjectRepository projectRepository, ProjectService projectService){
		this.projectService = projectService; 
		this.projectRepository = projectRepository; 
		this.programService = programService; 
		this.programRepository = programRepository; 
		this.pipelineService = pipelineService; 
		this.pipelineRepository = pipelineRepository; 
		this.personService = personService; 
		this.personRepository = personRepository; 
	
	}

}