///////////////////////////////////////////////////////////
//  WorkflowResolver.java
//  Macromedia ActionScript Implementation of the Class WorkflowResolver
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 11:58:34 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.WorkflowModel;
import org.ebs.services.to.WorkflowTo;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.services.WorkflowService;
import org.ebs.services.TenantService;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.TenantTo;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.services.WorkflowNodeService;
import org.ebs.services.to.WorkflowNodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 11:58:34 PM
 */
@Component @Validated
public class WorkflowResolver implements GraphQLResolver<WorkflowTo> {

	private WorkflowService workflowService;
	private WorkflowRepository workflowRepository;
	@Autowired
	private ConversionService converter;
	private TenantService tenantService;
	private TenantRepository tenantRepository;
	private WorkflowNodeService workflownodeService;
	private WorkflowNodeRepository workflownodeRepository;

	/**
	 * 
	 * @param workflowTo
	 */
	public TenantTo getTenant(WorkflowTo workflowTo){
		WorkflowModel workflowModel = workflowRepository.findById(workflowTo.getId()).get(); 
		 return tenantService.findTenant(workflowModel.getTenant().getId()).get();
	}

	/**
	 * 
	 * @param workflowTo
	 */
	public WorkflowNodeTo getWorkflowNode(WorkflowTo workflowTo){
		WorkflowModel workflowModel = workflowRepository.findById(workflowTo.getId()).get(); 
		 return workflownodeService.findWorkflowNode(workflowModel.getWorkflowNode().getId()).get();
	}

	/**
	 * 
	 * @param workflowTo
	 */
	public Set<WorkflowNodeTo> getWorkflowNodes(WorkflowTo workflowTo){
		return workflownodeRepository.findByWorkflowId(workflowTo.getId()).stream() 
		 .map(e -> converter.convert(e,WorkflowNodeTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflownodeRepository
	 * @param workflownodeService
	 * @param tenantRepository
	 * @param tenantService
	 * @param workflowRepository
	 * @param workflowService
	 */
	@Autowired
	public WorkflowResolver(WorkflowNodeRepository workflownodeRepository, WorkflowNodeService workflownodeService, TenantRepository tenantRepository, TenantService tenantService, WorkflowRepository workflowRepository, WorkflowService workflowService){
		this.workflowService = workflowService; 
		this.workflowRepository = workflowRepository; 
		this.tenantService = tenantService; 
		this.tenantRepository = tenantRepository; 
		this.workflownodeService = workflownodeService; 
		this.workflownodeRepository = workflownodeRepository; 
		this.workflownodeService = workflownodeService; 
		this.workflownodeRepository = workflownodeRepository; 
	
	}

}