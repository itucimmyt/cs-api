///////////////////////////////////////////////////////////
//  UserResolver.java
//  Macromedia ActionScript Implementation of the Class UserResolver
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:20:05 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.ebs.services.to.UserTo;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.Set;
import org.ebs.services.UserService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.PreferenceTo;
import org.ebs.services.to.FunctionalUnitTo;
import org.ebs.services.to.RoleTo;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:20:05 AM
 */
@Component @Validated
public class UserResolver implements GraphQLResolver<UserTo> {

	private UserService userService;

	/**
	 * 
	 * @param user
	 */
	public Set<DelegationTo> getDelegations(UserTo user){
		return userService.findDelegations(user.getId());
	}

	/**
	 * 
	 * @param userTo
	 */
	public Set<FunctionalUnitTo> getFunctionalunits(UserTo userTo){
		return userService.findFunctionalUnits(userTo.getId());
	}

	/**
	 * 
	 * @param userTo
	 */
	public PersonTo getPerson(UserTo userTo){
		return userService.findPerson(userTo.getId()).get();
	}

	/**
	 * 
	 * @param user
	 */
	public Set<PreferenceTo> getPreferences(UserTo user){
		return userService.findPreferences(user.getId());
	}

	/**
	 * 
	 * @param user
	 */
	public Set<ProgramTo> getPrograms(UserTo user){
		return userService.findPrograms(user.getId());
	}

	/**
	 * 
	 * @param userTo
	 */
	public Set<RoleTo> getRoles(UserTo userTo){
		return userService.findRoles(userTo.getId());
	}

	/**
	 * 
	 * @param userTo
	 */
	public Set<TenantTo> getTenants(UserTo userTo){
		return userService.findTenants(userTo.getId());
	}

	/**
	 * 
	 * @param userService
	 */
	@Autowired
	public UserResolver(UserService userService){
		this.userService = userService; 
	
	}

}