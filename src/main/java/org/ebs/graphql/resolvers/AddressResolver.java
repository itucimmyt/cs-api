///////////////////////////////////////////////////////////
//  AddressResolver.java
//  Macromedia ActionScript Implementation of the Class AddressResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:11 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.AddressModel;
import org.ebs.services.to.AddressTo;
import org.ebs.model.repos.AddressRepository;
import org.ebs.services.AddressService;
import org.ebs.model.repos.PersonRepository;
import org.ebs.services.PersonService;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:11 PM
 */
@Component @Validated
public class AddressResolver implements GraphQLResolver<AddressTo> {

	private AddressService addressService;
	private AddressRepository addressRepository;
	@Autowired
	private ConversionService converter;
	private PersonService personService;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param personRepository
	 * @param personService
	 * @param addressRepository
	 * @param addressService
	 */
	@Autowired
	public AddressResolver(PersonRepository personRepository, PersonService personService, AddressRepository addressRepository, AddressService addressService){
		this.addressService = addressService; 
		this.addressRepository = addressRepository; 
		this.personService = personService; 
		this.personRepository = personRepository; 
	
	}

	/**
	 * 
	 * @param addressTo
	 */
	public Set<PersonTo> getPersons(AddressTo addressTo){
		return personRepository.findByAddressId(addressTo.getId()).stream() 
		 .map(e -> converter.convert(e,PersonTo.class)) 
		 .collect(Collectors.toSet());
	}

}