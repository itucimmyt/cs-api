///////////////////////////////////////////////////////////
//  VendorResolver.java
//  Macromedia ActionScript Implementation of the Class VendorResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:34 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.VendorModel;
import org.ebs.services.to.VendorTo;
import org.ebs.model.repos.VendorRepository;
import org.ebs.services.VendorService;
import org.ebs.model.repos.TechnologyPlatformRepository;
import org.ebs.services.TechnologyPlatformService;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.model.repos.MarkerRepository;
import org.ebs.services.MarkerService;
import org.ebs.services.to.MarkerTo;
import org.ebs.services.CountryService;
import org.ebs.model.repos.CountryRepository;
import org.ebs.services.to.CountryTo;
import org.ebs.services.DataFormatService;
import org.ebs.model.repos.DataFormatRepository;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.ServiceService;
import org.ebs.model.repos.ServiceRepository;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.PersonService;
import org.ebs.model.repos.PersonRepository;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:34 PM
 */
@Component @Validated
public class VendorResolver implements GraphQLResolver<VendorTo> {

	private VendorService vendorService;
	private VendorRepository vendorRepository;
	@Autowired
	private ConversionService converter;
	private TechnologyPlatformService technologyplatformService;
	private TechnologyPlatformRepository technologyplatformRepository;
	private MarkerService markerService;
	private MarkerRepository markerRepository;
	private CountryService countryService;
	private CountryRepository countryRepository;
	private DataFormatService dataformatService;
	private DataFormatRepository dataformatRepository;
	private ServiceService serviceService;
	private ServiceRepository serviceRepository;
	private PersonService personService;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param vendorTo
	 */
	public CountryTo getCountry(VendorTo vendorTo){
		VendorModel vendorModel = vendorRepository.findById(vendorTo.getId()).get(); 
		 return countryService.findCountry(vendorModel.getCountry().getId()).get();
	}

	/**
	 * 
	 * @param vendorTo
	 */
	public DataFormatTo getDataFormat(VendorTo vendorTo){
		VendorModel vendorModel = vendorRepository.findById(vendorTo.getId()).get(); 
		 return dataformatService.findDataFormat(vendorModel.getDataFormat().getId()).get();
	}

	/**
	 * 
	 * @param vendorTo
	 */
	public PersonTo getPerson(VendorTo vendorTo){
		VendorModel vendorModel = vendorRepository.findById(vendorTo.getId()).get(); 
		 return personService.findPerson(vendorModel.getPerson().getId()).get();
	}

	/**
	 * 
	 * @param dataformatRepository
	 * @param vendorRepository
	 * @param technologyplatformService
	 * @param technologyplatformRepository
	 * @param markerService
	 * @param markerRepository
	 * @param countryService
	 * @param vendorService
	 * @param dataformatService
	 * @param serviceService
	 * @param serviceRepository
	 * @param personService
	 * @param personRepository
	 * @param countryRepository
	 */
	@Autowired
	public VendorResolver(DataFormatRepository dataformatRepository, VendorRepository vendorRepository, TechnologyPlatformService technologyplatformService, TechnologyPlatformRepository technologyplatformRepository, MarkerService markerService, MarkerRepository markerRepository, CountryService countryService, VendorService vendorService, DataFormatService dataformatService, ServiceService serviceService, ServiceRepository serviceRepository, PersonService personService, PersonRepository personRepository, CountryRepository countryRepository){
		this.vendorService = vendorService; 
		this.vendorRepository = vendorRepository; 
		this.technologyplatformService = technologyplatformService; 
		this.technologyplatformRepository = technologyplatformRepository; 
		this.markerService = markerService; 
		this.markerRepository = markerRepository; 
		this.countryService = countryService; 
		this.countryRepository = countryRepository; 
		this.dataformatService = dataformatService; 
		this.dataformatRepository = dataformatRepository; 
		this.serviceService = serviceService; 
		this.serviceRepository = serviceRepository; 
		this.personService = personService; 
		this.personRepository = personRepository; 
	
	}

}