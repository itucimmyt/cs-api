///////////////////////////////////////////////////////////
//  DataFormatResolver.java
//  Macromedia ActionScript Implementation of the Class DataFormatResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:31 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.repos.DataFormatRepository;
import org.ebs.model.repos.VendorRepository;
import org.ebs.services.DataFormatService;
import org.ebs.services.VendorService;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.to.VendorTo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:31 PM
 */
@Component @Validated
public class DataFormatResolver implements GraphQLResolver<DataFormatTo> {

	private DataFormatService dataformatService;
	private DataFormatRepository dataformatRepository;
	@Autowired
	private ConversionService converter;
	private VendorService vendorService;
	private VendorRepository vendorRepository;

	/**
	 * 
	 * @param vendorRepository
	 * @param vendorService
	 * @param dataformatRepository
	 * @param dataformatService
	 */
	@Autowired
	public DataFormatResolver(VendorRepository vendorRepository, VendorService vendorService, DataFormatRepository dataformatRepository, DataFormatService dataformatService){
		this.dataformatService = dataformatService; 
		this.dataformatRepository = dataformatRepository; 
		this.vendorService = vendorService; 
		this.vendorRepository = vendorRepository; 
	
	}

	/**
	 * 
	 * @param dataformatTo
	 */
	public Set<VendorTo> getVendors(DataFormatTo dataformatTo){
		return vendorRepository.findByDataformatId(dataformatTo.getId()).stream() 
		 .map(e -> converter.convert(e,VendorTo.class)) 
		 .collect(Collectors.toSet());
	}

}