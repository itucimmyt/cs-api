///////////////////////////////////////////////////////////
//  ModuleResolver.java
//  Macromedia ActionScript Implementation of the Class ModuleResolver
//  Generated by Enterprise Architect
//  Created on:      27-Apr-2020 9:47:44 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import com.coxautodev.graphql.tools.GraphQLResolver;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.ModuleModel;
import org.ebs.services.to.ModuleTo;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.services.ModuleService;
import org.ebs.services.WorkflowNodeService;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.model.repos.ActionRepository;
import org.ebs.services.ActionService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.ComponentService;
import org.ebs.model.repos.ComponentRepository;
import org.ebs.services.to.ComponentTo;
import org.ebs.model.repos.TranslationRepository;
import org.ebs.services.TranslationService;
import org.ebs.services.to.TranslationTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Apr-2020 9:47:44 AM
 */
@Component @Validated
public class ModuleResolver implements GraphQLResolver<ModuleTo> {

	private ActionRepository actionRepository;
	private ActionService actionService;
	private ComponentRepository componentRepository;
	private ComponentService componentService;
	@Autowired
	private ConversionService converter;
	private ModuleRepository moduleRepository;
	private ModuleService moduleService;
	private TranslationRepository translationRepository;
	private TranslationService translationService;
	private WorkflowNodeRepository workflownodeRepository;
	private WorkflowNodeService workflownodeService;

	/**
	 * 
	 * @param moduleTo
	 */
	public Set<ActionTo> getActions(ModuleTo moduleTo){
		return actionRepository.findByModuleId(moduleTo.getId()).stream() 
		 .map(e -> converter.convert(e,ActionTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param moduleTo
	 */
	public ComponentTo getComponent(ModuleTo moduleTo){
		ModuleModel moduleModel = moduleRepository.findById(moduleTo.getId()).get(); 
		 return componentService.findComponent(moduleModel.getComponent().getId()).get();
	}

	/**
	 * 
	 * @param moduleTo
	 */
	public Set<TranslationTo> getTranslations(ModuleTo moduleTo){
		return translationRepository.findByModuleId(moduleTo.getId()).stream() 
		 .map(e -> converter.convert(e,TranslationTo.class)) 
		 .collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param moduleTo
	 */
	public WorkflowNodeTo getWorkflowNode(ModuleTo moduleTo){
		ModuleModel moduleModel = moduleRepository.findById(moduleTo.getId()).get(); 
		 return workflownodeService.findWorkflowNode(moduleModel.getWorkflowNode().getId()).get();
	}

	/**
	 * 
	 * @param translationRepository
	 * @param translationService
	 * @param componentRepository
	 * @param componentService
	 * @param actionRepository
	 * @param actionService
	 * @param workflownodeRepository
	 * @param workflownodeService
	 * @param moduleRepository
	 * @param moduleService
	 */
	@Autowired
	public ModuleResolver(TranslationRepository translationRepository, TranslationService translationService, ComponentRepository componentRepository, ComponentService componentService, ActionRepository actionRepository, ActionService actionService, WorkflowNodeRepository workflownodeRepository, WorkflowNodeService workflownodeService, ModuleRepository moduleRepository, ModuleService moduleService){
		this.moduleService = moduleService; 
		this.moduleRepository = moduleRepository; 
		this.workflownodeService = workflownodeService; 
		this.workflownodeRepository = workflownodeRepository; 
		this.actionService = actionService; 
		this.actionRepository = actionRepository; 
		this.componentService = componentService; 
		this.componentRepository = componentRepository; 
		this.translationService = translationService; 
		this.translationRepository = translationRepository; 
	
	}

}