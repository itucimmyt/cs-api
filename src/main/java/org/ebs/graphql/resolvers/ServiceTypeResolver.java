///////////////////////////////////////////////////////////
//  ServiceTypeResolver.java
//  Macromedia ActionScript Implementation of the Class ServiceTypeResolver
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:18 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.graphql.resolvers;

import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.ServiceTypeModel;
import org.ebs.model.repos.CropRepository;
import org.ebs.model.repos.PurposeRepository;
import org.ebs.model.repos.ServiceProviderRepository;
import org.ebs.model.repos.ServiceRepository;
import org.ebs.model.repos.ServiceTypeRepository;
import org.ebs.services.CropService;
import org.ebs.services.PurposeService;
import org.ebs.services.ServiceProviderService;
import org.ebs.services.ServiceService;
import org.ebs.services.ServiceTypeService;
import org.ebs.services.to.CropTo;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.to.ServiceTypeTo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import com.coxautodev.graphql.tools.GraphQLResolver;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:18 PM
 */
@Component @Validated
public class ServiceTypeResolver implements GraphQLResolver<ServiceTypeTo> {

	private ServiceTypeService servicetypeService;
	private ServiceTypeRepository servicetypeRepository;
	@Autowired
	private ConversionService converter;
	private ServiceProviderService serviceproviderService;
	private ServiceProviderRepository serviceproviderRepository;
	private PurposeService purposeService;
	private PurposeRepository purposeRepository;
	private CropService cropService;
	private CropRepository cropRepository;
	private ServiceService serviceService;
	private ServiceRepository serviceRepository;

	
	/**
	 * 
	 * @param servicetypeTo
	 */
	/*
	public ServiceProviderTo getServiceProvider(ServiceTypeTo servicetypeTo){
		ServiceTypeModel servicetypeModel = servicetypeRepository.findById(servicetypeTo.getId()).get(); 
		 return serviceproviderService.findServiceProvider(servicetypeModel.getServiceProvider().getId()).get();
	}*/

	public Set<PurposeTo> getPurposes(ServiceTypeTo servicetypeTo) {
		return purposeRepository.findByServicetypeId(servicetypeTo.getId()).stream().
				map( e -> converter.convert(e, PurposeTo.class))
				.collect(Collectors.toSet());
	}
	


	/**
	 * 
	 * @param serviceRepository
	 * @param serviceService
	 * @param cropRepository
	 * @param cropService
	 * @param purposeRepository
	 * @param purposeService
	 * @param serviceproviderRepository
	 * @param serviceproviderService
	 * @param servicetypeRepository
	 * @param servicetypeService
	 */
	@Autowired
	public ServiceTypeResolver(ServiceRepository serviceRepository, ServiceService serviceService, CropRepository cropRepository, CropService cropService, PurposeRepository purposeRepository, PurposeService purposeService, ServiceProviderRepository serviceproviderRepository, ServiceProviderService serviceproviderService, ServiceTypeRepository servicetypeRepository, ServiceTypeService servicetypeService){
		this.servicetypeService = servicetypeService; 
		this.servicetypeRepository = servicetypeRepository; 
		this.serviceproviderService = serviceproviderService; 
		this.serviceproviderRepository = serviceproviderRepository; 
		this.purposeService = purposeService; 
		this.purposeRepository = purposeRepository; 
		this.cropService = cropService; 
		this.cropRepository = cropRepository; 
		this.serviceService = serviceService; 
		this.serviceRepository = serviceRepository; 
	
	}

}