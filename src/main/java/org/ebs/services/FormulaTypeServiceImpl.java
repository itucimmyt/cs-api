///////////////////////////////////////////////////////////
//  FormulaTypeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class FormulaTypeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:19:49 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.FormulaTypeRepository;
import org.ebs.model.repos.SegmentRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.FormulaTypeTo;
import org.ebs.services.to.Input.FormulaTypeInput;
import org.ebs.model.FormulaTypeModel;
import org.ebs.services.to.SegmentTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:19:49 AM
 */
@Service @Transactional(readOnly = true)
  class FormulaTypeServiceImpl implements FormulaTypeService {

	private FormulaTypeRepository formulatypeRepository;
	private ConversionService converter;
	private SegmentRepository segmentRepository;

	/**
	 * 
	 * @param FormulaType
	 */
	@Override @Transactional(readOnly = false)
	public FormulaTypeTo createFormulaType(FormulaTypeInput FormulaType){
		FormulaTypeModel model = converter.convert(FormulaType,FormulaTypeModel.class); 
		 model.setId(0);
		  
		 model= formulatypeRepository.save(model); 
		 return converter.convert(model, FormulaTypeTo.class); 
	}

	/**
	 * 
	 * @param formulaTypeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteFormulaType(int formulaTypeId){
		FormulaTypeModel formulatype = formulatypeRepository.findById(formulaTypeId).orElseThrow(() -> new RuntimeException("FormulaType not found")); 
		 formulatype.setDeleted(true); 
		  formulatypeRepository.save(formulatype); 
		 return formulaTypeId;
	}

	/**
	 * 
	 * @param formulaTypeId
	 */
	@Override
	public Optional<FormulaTypeTo> findFormulaType(int formulaTypeId){
		if(formulaTypeId <1) 
		 {return Optional.empty();} 
		 return formulatypeRepository.findById(formulaTypeId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,FormulaTypeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<FormulaTypeTo> findFormulaTypes(PageInput page, SortInput sort, List<FilterInput> filters){
		return formulatypeRepository.findByCriteria(FormulaTypeModel.class,filters,sort,page).map(r -> converter.convert(r,FormulaTypeTo.class));
	}

	/**
	 * 
	 * @param formulatypeId
	 */
	public Set<SegmentTo> findSegments(int formulatypeId){
		return segmentRepository.findByFormulatypeId(formulatypeId).stream().map(e -> converter.convert(e,SegmentTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param segmentRepository
	 * @param converter
	 * @param formulatypeRepository
	 */
	@Autowired
	public FormulaTypeServiceImpl(SegmentRepository segmentRepository, ConversionService converter, FormulaTypeRepository formulatypeRepository){
		this.formulatypeRepository =formulatypeRepository; 
		 this.converter = converter;
		 this.segmentRepository = segmentRepository;
	}

	/**
	 * 
	 * @param formulaType
	 */
	@Override @Transactional(readOnly = false)
	public FormulaTypeTo modifyFormulaType(FormulaTypeInput formulaType){
		FormulaTypeModel target= formulatypeRepository.findById(formulaType.getId()).orElseThrow(() -> new RuntimeException("FormulaType not found")); 
		 FormulaTypeModel source= converter.convert(formulaType,FormulaTypeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(formulatypeRepository.save(target), FormulaTypeTo.class);
	}

}