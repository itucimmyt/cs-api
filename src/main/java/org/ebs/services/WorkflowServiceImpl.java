///////////////////////////////////////////////////////////
//  WorkflowServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:47 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.EntityReferenceModel;
import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.WorkflowPhaseRepository;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.WorkflowInstanceRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.Input.WorkflowInput;
import org.ebs.model.WorkflowModel;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.WorkflowInstanceTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:47 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowServiceImpl implements WorkflowService {

	private WorkflowRepository workflowRepository;
	private ConversionService converter;
	private EntityReferenceRepository entityreferenceRepository;
	private TenantRepository tenantRepository;
	public WorkflowPhaseRepository workflowPhaseRepository;
	public EntityReferenceRepository entityReferenceRepository;
	public HtmlTagRepository htmlTagRepository;
	public WorkflowInstanceRepository workflowInstanceRepository;
	public WorkflowNodeRepository workflowNodeRepository;

	/**
	 * 
	 * @param Workflow
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowTo createWorkflow(WorkflowInput Workflow){
		WorkflowModel model = converter.convert(Workflow,WorkflowModel.class); 
		 model.setId(0);
		 EntityReferenceModel entityreferenceModel = entityreferenceRepository.findById(Workflow.getEntityReference().getId()).get(); 
		model.setEntityReference(entityreferenceModel); 
		TenantModel tenantModel = tenantRepository.findById(Workflow.getTenant().getId()).get(); 
		model.setTenant(tenantModel); 
		 
		 model= workflowRepository.save(model); 
		 return converter.convert(model, WorkflowTo.class); 
	}

	/**
	 * 
	 * @param workflowId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflow(int workflowId){
		WorkflowModel workflow = workflowRepository.findById(workflowId).orElseThrow(() -> new RuntimeException("Workflow not found")); 
		 workflow.setDeleted(true); 
		  workflowRepository.save(workflow); 
		 return workflowId;
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int workflowId){
		return workflowRepository.findById(workflowId).map(r -> converter.convert(r.getEntityReference(),EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int workflowId){
		return workflowRepository.findById(workflowId).map(r -> converter.convert(r.getHtmlTag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<TenantTo> findTenant(int workflowId){
		return workflowRepository.findById(workflowId).map(r -> converter.convert(r.getTenant(),TenantTo.class));
	}

	/**
	 * 
	 * @param workflowId
	 */
	@Override
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		if(workflowId <1) 
		 {return Optional.empty();} 
		 return workflowRepository.findById(workflowId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowTo.class));
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Set<WorkflowInstanceTo> findWorkflowInstances(int workflowId){
		return workflowInstanceRepository.findByWorkflowId(workflowId).stream().map(e -> converter.convert(e,WorkflowInstanceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflowId){
		return workflowRepository.findById(workflowId).map(r -> converter.convert(r.getWorkflowNode(),WorkflowNodeTo.class));
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Set<WorkflowNodeTo> findWorkflowNodes(int workflowId){
		return workflowNodeRepository.findByWorkflowId(workflowId).stream().map(e -> converter.convert(e,WorkflowNodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowId
	 */
	public Set<WorkflowPhaseTo> findWorkflowPhases(int workflowId){
		return workflowPhaseRepository.findByWorkflowId(workflowId).stream().map(e -> converter.convert(e,WorkflowPhaseTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowTo> findWorkflows(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowRepository.findByCriteria(WorkflowModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowTo.class));
	}

	/**
	 * 
	 * @param workflow
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowTo modifyWorkflow(WorkflowInput workflow){
		WorkflowModel target= workflowRepository.findById(workflow.getId()).orElseThrow(() -> new RuntimeException("Workflow not found")); 
		 WorkflowModel source= converter.convert(workflow,WorkflowModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowRepository.save(target), WorkflowTo.class);
	}

	/**
	 * 
	 * @param workflownodeRepository
	 * @param workflowRepository
	 * @param converter
	 * @param workflowphaseRepository
	 * @param entityreferenceRepository
	 * @param tenantRepository
	 * @param htmltagRepository
	 * @param workflowinstanceRepository
	 */
	@Autowired
	public WorkflowServiceImpl(WorkflowNodeRepository workflownodeRepository, WorkflowRepository workflowRepository, ConversionService converter, WorkflowPhaseRepository workflowphaseRepository, EntityReferenceRepository entityreferenceRepository, TenantRepository tenantRepository, HtmlTagRepository htmltagRepository, WorkflowInstanceRepository workflowinstanceRepository){
		this.workflowRepository =workflowRepository; 
		 this.converter = converter;
		 this.workflowPhaseRepository = workflowphaseRepository;
		 this.entityReferenceRepository = entityreferenceRepository;
		 this.tenantRepository = tenantRepository;
		 this.htmlTagRepository = htmltagRepository;
		 this.workflowInstanceRepository = workflowinstanceRepository;
		 this.workflowNodeRepository = workflownodeRepository;
	}

}