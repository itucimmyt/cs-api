///////////////////////////////////////////////////////////
//  WorkflowNodeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowNodeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:15:01 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.WorkflowEventRepository;
import org.ebs.model.repos.WorkflowStatusRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.ebs.model.repos.ProcessRepository;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.model.repos.WorkflowNodeCFRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.WorkflowNodeCFTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:15:01 PM
 */
@Service @Transactional(readOnly = true)
  class WorkflowNodeServiceImpl implements WorkflowNodeService {

	private WorkflowNodeRepository workflownodeRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	public WorkflowEventRepository workfloweventRepository;
	public WorkflowStatusRepository workflowstatusRepository;
	public WorkflowStageRepository workflowstageRepository;
	public ProcessRepository processRepository;
	public ModuleRepository moduleRepository;
	public WorkflowNodeCFRepository workflownodecfRepository;

	/**
	 * 
	 * @param WorkflowNode
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeTo createWorkflowNode(WorkflowNodeInput WorkflowNode){
		WorkflowNodeModel model = converter.convert(WorkflowNode,WorkflowNodeModel.class); 
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(WorkflowNode.getWorkflow().getId()).get(); 
		model.setWorkflow(workflowModel); 
		 
		 model= workflownodeRepository.save(model); 
		 return converter.convert(model, WorkflowNodeTo.class); 
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowNode(int workflownodeId){
		WorkflowNodeModel workflownode = workflownodeRepository.findById(workflownodeId).orElseThrow(() -> new RuntimeException("WorkflowNode not found")); 
		 workflownode.setDeleted(true); 
		  workflownodeRepository.save(workflownode); 
		 return workflownodeId;
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	@Override
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflownodeId){
		if(workflownodeId <1) 
		 {return Optional.empty();} 
		 return workflownodeRepository.findById(workflownodeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowNodeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowNodeTo> findWorkflowNodes(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflownodeRepository.findByCriteria(WorkflowNodeModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowNodeTo.class));
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	public Set<WorkflowTo> findWorkflows(int workflownodeId){
		return workflowRepository.findByWorkflownodeId(workflownodeId).stream().map(e -> converter.convert(e,WorkflowTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflownode
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeTo modifyWorkflowNode(WorkflowNodeInput workflownode){
		WorkflowNodeModel target= workflownodeRepository.findById(workflownode.getId()).orElseThrow(() -> new RuntimeException("WorkflowNode not found")); 
		 WorkflowNodeModel source= converter.convert(workflownode,WorkflowNodeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflownodeRepository.save(target), WorkflowNodeTo.class);
	}

	/**
	 * 
	 * @param workflownodecfRepository
	 * @param converter
	 * @param workflowRepository
	 * @param workfloweventRepository
	 * @param workflowstatusRepository
	 * @param workflowstageRepository
	 * @param processRepository
	 * @param moduleRepository
	 * @param workflownodeRepository
	 */
	@Autowired
	public WorkflowNodeServiceImpl(WorkflowNodeCFRepository workflownodecfRepository, ConversionService converter, WorkflowRepository workflowRepository, WorkflowEventRepository workfloweventRepository, WorkflowStatusRepository workflowstatusRepository, WorkflowStageRepository workflowstageRepository, ProcessRepository processRepository, ModuleRepository moduleRepository, WorkflowNodeRepository workflownodeRepository){
		this.workflownodeRepository =workflownodeRepository; 
		 this.converter = converter;
		 this.workflowRepository = workflowRepository;
		 this.workfloweventRepository = workfloweventRepository;
		 this.workflowstatusRepository = workflowstatusRepository;
		 this.workflowstageRepository = workflowstageRepository;
		 this.processRepository = processRepository;
		 this.moduleRepository = moduleRepository;
		 this.workflownodecfRepository = workflownodecfRepository;
	}

}