///////////////////////////////////////////////////////////
//  WorkflowNodeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowNodeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:06:42 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.EntityReferenceModel;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.ModuleModel;
import org.ebs.model.ProcessModel;
import org.ebs.model.WorkflowModel;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.model.repos.ProcessRepository;
import org.ebs.model.repos.WorkflowEventRepository;
import org.ebs.model.repos.WorkflowNodeCFRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:06:42 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowNodeServiceImpl implements WorkflowNodeService {

	private WorkflowNodeRepository workflownodeRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	private EntityReferenceRepository entityreferenceRepository;
	private HtmlTagRepository htmltagRepository;
	private ProcessRepository processRepository;
	private ModuleRepository moduleRepository;
	public WorkflowStageRepository workflowstageRepository;
	public ActionRepository actionRepository;
	public WorkflowEventRepository workfloweventRepository;
	public WorkflowNodeCFRepository workflownodecfRepository;

	/**
	 *
	 * @param workflowNode
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeTo createworkflownode(WorkflowNodeInput workflowNode){
		WorkflowNodeModel model = converter.convert(workflowNode,WorkflowNodeModel.class);
		 model.setId(0);
		 initWorkflowNodeModel(workflowNode, model);
		 model = workflownodeRepository.save(model);
		 return converter.convert(model, WorkflowNodeTo.class);
	}

	void initWorkflowNodeModel(WorkflowNodeInput workflowNode, WorkflowNodeModel model) {
		Optional<WorkflowNodeInput> optWFN = Optional.of(workflowNode);

		WorkflowModel workflowModel = optWFN
			.map(wfn -> wfn.getWorkflow())
			.map(w -> workflowRepository.findById(w.getId())
				.orElseThrow(() -> new RuntimeException("workflow does not exist")))
			.orElse(null);
		model.setWorkflow(workflowModel);

		EntityReferenceModel entityreferenceModel = optWFN
			.map(wfn -> wfn.getEntityreference())
			.map(er -> entityreferenceRepository.findById(er.getId())
				.orElseThrow(() -> new RuntimeException("entityreference does not exist")))
			.orElse(null);
		model.setEntityreference(entityreferenceModel);

		HtmlTagModel htmltagModel = optWFN
			.map(wfn -> wfn.getHtmltag())
			.map(ht -> htmltagRepository.findById(ht.getId())
				.orElseThrow(() -> new RuntimeException("htmltag does not exist")))
			.orElse(null);
		model.setHtmltag(htmltagModel);

		ProcessModel processModel = optWFN
			.map(wfn -> wfn.getProcess())
			.map(p -> processRepository.findById(p.getId())
				.orElseThrow(() -> new RuntimeException("process does not exist")))
			.orElse(null);
		model.setProcess(processModel);

		ModuleModel moduleModel = optWFN
			.map(wfn -> wfn.getModule())
			.map(m -> moduleRepository.findById(m.getId())
				.orElseThrow(()-> new RuntimeException("module does not exist")))
			.orElse(null);
		model.setModule(moduleModel);

	}

	/**
	 *
	 * @param workflownodeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteworkflownode(int workflownodeId){
		WorkflowNodeModel workflownode = workflownodeRepository.findById(workflownodeId).orElseThrow(() -> new RuntimeException("WorkflowNode not found"));
		 workflownode.setDeleted(true);
		  workflownodeRepository.save(workflownode);
		 return workflownodeId;
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Set<ActionTo> findactions(int workflownodeId){
		return actionRepository.findByWorkflownodeId(workflownodeId).stream().map(e -> converter.convert(e,ActionTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Optional<EntityReferenceTo> findentityreference(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).map(r -> converter.convert(r.getEntityreference(),EntityReferenceTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Optional<HtmlTagTo> findhtmltag(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Optional<ModuleTo> findmodule(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).map(r -> converter.convert(r.getModule(),ModuleTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Optional<ProcessTo> findprocess(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).map(r -> converter.convert(r.getProcess(),ProcessTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Optional<WorkflowTo> findworkflow(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Set<WorkflowEventTo> findworkflowevents(int workflownodeId){
		return workfloweventRepository.findByWorkflownodeId(workflownodeId).stream().map(e -> converter.convert(e,WorkflowEventTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflownodeId
	 */
	@Override
	public Optional<WorkflowNodeTo> findworkflownode(int workflownodeId){
		if(workflownodeId <1)
		 {return Optional.empty();}
		 return workflownodeRepository.findById(workflownodeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowNodeTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Set<WorkflowNodeCFTo> findworkflownodecfs(int workflownodeId){
		return workflownodecfRepository.findByWorkflownodeId(workflownodeId).stream().map(e -> converter.convert(e,WorkflowNodeCFTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowNodeTo> findworkflownodes(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return workflownodeRepository.findByCriteria(WorkflowNodeModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,WorkflowNodeTo.class));
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Set<WorkflowTo> findworkflows(int workflownodeId){
		return workflowRepository.findByWorkflownodeId(workflownodeId).stream().map(e -> converter.convert(e,WorkflowTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflownodeId
	 */
	public Set<WorkflowStageTo> findworkflowstages(int workflownodeId){
		return workflownodeRepository.findById(workflownodeId).get().getWorkflowstages().stream().map(e->converter.convert(e, WorkflowStageTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflownode
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeTo modifyworkflownode(WorkflowNodeInput workflownode){
		WorkflowNodeModel target= workflownodeRepository.findById(workflownode.getId()).orElseThrow(() -> new RuntimeException("WorkflowNode not found"));
		WorkflowNodeModel source= converter.convert(workflownode,WorkflowNodeModel.class);

		initWorkflowNodeModel(workflownode, source);
		Utils.copyNotNulls(source,target);
		return converter.convert(workflownodeRepository.save(target), WorkflowNodeTo.class);
	}

	/**
	 *
	 * @param workflownodeRepository
	 * @param workfloweventRepository
	 * @param converter
	 * @param workflowstageRepository
	 * @param workflowRepository
	 * @param entityreferenceRepository
	 * @param htmltagRepository
	 * @param processRepository
	 * @param moduleRepository
	 * @param workflownodecfRepository
	 * @param actionRepository
	 */
	@Autowired
	public WorkflowNodeServiceImpl(WorkflowNodeRepository workflownodeRepository, WorkflowEventRepository workfloweventRepository, ConversionService converter, WorkflowStageRepository workflowstageRepository, WorkflowRepository workflowRepository, EntityReferenceRepository entityreferenceRepository, HtmlTagRepository htmltagRepository, ProcessRepository processRepository, ModuleRepository moduleRepository, WorkflowNodeCFRepository workflownodecfRepository, ActionRepository actionRepository){
		this.workflownodeRepository =workflownodeRepository;
		 this.converter = converter;
		 this.workflowstageRepository = workflowstageRepository;
		 this.workflowRepository = workflowRepository;
		 this.actionRepository = actionRepository;
		 this.entityreferenceRepository = entityreferenceRepository;
		 this.workfloweventRepository = workfloweventRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.processRepository = processRepository;
		 this.moduleRepository = moduleRepository;
		 this.workflownodecfRepository = workflownodecfRepository;
	}

}