///////////////////////////////////////////////////////////
//  NumberSequenceRuleServiceImpl.java
//  Macromedia ActionScript Implementation of the Class NumberSequenceRuleServiceImpl
//  Generated by Enterprise Architect
//  Created on:      10-Sep-2020 12:19:37 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.model.repos.NumberSequenceRuleRepository;
import org.ebs.model.repos.NumberSequenceRuleSegmentRepository;
import org.ebs.model.repos.EntityReferenceRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.to.Input.NumberSequenceRuleInput;
import org.ebs.model.NumberSequenceRuleModel;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.EntityReferenceTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 10-Sep-2020 12:19:37 AM
 */
@Service @Transactional(readOnly = true)
  class NumberSequenceRuleServiceImpl implements NumberSequenceRuleService {

	private NumberSequenceRuleRepository numberSequenceRuleRepository;
	private ConversionService converter;
	private TenantRepository tenantRepository;
	public NumberSequenceRuleRepository numbersequenceruleRepository;
	public NumberSequenceRuleSegmentRepository numbersequencerulesegmentRepository;
	public EntityReferenceRepository entityreferenceRepository;

	/**
	 * 
	 * @param NumberSequenceRule
	 */
	@Override @Transactional(readOnly = false)
	public NumberSequenceRuleTo createNumberSequenceRule(NumberSequenceRuleInput NumberSequenceRule){
		NumberSequenceRuleModel model = converter.convert(NumberSequenceRule,NumberSequenceRuleModel.class); 
		 model.setId(0);
		 TenantModel tenantModel = tenantRepository.findById(NumberSequenceRule.getTenant().getId()).get(); 
		model.setTenant(tenantModel); 
		 
		 model= numberSequenceRuleRepository.save(model); 
		 return converter.convert(model, NumberSequenceRuleTo.class); 
	}

	/**
	 * 
	 * @param numberSequenceRuleId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteNumberSequenceRule(int numberSequenceRuleId){
		NumberSequenceRuleModel numberSequenceRule = numberSequenceRuleRepository.findById(numberSequenceRuleId).orElseThrow(() -> new RuntimeException("NumberSequenceRule not found")); 
		 numberSequenceRule.setDeleted(true); 
		  numberSequenceRuleRepository.save(numberSequenceRule); 
		 return numberSequenceRuleId;
	}

	/**
	 * 
	 * @param numbersequenceruleId
	 */
	public Set<EntityReferenceTo> findEntityReferences(int numbersequenceruleId){
		return numberSequenceRuleRepository.findById(numbersequenceruleId).get().getEntityreferences().stream().map(e->converter.convert(e, EntityReferenceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param numberSequenceRuleId
	 */
	@Override
	public Optional<NumberSequenceRuleTo> findNumberSequenceRule(int numberSequenceRuleId){
		if(numberSequenceRuleId <1) 
		 {return Optional.empty();} 
		 return numberSequenceRuleRepository.findById(numberSequenceRuleId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,NumberSequenceRuleTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<NumberSequenceRuleTo> findNumberSequenceRules(PageInput page, SortInput sort, List<FilterInput> filters){
		return numberSequenceRuleRepository.findByCriteria(NumberSequenceRuleModel.class,filters,sort,page).map(r -> converter.convert(r,NumberSequenceRuleTo.class));
	}

	/**
	 * 
	 * @param numbersequenceruleId
	 */
	public Set<NumberSequenceRuleSegmentTo> findNumberSequenceRuleSegments(int numbersequenceruleId){
		return numbersequencerulesegmentRepository.findByNumbersequenceruleId(numbersequenceruleId).stream().map(e -> converter.convert(e,NumberSequenceRuleSegmentTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param numbersequenceruleId
	 */
	public Optional<TenantTo> findTenant(int numbersequenceruleId){
		return numbersequenceruleRepository.findById(numbersequenceruleId).map(r -> converter.convert(r.getTenant(),TenantTo.class));
	}

	/**
	 * 
	 * @param numberSequenceRule
	 */
	@Override @Transactional(readOnly = false)
	public NumberSequenceRuleTo modifyNumberSequenceRule(NumberSequenceRuleInput numberSequenceRule){
		NumberSequenceRuleModel target= numberSequenceRuleRepository.findById(numberSequenceRule.getId()).orElseThrow(() -> new RuntimeException("NumberSequenceRule not found")); 
		 NumberSequenceRuleModel source= converter.convert(numberSequenceRule,NumberSequenceRuleModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(numberSequenceRuleRepository.save(target), NumberSequenceRuleTo.class);
	}

	/**
	 * 
	 * @param entityreferenceRepository
	 * @param tenantRepository
	 * @param numbersequencerulesegmentRepository
	 * @param converter
	 * @param numbersequenceruleRepository
	 */
	@Autowired
	public NumberSequenceRuleServiceImpl(EntityReferenceRepository entityreferenceRepository, TenantRepository tenantRepository, NumberSequenceRuleSegmentRepository numbersequencerulesegmentRepository, ConversionService converter, NumberSequenceRuleRepository numbersequenceruleRepository){
		this.numberSequenceRuleRepository =numbersequenceruleRepository; 
		 this.converter = converter;
		 this.numbersequencerulesegmentRepository = numbersequencerulesegmentRepository;
		 this.tenantRepository = tenantRepository;
		 this.entityreferenceRepository = entityreferenceRepository;
	}

}