///////////////////////////////////////////////////////////
//  StatusTypeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class StatusTypeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:57 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.StatusRepository;
import org.ebs.model.repos.StatusTypeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.StatusTypeTo;
import org.ebs.services.to.Input.StatusTypeInput;
import org.ebs.model.StatusTypeModel;
import org.ebs.services.to.StatusTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:57 AM
 */
@Service @Transactional(readOnly = true)
  class StatusTypeServiceImpl implements StatusTypeService {

	private StatusTypeRepository statustypeRepository;
	private ConversionService converter;
	private StatusRepository statusRepository;

	/**
	 * 
	 * @param StatusType
	 */
	@Override @Transactional(readOnly = false)
	public StatusTypeTo createStatusType(StatusTypeInput StatusType){
		StatusTypeModel model = converter.convert(StatusType,StatusTypeModel.class); 
		 model.setId(0);
		  
		 model= statustypeRepository.save(model); 
		 return converter.convert(model, StatusTypeTo.class); 
	}

	/**
	 * 
	 * @param statusTypeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteStatusType(int statusTypeId){
		StatusTypeModel statustype = statustypeRepository.findById(statusTypeId).orElseThrow(() -> new RuntimeException("StatusType not found")); 
		 statustype.setDeleted(true); 
		  statustypeRepository.save(statustype); 
		 return statusTypeId;
	}

	/**
	 * 
	 * @param statustypeId
	 */
	public Set<StatusTo> findStatuss(int statustypeId){
		return statusRepository.findByStatustypeId(statustypeId).stream().map(e -> converter.convert(e,StatusTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param statusTypeId
	 */
	@Override
	public Optional<StatusTypeTo> findStatusType(int statusTypeId){
		if(statusTypeId <1) 
		 {return Optional.empty();} 
		 return statustypeRepository.findById(statusTypeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,StatusTypeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<StatusTypeTo> findStatusTypes(PageInput page, SortInput sort, List<FilterInput> filters){
		return statustypeRepository.findByCriteria(StatusTypeModel.class,filters,sort,page).map(r -> converter.convert(r,StatusTypeTo.class));
	}

	/**
	 * 
	 * @param statusType
	 */
	@Override @Transactional(readOnly = false)
	public StatusTypeTo modifyStatusType(StatusTypeInput statusType){
		StatusTypeModel target= statustypeRepository.findById(statusType.getId()).orElseThrow(() -> new RuntimeException("StatusType not found")); 
		 StatusTypeModel source= converter.convert(statusType,StatusTypeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(statustypeRepository.save(target), StatusTypeTo.class);
	}

	/**
	 * 
	 * @param statusRepository
	 * @param converter
	 * @param statustypeRepository
	 */
	@Autowired
	public StatusTypeServiceImpl(StatusRepository statusRepository, ConversionService converter, StatusTypeRepository statustypeRepository){
		this.statustypeRepository =statustypeRepository; 
		 this.converter = converter;
		 this.statusRepository = statusRepository;
	}

}