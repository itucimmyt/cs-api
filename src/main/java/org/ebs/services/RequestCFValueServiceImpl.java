///////////////////////////////////////////////////////////
//  RequestCFValueServiceImpl.java
//  Macromedia ActionScript Implementation of the Class RequestCFValueServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:14:13 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.repos.RequestCFValueRepository;
import org.ebs.model.repos.RequestRepository;
import org.ebs.model.repos.WorkflowNodeCFRepository;
import org.springframework.transaction.annotation.Transactional;
import org.ebs.services.to.RequestCFValueTo;
import org.ebs.services.to.Input.RequestCFValueInput;
import org.ebs.model.RequestCFValueModel;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.to.RequestTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:14:13 PM
 */
@Service @Transactional(readOnly = true)
  class RequestCFValueServiceImpl implements RequestCFValueService {

	private RequestCFValueRepository requestcfvalueRepository;
	private ConversionService converter;
	public RequestRepository requestRepository;
	public WorkflowNodeCFRepository workflownodecfRepository;

	/**
	 * 
	 * @param RequestCFValue
	 */
	@Override @Transactional(readOnly = false)
	public RequestCFValueTo createRequestCFValue(RequestCFValueInput RequestCFValue){
		RequestCFValueModel model = converter.convert(RequestCFValue,RequestCFValueModel.class); 
		 model.setId(0);
		  
		 model= requestcfvalueRepository.save(model); 
		 return converter.convert(model, RequestCFValueTo.class); 
	}

	/**
	 * 
	 * @param requestcfvalueId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteRequestCFValue(int requestcfvalueId){
		RequestCFValueModel requestcfvalue = requestcfvalueRepository.findById(requestcfvalueId).orElseThrow(() -> new RuntimeException("RequestCFValue not found")); 
		 requestcfvalue.setDeleted(true); 
		  requestcfvalueRepository.save(requestcfvalue); 
		 return requestcfvalueId;
	}

	/**
	 * 
	 * @param requestcfvalueId
	 */
	@Override
	public Optional<RequestCFValueTo> findRequestCFValue(int requestcfvalueId){
		if(requestcfvalueId <1) 
		 {return Optional.empty();} 
		 return requestcfvalueRepository.findById(requestcfvalueId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,RequestCFValueTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<RequestCFValueTo> findRequestCFValues(PageInput page, SortInput sort, List<FilterInput> filters){
		return requestcfvalueRepository.findByCriteria(RequestCFValueModel.class,filters,sort,page).map(r -> converter.convert(r,RequestCFValueTo.class));
	}

	/**
	 * 
	 * @param requestcfvalue
	 */
	@Override @Transactional(readOnly = false)
	public RequestCFValueTo modifyRequestCFValue(RequestCFValueInput requestcfvalue){
		RequestCFValueModel target= requestcfvalueRepository.findById(requestcfvalue.getId()).orElseThrow(() -> new RuntimeException("RequestCFValue not found")); 
		 RequestCFValueModel source= converter.convert(requestcfvalue,RequestCFValueModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(requestcfvalueRepository.save(target), RequestCFValueTo.class);
	}

	/**
	 * 
	 * @param workflownodecfRepository
	 * @param requestRepository
	 * @param converter
	 * @param requestcfvalueRepository
	 */
	@Autowired
	public RequestCFValueServiceImpl(WorkflowNodeCFRepository workflownodecfRepository, RequestRepository requestRepository, ConversionService converter, RequestCFValueRepository requestcfvalueRepository){
		this.requestcfvalueRepository =requestcfvalueRepository; 
		 this.converter = converter;
		 this.requestRepository = requestRepository;
		 this.workflownodecfRepository = workflownodecfRepository;
	}

}