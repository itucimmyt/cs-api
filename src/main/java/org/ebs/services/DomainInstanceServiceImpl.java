///////////////////////////////////////////////////////////
//  DomainInstanceServiceImpl.java
//  Macromedia ActionScript Implementation of the Class DomainInstanceServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:19:46 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.InstanceModel;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.model.DomainModel;
import org.ebs.model.repos.DomainRepository;
import org.ebs.model.repos.DomainInstanceRepository;
import org.springframework.transaction.annotation.Transactional;
import org.ebs.services.to.DomainInstanceTo;
import org.ebs.services.to.Input.DomainInstanceInput;
import org.ebs.model.DomainInstanceModel;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.DomainTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:19:46 AM
 */
@Service @Transactional(readOnly = true)
  class DomainInstanceServiceImpl implements DomainInstanceService {

	private DomainInstanceRepository domaininstanceRepository;
	private ConversionService converter;
	private InstanceRepository instanceRepository;
	private DomainRepository domainRepository;

	/**
	 * 
	 * @param DomainInstance
	 */
	@Override @Transactional(readOnly = false)
	public DomainInstanceTo createDomainInstance(DomainInstanceInput DomainInstance){
		DomainInstanceModel model = converter.convert(DomainInstance,DomainInstanceModel.class); 
		 model.setId(0);
		 InstanceModel instanceModel = instanceRepository.findById(DomainInstance.getInstance().getId()).get(); 
		model.setInstance(instanceModel); 
		DomainModel domainModel = domainRepository.findById(DomainInstance.getDomain().getId()).get(); 
		model.setDomain(domainModel); 
		 
		 model= domaininstanceRepository.save(model); 
		 return converter.convert(model, DomainInstanceTo.class); 
	}

	/**
	 * 
	 * @param domainInstanceId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteDomainInstance(int domainInstanceId){
		DomainInstanceModel domaininstance = domaininstanceRepository.findById(domainInstanceId).orElseThrow(() -> new RuntimeException("DomainInstance not found")); 
		 domaininstance.setDeleted(true); 
		  domaininstanceRepository.save(domaininstance); 
		 return domainInstanceId;
	}

	/**
	 * 
	 * @param domainRepository
	 * @param instanceRepository
	 * @param converter
	 * @param domaininstanceRepository
	 */
	@Autowired
	public DomainInstanceServiceImpl(DomainRepository domainRepository, InstanceRepository instanceRepository, ConversionService converter, DomainInstanceRepository domaininstanceRepository){
		this.domaininstanceRepository =domaininstanceRepository; 
		 this.converter = converter;
		 this.domainRepository = domainRepository;
		 this.instanceRepository= instanceRepository;
	}

	/**
	 * 
	 * @param domaininstanceId
	 */
	public Optional<DomainTo> findDomain(int domaininstanceId){
		return domaininstanceRepository.findById(domaininstanceId).map(r -> converter.convert(r.getDomain(),DomainTo.class));
	}

	/**
	 * 
	 * @param domainInstanceId
	 */
	@Override
	public Optional<DomainInstanceTo> findDomainInstance(int domainInstanceId){
		if(domainInstanceId <1) 
		 {return Optional.empty();} 
		 return domaininstanceRepository.findById(domainInstanceId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,DomainInstanceTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<DomainInstanceTo> findDomainInstances(PageInput page, SortInput sort, List<FilterInput> filters){
		return domaininstanceRepository.findByCriteria(DomainInstanceModel.class,filters,sort,page).map(r -> converter.convert(r,DomainInstanceTo.class));
	}

	/**
	 * 
	 * @param domaininstanceId
	 */
	public Optional<InstanceTo> findInstance(int domaininstanceId){
		return domaininstanceRepository.findById(domaininstanceId).map(r -> converter.convert(r.getInstance(),InstanceTo.class));
	}

	/**
	 * 
	 * @param domainInstance
	 */
	@Override @Transactional(readOnly = false)
	public DomainInstanceTo modifyDomainInstance(DomainInstanceInput domainInstance){
		DomainInstanceModel target= domaininstanceRepository.findById(domainInstance.getId()).orElseThrow(() -> new RuntimeException("DomainInstance not found")); 
		 DomainInstanceModel source= converter.convert(domainInstance,DomainInstanceModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(domaininstanceRepository.save(target), DomainInstanceTo.class);
	}

}