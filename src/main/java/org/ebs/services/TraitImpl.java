///////////////////////////////////////////////////////////
//  TraitImpl.java
//  Macromedia ActionScript Implementation of the Class TraitImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:28 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.TraitModel;
import org.ebs.model.repos.TraitRepository;
import org.ebs.services.to.TraitTo;
import org.ebs.services.to.Input.TraitInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:28 PM
 */
@Service @Transactional(readOnly = true)
public class TraitImpl implements TraitService {

	private TraitRepository traitRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Trait
	 */
	@Override @Transactional(readOnly = false)
	public TraitTo createTrait(TraitInput Trait){
		TraitModel model = converter.convert(Trait,TraitModel.class); 
		 model.setId(0);
		  
		 model= traitRepository.save(model); 
		 return converter.convert(model, TraitTo.class); 
	}

	/**
	 * 
	 * @param idtrait
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTrait(int idtrait){
		TraitModel trait = traitRepository.findById(idtrait).orElseThrow(() -> new RuntimeException("Request not found")); 
		 trait.setDeleted(true); 
		  traitRepository.save(trait); 
		 return idtrait;
	}

	/**
	 * 
	 * @param traitId
	 */
	@Override
	public Optional<TraitTo> findTrait(int traitId){
		if(traitId <1) 
		 {return Optional.empty();} 
		 return traitRepository.findById(traitId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TraitTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TraitTo> findTraits(PageInput page, SortInput sort, List<FilterInput> filters){
		return traitRepository.findByCriteria(TraitModel.class,filters,sort,page).map(r -> converter.convert(r,TraitTo.class));
	}

	/**
	 * 
	 * @param trait
	 */
	@Override @Transactional(readOnly = false)
	public TraitTo modifyTrait(TraitInput trait){
		TraitModel target= traitRepository.findById(trait.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 TraitModel source= converter.convert(trait,TraitModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(traitRepository.save(target), TraitTo.class);
	}

	/**
	 * 
	 * @param traitRepository
	 */
	@Autowired
	public TraitImpl(TraitRepository traitRepository){
		this.traitRepository =traitRepository;
	}

}