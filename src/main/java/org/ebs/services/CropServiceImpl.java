///////////////////////////////////////////////////////////
//  CropServiceImpl.java
//  Macromedia ActionScript Implementation of the Class CropServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Aug-2020 2:59:20 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.CropRepository;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.model.repos.ServiceProviderRepository;
import org.ebs.model.repos.SeasonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.CropTo;
import org.ebs.services.to.Input.CropInput;
import org.ebs.model.CropModel;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.to.SeasonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Aug-2020 2:59:20 PM
 */
@Service @Transactional(readOnly = true)
  class CropServiceImpl implements CropService {

	private CropRepository cropRepository;
	private ConversionService converter;
	public ProgramRepository programRepository;
	public ServiceProviderRepository serviceproviderRepository;
	public SeasonRepository seasonRepository;

	/**
	 * 
	 * @param Crop
	 */
	@Override @Transactional(readOnly = false)
	public CropTo createCrop(CropInput Crop){
		CropModel model = converter.convert(Crop,CropModel.class); 
		 model.setId(0);
		  
		 model= cropRepository.save(model); 
		 return converter.convert(model, CropTo.class); 
	}

	/**
	 * 
	 * @param seasonRepository
	 * @param serviceproviderRepository
	 * @param programRepository
	 * @param converter
	 * @param cropRepository
	 */
	@Autowired
	public CropServiceImpl(SeasonRepository seasonRepository, ServiceProviderRepository serviceproviderRepository, ProgramRepository programRepository, ConversionService converter, CropRepository cropRepository){
		this.cropRepository =cropRepository; 
		 this.converter = converter;
		 this.programRepository = programRepository;
		 this.serviceproviderRepository = serviceproviderRepository;
		 this.seasonRepository = seasonRepository;
	}

	/**
	 * 
	 * @param cropId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteCrop(int cropId){
		CropModel crop = cropRepository.findById(cropId).orElseThrow(() -> new RuntimeException("Crop not found")); 
		 crop.setDeleted(true); 
		  cropRepository.save(crop); 
		 return cropId;
	}

	/**
	 * 
	 * @param cropId
	 */
	@Override
	public Optional<CropTo> findCrop(int cropId){
		if(cropId <1) 
		 {return Optional.empty();} 
		 return cropRepository.findById(cropId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,CropTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<CropTo> findCrops(PageInput page, SortInput sort, List<FilterInput> filters){
		return cropRepository.findByCriteria(CropModel.class,filters,sort,page).map(r -> converter.convert(r,CropTo.class));
	}

	/**
	 * 
	 * @param cropId
	 */
	public Set<ProgramTo> findPrograms(int cropId){
		return programRepository.findByCropId(cropId).stream().map(e -> converter.convert(e,ProgramTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param crop
	 */
	@Override @Transactional(readOnly = false)
	public CropTo modifyCrop(CropInput crop){
		CropModel target= cropRepository.findById(crop.getId()).orElseThrow(() -> new RuntimeException("Crop not found")); 
		 CropModel source= converter.convert(crop,CropModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(cropRepository.save(target), CropTo.class);
	}

}