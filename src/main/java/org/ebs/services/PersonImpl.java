///////////////////////////////////////////////////////////
//  PersonImpl.java
//  Macromedia ActionScript Implementation of the Class PersonImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:52 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.AddressModel;
import org.ebs.model.PersonModel;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.AddressRepository;
import org.ebs.model.repos.PersonRepository;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.Input.PersonInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:52 PM
 */
@Service @Transactional(readOnly = true)
public class PersonImpl implements PersonService {

	private PersonRepository personRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private AddressRepository addressRepository;
	@Autowired
	private TenantRepository tenantRepository;

	/**
	 * 
	 * @param Person
	 */
	@Override @Transactional(readOnly = false)
	public PersonTo createPerson(PersonInput Person){
		PersonModel model = converter.convert(Person,PersonModel.class); 
		 model.setId(0);
		 AddressModel addressModel = addressRepository.findById(Person.getAddress().getId()).get(); 
		model.setAddress(addressModel); 
		TenantModel tenantModel = tenantRepository.findById(Person.getTenant().getId()).get(); 
		model.setTenant(tenantModel); 
		 
		 model= personRepository.save(model); 
		 return converter.convert(model, PersonTo.class); 
	}

	/**
	 * 
	 * @param idperson
	 */
	@Override @Transactional(readOnly = false)
	public int deletePerson(int idperson){
		PersonModel person = personRepository.findById(idperson).orElseThrow(() -> new RuntimeException("Request not found")); 
		 person.setDeleted(true); 
		  personRepository.save(person); 
		 return idperson;
	}

	/**
	 * 
	 * @param personId
	 */
	@Override
	public Optional<PersonTo> findPerson(int personId){
		if(personId <1) 
		 {return Optional.empty();} 
		 return personRepository.findById(personId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,PersonTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<PersonTo> findPersons(PageInput page, SortInput sort, List<FilterInput> filters){
		return personRepository.findByCriteria(PersonModel.class,filters,sort,page).map(r -> converter.convert(r,PersonTo.class));
	}

	/**
	 * 
	 * @param person
	 */
	@Override @Transactional(readOnly = false)
	public PersonTo modifyPerson(PersonInput person){
		PersonModel target= personRepository.findById(person.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 PersonModel source= converter.convert(person,PersonModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(personRepository.save(target), PersonTo.class);
	}

	/**
	 * 
	 * @param personRepository
	 */
	@Autowired
	public PersonImpl(PersonRepository personRepository){
		this.personRepository =personRepository;
	}

}