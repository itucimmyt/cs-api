///////////////////////////////////////////////////////////
//  EmailTemplateServiceImpl.java
//  Macromedia ActionScript Implementation of the Class EmailTemplateServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:11:14 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.model.repos.EmailTemplateRepository;
import org.ebs.model.repos.EntityReferenceRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.to.Input.EmailTemplateInput;
import org.ebs.model.EmailTemplateModel;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.TenantTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:11:14 AM
 */
@Service @Transactional(readOnly = true)
  class EmailTemplateServiceImpl implements EmailTemplateService {

	private EmailTemplateRepository emailTemplateRepository;
	private ConversionService converter;
	private TenantRepository tenantRepository;
	public EntityReferenceRepository entityReferenceRepository;

	/**
	 * 
	 * @param EmailTemplate
	 */
	@Override @Transactional(readOnly = false)
	public EmailTemplateTo createEmailTemplate(EmailTemplateInput EmailTemplate){
		EmailTemplateModel model = converter.convert(EmailTemplate,EmailTemplateModel.class); 
		 model.setId(0);
		 TenantModel tenantModel = tenantRepository.findById(EmailTemplate.getTenant().getId()).get(); 
		model.setTenant(tenantModel); 
		 
		 model= emailTemplateRepository.save(model); 
		 return converter.convert(model, EmailTemplateTo.class); 
	}

	/**
	 * 
	 * @param emailTemplateId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteEmailTemplate(int emailTemplateId){
		EmailTemplateModel emailTemplate = emailTemplateRepository.findById(emailTemplateId).orElseThrow(() -> new RuntimeException("EmailTemplate not found")); 
		 emailTemplate.setDeleted(true); 
		  emailTemplateRepository.save(emailTemplate); 
		 return emailTemplateId;
	}

	/**
	 * 
	 * @param tenantRepository
	 * @param entityreferenceRepository
	 * @param converter
	 * @param emailtemplateRepository
	 */
	@Autowired
	public EmailTemplateServiceImpl(TenantRepository tenantRepository, EntityReferenceRepository entityreferenceRepository, ConversionService converter, EmailTemplateRepository emailtemplateRepository){
		this.emailTemplateRepository =emailtemplateRepository; 
		 this.converter = converter;
		 this.entityReferenceRepository = entityreferenceRepository;
		 this.tenantRepository = tenantRepository;
	}

	/**
	 * 
	 * @param emailTemplateId
	 */
	@Override
	public Optional<EmailTemplateTo> findEmailTemplate(int emailTemplateId){
		if(emailTemplateId <1) 
		 {return Optional.empty();} 
		 return emailTemplateRepository.findById(emailTemplateId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,EmailTemplateTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<EmailTemplateTo> findEmailTemplates(PageInput page, SortInput sort, List<FilterInput> filters){
		return emailTemplateRepository.findByCriteria(EmailTemplateModel.class,filters,sort,page).map(r -> converter.convert(r,EmailTemplateTo.class));
	}

	/**
	 * 
	 * @param emailTemplateId
	 */
	public Set<EntityReferenceTo> findEntityReferences(int emailTemplateId){
		return emailTemplateRepository.findById(emailTemplateId).get().getEntityReferences().stream().map(e->converter.convert(e, EntityReferenceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param emailTemplateId
	 */
	public Optional<TenantTo> findTenant(int emailTemplateId){
		return emailTemplateRepository.findById(emailTemplateId).map(r -> converter.convert(r.getTenant(),TenantTo.class));
	}

	/**
	 * 
	 * @param emailTemplate
	 */
	@Override @Transactional(readOnly = false)
	public EmailTemplateTo modifyEmailTemplate(EmailTemplateInput emailTemplate){
		EmailTemplateModel target= emailTemplateRepository.findById(emailTemplate.getId()).orElseThrow(() -> new RuntimeException("EmailTemplate not found")); 
		 EmailTemplateModel source= converter.convert(emailTemplate,EmailTemplateModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(emailTemplateRepository.save(target), EmailTemplateTo.class);
	}

}