///////////////////////////////////////////////////////////
//  TenantImpl.java
//  Macromedia ActionScript Implementation of the Class TenantImpl
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 12:07:14 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.Input.TenantInput;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 12:07:14 AM
 */
@Service @Transactional(readOnly = true)
public class TenantImpl implements TenantService {

	private TenantRepository tenantRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Tenant
	 */
	@Override @Transactional(readOnly = false)
	public TenantTo createTenant(TenantInput Tenant){
		TenantModel model = converter.convert(Tenant,TenantModel.class); 
		 model.setId(0); 
		 model= tenantRepository.save(model); 
		 return converter.convert(model, TenantTo.class); 
	}

	/**
	 * 
	 * @param idtenant
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTenant(int idtenant){
		TenantModel tenant = tenantRepository.findById(idtenant).orElseThrow(() -> new RuntimeException("Request not found")); 
		 tenant.setDeleted(true); 
		  tenantRepository.save(tenant); 
		 return idtenant;
	}

	/**
	 * 
	 * @param tenantId
	 */
	@Override
	public Optional<TenantTo> findTenant(int tenantId){
		if(tenantId <1) 
		 {return Optional.empty();} 
		 return tenantRepository.findById(tenantId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TenantTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TenantTo> findTenants(PageInput page, SortInput sort, List<FilterInput> filters){
		return tenantRepository.findByCriteria(TenantModel.class,filters,sort,page).map(r -> converter.convert(r,TenantTo.class));
	}

	/**
	 * 
	 * @param tenant
	 */
	@Override @Transactional(readOnly = false)
	public TenantTo modifyTenant(TenantInput tenant){
		TenantModel target= tenantRepository.findById(tenant.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 TenantModel source= converter.convert(tenant,TenantModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(tenantRepository.save(target), TenantTo.class);
	}

	/**
	 * 
	 * @param tenantRepository
	 */
	@Autowired
	public TenantImpl(TenantRepository tenantRepository){
		this.tenantRepository =tenantRepository;
	}

}