///////////////////////////////////////////////////////////
//  UserImpl.java
//  Macromedia ActionScript Implementation of the Class UserImpl
//  Generated by Enterprise Architect
//  Created on:      27-Apr-2020 9:47:56 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.UserTo;
import org.ebs.services.to.Input.UserInput;
import org.ebs.model.UserModel;
import org.ebs.model.repos.UserRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Apr-2020 9:47:56 AM
 */
@Service @Transactional(readOnly = true)
public class UserImpl implements UserService {

	@Autowired
	private ConversionService converter;
	private UserRepository userRepository;

	/**
	 * 
	 * @param User
	 */
	@Override @Transactional(readOnly = false)
	public UserTo createUser(UserInput User){
		UserModel model = converter.convert(User,UserModel.class); 
		 model.setId(0); 
		 model= userRepository.save(model); 
		 return converter.convert(model, UserTo.class); 
	}

	/**
	 * 
	 * @param iduser
	 */
	@Override @Transactional(readOnly = false)
	public int deleteUser(int iduser){
		UserModel user = userRepository.findById(iduser).orElseThrow(() -> new RuntimeException("Request not found")); 
		 user.setDeleted(true); 
		  userRepository.save(user); 
		 return iduser;
	}

	/**
	 * 
	 * @param userId
	 */
	@Override
	public Optional<UserTo> findUser(int userId){
		if(userId <1) 
		 {return Optional.empty();} 
		 return userRepository.findById(userId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,UserTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<UserTo> findUsers(PageInput page, SortInput sort, List<FilterInput> filters){
		return userRepository.findByCriteria(UserModel.class,filters,sort,page).map(r -> converter.convert(r,UserTo.class));
	}

	/**
	 * 
	 * @param user
	 */
	@Override @Transactional(readOnly = false)
	public UserTo modifyUser(UserInput user){
		UserModel target= userRepository.findById(user.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 UserModel source= converter.convert(user,UserModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(userRepository.save(target), UserTo.class);
	}

	/**
	 * 
	 * @param userRepository
	 */
	@Autowired
	public UserImpl(UserRepository userRepository){
		this.userRepository =userRepository;
	}

}