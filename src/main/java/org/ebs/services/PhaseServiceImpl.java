///////////////////////////////////////////////////////////
//  PhaseServiceImpl.java
//  Macromedia ActionScript Implementation of the Class PhaseServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:47 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.PhaseRepository;
import org.ebs.model.repos.StageRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.PhaseTo;
import org.ebs.services.to.Input.PhaseInput;
import org.ebs.model.PhaseModel;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.HtmlTagTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:47 AM
 */
@Service @Transactional(readOnly = true)
  class PhaseServiceImpl implements PhaseService {

	private PhaseRepository phaseRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	private HtmlTagRepository htmltagRepository;
	private StageRepository stageRepository;

	/**
	 * 
	 * @param Phase
	 */
	@Override @Transactional(readOnly = false)
	public PhaseTo createPhase(PhaseInput Phase){
		PhaseModel model = converter.convert(Phase,PhaseModel.class); 
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(Phase.getWorkflow().getId()).get(); 
		model.setWorkflow(workflowModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(Phase.getHtmltag().getId()).get(); 
		model.setHtmltag(htmltagModel); 
		 
		 model= phaseRepository.save(model); 
		 return converter.convert(model, PhaseTo.class); 
	}

	/**
	 * 
	 * @param phaseId
	 */
	@Override @Transactional(readOnly = false)
	public int deletePhase(int phaseId){
		PhaseModel phase = phaseRepository.findById(phaseId).orElseThrow(() -> new RuntimeException("Phase not found")); 
		 phase.setDeleted(true); 
		  phaseRepository.save(phase); 
		 return phaseId;
	}

	/**
	 * 
	 * @param phaseId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int phaseId){
		return phaseRepository.findById(phaseId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param phaseId
	 */
	@Override
	public Optional<PhaseTo> findPhase(int phaseId){
		if(phaseId <1) 
		 {return Optional.empty();} 
		 return phaseRepository.findById(phaseId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,PhaseTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<PhaseTo> findPhases(PageInput page, SortInput sort, List<FilterInput> filters){
		return phaseRepository.findByCriteria(PhaseModel.class,filters,sort,page).map(r -> converter.convert(r,PhaseTo.class));
	}

	/**
	 * 
	 * @param phaseId
	 */
	public Set<StageTo> findStages(int phaseId){
		return stageRepository.findByPhaseId(phaseId).stream().map(e -> converter.convert(e,StageTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param phaseId
	 */
	public Optional<WorkflowTo> findWorkflow(int phaseId){
		return phaseRepository.findById(phaseId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 * 
	 * @param phase
	 */
	@Override @Transactional(readOnly = false)
	public PhaseTo modifyPhase(PhaseInput phase){
		PhaseModel target= phaseRepository.findById(phase.getId()).orElseThrow(() -> new RuntimeException("Phase not found")); 
		 PhaseModel source= converter.convert(phase,PhaseModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(phaseRepository.save(target), PhaseTo.class);
	}

	/**
	 * 
	 * @param htmltagRepository
	 * @param workflowRepository
	 * @param stageRepository
	 * @param converter
	 * @param phaseRepository
	 */
	@Autowired
	public PhaseServiceImpl(HtmlTagRepository htmltagRepository, WorkflowRepository workflowRepository, StageRepository stageRepository, ConversionService converter, PhaseRepository phaseRepository){
		this.phaseRepository =phaseRepository; 
		 this.converter = converter;
		 this.stageRepository = stageRepository;
		 this.workflowRepository = workflowRepository;
		 this.htmltagRepository = htmltagRepository;
	}

}