///////////////////////////////////////////////////////////
//  AuthenticationTypeImpl.java
//  Macromedia ActionScript Implementation of the Class AuthenticationTypeImpl
//  Generated by Enterprise Architect
//  Created on:      27-Apr-2020 9:47:34 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.to.Input.AuthenticationTypeInput;
import org.ebs.model.AuthenticationTypeModel;
import org.ebs.model.repos.AuthenticationTypeRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Apr-2020 9:47:34 AM
 */
@Service @Transactional(readOnly = true)
public class AuthenticationTypeImpl implements AuthenticationTypeService {

	private AuthenticationTypeRepository authenticationtypeRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param authenticationtypeRepository
	 */
	@Autowired
	public AuthenticationTypeImpl(AuthenticationTypeRepository authenticationtypeRepository){
		this.authenticationtypeRepository =authenticationtypeRepository;
	}

	/**
	 * 
	 * @param AuthenticationType
	 */
	@Override @Transactional(readOnly = false)
	public AuthenticationTypeTo createAuthenticationType(AuthenticationTypeInput AuthenticationType){
		AuthenticationTypeModel model = converter.convert(AuthenticationType,AuthenticationTypeModel.class); 
		 model.setId(0); 
		 model= authenticationtypeRepository.save(model); 
		 return converter.convert(model, AuthenticationTypeTo.class); 
	}

	/**
	 * 
	 * @param idauthenticationtype
	 */
	@Override @Transactional(readOnly = false)
	public int deleteAuthenticationType(int idauthenticationtype){
		AuthenticationTypeModel authenticationtype = authenticationtypeRepository.findById(idauthenticationtype).orElseThrow(() -> new RuntimeException("Request not found")); 
		 authenticationtype.setDeleted(true); 
		  authenticationtypeRepository.save(authenticationtype); 
		 return idauthenticationtype;
	}

	/**
	 * 
	 * @param authenticationtypeId
	 */
	@Override
	public Optional<AuthenticationTypeTo> findAuthenticationType(int authenticationtypeId){
		if(authenticationtypeId <1) 
		 {return Optional.empty();} 
		 return authenticationtypeRepository.findById(authenticationtypeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,AuthenticationTypeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<AuthenticationTypeTo> findAuthenticationTypes(PageInput page, SortInput sort, List<FilterInput> filters){
		return authenticationtypeRepository.findByCriteria(AuthenticationTypeModel.class,filters,sort,page).map(r -> converter.convert(r,AuthenticationTypeTo.class));
	}

	/**
	 * 
	 * @param authenticationtype
	 */
	@Override @Transactional(readOnly = false)
	public AuthenticationTypeTo modifyAuthenticationType(AuthenticationTypeInput authenticationtype){
		AuthenticationTypeModel target= authenticationtypeRepository.findById(authenticationtype.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 AuthenticationTypeModel source= converter.convert(authenticationtype,AuthenticationTypeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(authenticationtypeRepository.save(target), AuthenticationTypeTo.class);
	}

}