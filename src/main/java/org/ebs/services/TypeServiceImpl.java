///////////////////////////////////////////////////////////
//  TypeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class TypeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:20:04 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.TypeRepository;
import org.ebs.model.repos.PersonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.TypeTo;
import org.ebs.services.to.Input.TypeInput;
import org.ebs.model.TypeModel;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:20:04 AM
 */
@Service @Transactional(readOnly = true)
  class TypeServiceImpl implements TypeService {

	private TypeRepository typeRepository;
	private ConversionService converter;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param Type
	 */
	@Override @Transactional(readOnly = false)
	public TypeTo createType(TypeInput Type){
		TypeModel model = converter.convert(Type,TypeModel.class); 
		 model.setId(0);
		  
		 model= typeRepository.save(model); 
		 return converter.convert(model, TypeTo.class); 
	}

	/**
	 * 
	 * @param typeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteType(int typeId){
		TypeModel type = typeRepository.findById(typeId).orElseThrow(() -> new RuntimeException("Type not found")); 
		 type.setDeleted(true); 
		  typeRepository.save(type); 
		 return typeId;
	}

	/**
	 * 
	 * @param typeId
	 */
	public Set<PersonTo> findPersons(int typeId){
		return typeRepository.findById(typeId).get().getPersons().stream().map(e->converter.convert(e, PersonTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param typeId
	 */
	@Override
	public Optional<TypeTo> findType(int typeId){
		if(typeId <1) 
		 {return Optional.empty();} 
		 return typeRepository.findById(typeId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,TypeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TypeTo> findTypes(PageInput page, SortInput sort, List<FilterInput> filters){
		return typeRepository.findByCriteria(TypeModel.class,filters,sort,page).map(r -> converter.convert(r,TypeTo.class));
	}

	/**
	 * 
	 * @param type
	 */
	@Override @Transactional(readOnly = false)
	public TypeTo modifyType(TypeInput type){
		TypeModel target= typeRepository.findById(type.getId()).orElseThrow(() -> new RuntimeException("Type not found")); 
		 TypeModel source= converter.convert(type,TypeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(typeRepository.save(target), TypeTo.class);
	}

	/**
	 * 
	 * @param personRepository
	 * @param converter
	 * @param typeRepository
	 */
	@Autowired
	public TypeServiceImpl(PersonRepository personRepository, ConversionService converter, TypeRepository typeRepository){
		this.typeRepository =typeRepository; 
		 this.converter = converter;
		 this.personRepository = personRepository;
	}

}