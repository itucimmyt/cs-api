///////////////////////////////////////////////////////////
//  SchemaImpl.java
//  Macromedia ActionScript Implementation of the Class SchemaImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:10 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.PipelineModel;
import org.ebs.model.SchemaModel;
import org.ebs.model.repos.PipelineRepository;
import org.ebs.model.repos.SchemaRepository;
import org.ebs.services.to.SchemaTo;
import org.ebs.services.to.Input.SchemaInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:10 PM
 */
@Service @Transactional(readOnly = true)
public class SchemaImpl implements SchemaService {

	private SchemaRepository schemaRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private PipelineRepository pipelineRepository;

	/**
	 * 
	 * @param Schema
	 */
	@Override @Transactional(readOnly = false)
	public SchemaTo createSchema(SchemaInput Schema){
		SchemaModel model = converter.convert(Schema,SchemaModel.class); 
		 model.setId(0);
		 PipelineModel pipelineModel = pipelineRepository.findById(Schema.getPipeline().getId()).get(); 
		model.setPipeline(pipelineModel); 
		 
		 model= schemaRepository.save(model); 
		 return converter.convert(model, SchemaTo.class); 
	}

	/**
	 * 
	 * @param idschema
	 */
	@Override @Transactional(readOnly = false)
	public int deleteSchema(int idschema){
		SchemaModel schema = schemaRepository.findById(idschema).orElseThrow(() -> new RuntimeException("Request not found")); 
		 schema.setDeleted(true); 
		  schemaRepository.save(schema); 
		 return idschema;
	}

	/**
	 * 
	 * @param schemaId
	 */
	@Override
	public Optional<SchemaTo> findSchema(int schemaId){
		if(schemaId <1) 
		 {return Optional.empty();} 
		 return schemaRepository.findById(schemaId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,SchemaTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<SchemaTo> findSchemas(PageInput page, SortInput sort, List<FilterInput> filters){
		return schemaRepository.findByCriteria(SchemaModel.class,filters,sort,page).map(r -> converter.convert(r,SchemaTo.class));
	}

	/**
	 * 
	 * @param schema
	 */
	@Override @Transactional(readOnly = false)
	public SchemaTo modifySchema(SchemaInput schema){
		SchemaModel target= schemaRepository.findById(schema.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 SchemaModel source= converter.convert(schema,SchemaModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(schemaRepository.save(target), SchemaTo.class);
	}

	/**
	 * 
	 * @param schemaRepository
	 */
	@Autowired
	public SchemaImpl(SchemaRepository schemaRepository){
		this.schemaRepository =schemaRepository;
	}

}