///////////////////////////////////////////////////////////
//  AuditLogsServiceImpl.java
//  Macromedia ActionScript Implementation of the Class AuditLogsServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:04:45 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.AuditLogsModel;
import org.ebs.model.InstanceModel;
import org.ebs.model.repos.AuditLogsRepository;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.Input.AuditLogsInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:04:45 AM
 */
@Service @Transactional(readOnly = true)
  class AuditLogsServiceImpl implements AuditLogsService {

	private AuditLogsRepository auditlogsRepository;
	private ConversionService converter;
	private InstanceRepository instanceRepository;

	/**
	 * 
	 * @param instanceRepository
	 * @param converter
	 * @param auditlogsRepository
	 */
	@Autowired
	public AuditLogsServiceImpl(InstanceRepository instanceRepository, ConversionService converter, AuditLogsRepository auditlogsRepository){
		this.auditlogsRepository =auditlogsRepository; 
		 this.converter = converter;
		 this.instanceRepository = instanceRepository;
	}

	/**
	 * 
	 * @param AuditLogs
	 */
	@Override @Transactional(readOnly = false)
	public AuditLogsTo createauditlogs(AuditLogsInput AuditLogs){
		AuditLogsModel model = converter.convert(AuditLogs,AuditLogsModel.class); 
		 model.setId(0);
		 InstanceModel instanceModel = instanceRepository.findById(AuditLogs.getInstance().getId()).get(); 
		model.setInstance(instanceModel); 
		 
		 model= auditlogsRepository.save(model); 
		 return converter.convert(model, AuditLogsTo.class); 
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteauditlogs(int auditlogsId){
		AuditLogsModel auditlogs = auditlogsRepository.findById(auditlogsId).orElseThrow(() -> new RuntimeException("AuditLogs not found")); 
		 auditlogs.setDeleted(true); 
		  auditlogsRepository.save(auditlogs); 
		 return auditlogsId;
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	@Override
	public Optional<AuditLogsTo> findauditlogs(int auditlogsId){
		if(auditlogsId <1) 
		 {return Optional.empty();} 
		 return auditlogsRepository.findById(auditlogsId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,AuditLogsTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<AuditLogsTo> findauditlogss(PageInput page, SortInput sort, List<FilterInput> filters){
		return auditlogsRepository.findByCriteria(AuditLogsModel.class,filters,sort,page).map(r -> converter.convert(r,AuditLogsTo.class));
	}

	/**
	 * 
	 * @param auditlogsId
	 */
	public Optional<InstanceTo> findinstance(int auditlogsId){
		return auditlogsRepository.findById(auditlogsId).map(r -> converter.convert(r.getInstance(),InstanceTo.class));
	}

	/**
	 * 
	 * @param auditlogs
	 */
	@Override @Transactional(readOnly = false)
	public AuditLogsTo modifyauditlogs(AuditLogsInput auditlogs){
		AuditLogsModel target= auditlogsRepository.findById(auditlogs.getId()).orElseThrow(() -> new RuntimeException("AuditLogs not found")); 
		 AuditLogsModel source= converter.convert(auditlogs,AuditLogsModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(auditlogsRepository.save(target), AuditLogsTo.class);
	}

}