///////////////////////////////////////////////////////////
//  PersonServiceImpl.java
//  Macromedia ActionScript Implementation of the Class PersonServiceImpl
//  Generated by Enterprise Architect
//  Created on:      10-Sep-2020 10:44:11 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.model.LanguageModel;
import org.ebs.model.repos.LanguageRepository;
import org.ebs.model.repos.PersonRepository;
import org.ebs.model.repos.RequestRepository;
import org.ebs.model.repos.AddressRepository;
import org.ebs.model.repos.CollaboratorRepository;
import org.ebs.model.repos.DonorRepository;
import org.ebs.model.repos.PartnerRepository;
import org.ebs.model.repos.VendorRepository;
import org.ebs.model.repos.ProjectRepository;
import org.ebs.model.repos.UserRepository;
import org.ebs.model.repos.TeamRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.Input.PersonInput;
import org.ebs.model.PersonModel;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.DonorTo;
import org.ebs.services.to.PartnerTo;
import org.ebs.services.to.VendorTo;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.to.UserTo;
import org.ebs.services.to.RequestTo;
import org.ebs.services.to.AddressTo;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.CollaboratorTo;
import org.ebs.services.to.TeamTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 10-Sep-2020 10:44:11 PM
 */
@Service @Transactional(readOnly = true)
  class PersonServiceImpl implements PersonService {

	private PersonRepository personRepository;
	private ConversionService converter;
	private TenantRepository tenantRepository;
	private LanguageRepository languageRepository;
	private RequestRepository requestRepository;
	private AddressRepository addressRepository;
	private CollaboratorRepository collaboratorRepository;
	private DonorRepository donorRepository;
	private PartnerRepository partnerRepository;
	private VendorRepository vendorRepository;
	private ProjectRepository projectRepository;
	private UserRepository userRepository;
	private TeamRepository teamRepository;

	/**
	 * 
	 * @param Person
	 */
	@Override @Transactional(readOnly = false)
	public PersonTo createPerson(PersonInput Person){
		PersonModel model = converter.convert(Person,PersonModel.class); 
		 model.setId(0);
		 TenantModel tenantModel = tenantRepository.findById(Person.getTenant().getId()).get(); 
		model.setTenant(tenantModel); 
		LanguageModel languageModel = languageRepository.findById(Person.getLanguage().getId()).get(); 
		model.setLanguage(languageModel); 
		 
		 model= personRepository.save(model); 
		 return converter.convert(model, PersonTo.class); 
	}

	/**
	 * 
	 * @param personId
	 */
	@Override @Transactional(readOnly = false)
	public int deletePerson(int personId){
		PersonModel person = personRepository.findById(personId).orElseThrow(() -> new RuntimeException("Person not found")); 
		 person.setDeleted(true); 
		  personRepository.save(person); 
		 return personId;
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<AddressTo> findAddresss(int personId){
		return personRepository.findById(personId).get().getAddresss().stream().map(e->converter.convert(e, AddressTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<CollaboratorTo> findCollaborators(int personId){
		return collaboratorRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,CollaboratorTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<DonorTo> findDonors(int personId){
		return donorRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,DonorTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<LanguageTo> findLanguage(int personId){
		return personRepository.findById(personId).map(r -> converter.convert(r.getLanguage(),LanguageTo.class));
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<PartnerTo> findPartners(int personId){
		return partnerRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,PartnerTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	@Override
	public Optional<PersonTo> findPerson(int personId){
		if(personId <1) 
		 {return Optional.empty();} 
		 return personRepository.findById(personId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,PersonTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<PersonTo> findPersons(PageInput page, SortInput sort, List<FilterInput> filters){
		return personRepository.findByCriteria(PersonModel.class,filters,sort,page).map(r -> converter.convert(r,PersonTo.class));
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<ProjectTo> findProjects(int personId){
		return projectRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,ProjectTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<RequestTo> findRequests(int personId){
		return requestRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,RequestTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<TeamTo> findTeams(int personId){
		return personRepository.findById(personId).get().getTeams().stream().map(e->converter.convert(e, TeamTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Optional<TenantTo> findTenant(int personId){
		return personRepository.findById(personId).map(r -> converter.convert(r.getTenant(),TenantTo.class));
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<UserTo> findUsers(int personId){
		return userRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,UserTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personId
	 */
	public Set<VendorTo> findVendors(int personId){
		return vendorRepository.findByPersonId(personId).stream().map(e -> converter.convert(e,VendorTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param person
	 */
	@Override @Transactional(readOnly = false)
	public PersonTo modifyPerson(PersonInput person){
		PersonModel target= personRepository.findById(person.getId()).orElseThrow(() -> new RuntimeException("Person not found")); 
		 PersonModel source= converter.convert(person,PersonModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(personRepository.save(target), PersonTo.class);
	}

	/**
	 * 
	 * @param tenantRepository
	 * @param userRepository
	 * @param projectRepository
	 * @param vendorRepository
	 * @param partnerRepository
	 * @param donorRepository
	 * @param collaboratorRepository
	 * @param addressRepository
	 * @param requestRepository
	 * @param converter
	 * @param personRepository
	 * @param teamRepository
	 * @param languageRepository
	 */
	@Autowired
	public PersonServiceImpl(TenantRepository tenantRepository, UserRepository userRepository, ProjectRepository projectRepository, VendorRepository vendorRepository, PartnerRepository partnerRepository, DonorRepository donorRepository, CollaboratorRepository collaboratorRepository, AddressRepository addressRepository, RequestRepository requestRepository, ConversionService converter, PersonRepository personRepository, TeamRepository teamRepository, LanguageRepository languageRepository){
		this.personRepository =personRepository; 
		 this.converter = converter;
		 this.requestRepository = requestRepository;
		 this.addressRepository = addressRepository;
		 this.tenantRepository = tenantRepository;
		 this.collaboratorRepository = collaboratorRepository;
		 this.languageRepository = languageRepository;
		 this.donorRepository = donorRepository;
		 this.partnerRepository = partnerRepository;
		 this.vendorRepository = vendorRepository;
		 this.projectRepository = projectRepository;
		 this.userRepository = userRepository;
		 this.teamRepository = teamRepository;
	}

}