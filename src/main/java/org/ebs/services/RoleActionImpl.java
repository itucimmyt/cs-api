///////////////////////////////////////////////////////////
//  RoleActionImpl.java
//  Macromedia ActionScript Implementation of the Class RoleActionImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:07 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.model.ActionModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.model.RoleModel;
import org.ebs.model.repos.RoleRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.to.Input.RoleActionInput;
import org.ebs.model.RoleActionModel;
import org.ebs.model.repos.RoleActionRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:07 PM
 */
@Service @Transactional(readOnly = true)
public class RoleActionImpl implements RoleActionService {

	private RoleActionRepository roleactionRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private ActionRepository actionRepository;
	@Autowired
	private RoleRepository roleRepository;

	/**
	 * 
	 * @param RoleAction
	 */
	@Override @Transactional(readOnly = false)
	public RoleActionTo createRoleAction(RoleActionInput RoleAction){
		RoleActionModel model = converter.convert(RoleAction,RoleActionModel.class); 
		 model.setId(0);
		 ActionModel actionModel = actionRepository.findById(RoleAction.getAction().getId()).get(); 
		model.setAction(actionModel); 
		RoleModel roleModel = roleRepository.findById(RoleAction.getRole().getId()).get(); 
		model.setRole(roleModel); 
		 
		 model= roleactionRepository.save(model); 
		 return converter.convert(model, RoleActionTo.class); 
	}

	/**
	 * 
	 * @param idroleaction
	 */
	@Override @Transactional(readOnly = false)
	public int deleteRoleAction(int idroleaction){
		RoleActionModel roleaction = roleactionRepository.findById(idroleaction).orElseThrow(() -> new RuntimeException("Request not found")); 
		 roleaction.setDeleted(true); 
		  roleactionRepository.save(roleaction); 
		 return idroleaction;
	}

	/**
	 * 
	 * @param roleactionId
	 */
	@Override
	public Optional<RoleActionTo> findRoleAction(int roleactionId){
		if(roleactionId <1) 
		 {return Optional.empty();} 
		 return roleactionRepository.findById(roleactionId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,RoleActionTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<RoleActionTo> findRoleActions(PageInput page, SortInput sort, List<FilterInput> filters){
		return roleactionRepository.findByCriteria(RoleActionModel.class,filters,sort,page).map(r -> converter.convert(r,RoleActionTo.class));
	}

	/**
	 * 
	 * @param roleaction
	 */
	@Override @Transactional(readOnly = false)
	public RoleActionTo modifyRoleAction(RoleActionInput roleaction){
		RoleActionModel target= roleactionRepository.findById(roleaction.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 RoleActionModel source= converter.convert(roleaction,RoleActionModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(roleactionRepository.save(target), RoleActionTo.class);
	}

	/**
	 * 
	 * @param roleactionRepository
	 */
	@Autowired
	public RoleActionImpl(RoleActionRepository roleactionRepository){
		this.roleactionRepository =roleactionRepository;
	}

}