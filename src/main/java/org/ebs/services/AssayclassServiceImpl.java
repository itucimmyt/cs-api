///////////////////////////////////////////////////////////
//  AssayclassServiceImpl.java
//  Macromedia ActionScript Implementation of the Class AssayclassServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Aug-2020 2:59:03 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.services.to.AssayclassTo;
import org.ebs.services.to.Input.AssayclassInput;
import org.ebs.model.AssayclassModel;
import org.ebs.model.ServiceModel;
import org.ebs.model.repos.ServiceRepository;
import org.ebs.model.repos.AssayclassRepository;
import org.ebs.model.repos.TechnologyPlatformRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.TechnologyPlatformTo;
import org.ebs.services.to.ServiceTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Aug-2020 2:59:03 PM
 */
@Service @Transactional(readOnly = true)
  class AssayclassServiceImpl implements AssayclassService {

	private AssayclassRepository assayclassRepository;
	private ConversionService converter;
	private ServiceRepository serviceRepository;
	public TechnologyPlatformRepository technologyplatformRepository;

	/**
	 * 
	 * @param serviceRepository
	 * @param technologyplatformRepository
	 * @param converter
	 * @param assayclassRepository
	 */
	@Autowired
	public AssayclassServiceImpl(ServiceRepository serviceRepository, TechnologyPlatformRepository technologyplatformRepository, ConversionService converter, AssayclassRepository assayclassRepository){
		this.assayclassRepository =assayclassRepository; 
		 this.converter = converter;
		 this.technologyplatformRepository = technologyplatformRepository;
		 this.serviceRepository = serviceRepository;
	}

	/**
	 * 
	 * @param Assayclass
	 */
	@Override @Transactional(readOnly = false)
	public AssayclassTo createAssayclass(AssayclassInput Assayclass){
		AssayclassModel model = converter.convert(Assayclass,AssayclassModel.class); 
		 model.setId(0);
		 ServiceModel serviceModel = serviceRepository.findById(Assayclass.getservice().getId()).get(); 
		model.setservice(serviceModel); 
		 
		 model= assayclassRepository.save(model); 
		 return converter.convert(model, AssayclassTo.class); 
	}

	/**
	 * 
	 * @param assayclassId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteAssayclass(int assayclassId){
		AssayclassModel assayclass = assayclassRepository.findById(assayclassId).orElseThrow(() -> new RuntimeException("Assayclass not found")); 
		 assayclass.setDeleted(true); 
		  assayclassRepository.save(assayclass); 
		 return assayclassId;
	}

	/**
	 * 
	 * @param assayclassId
	 */
	@Override
	public Optional<AssayclassTo> findAssayclass(int assayclassId){
		if(assayclassId <1) 
		 {return Optional.empty();} 
		 return assayclassRepository.findById(assayclassId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,AssayclassTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<AssayclassTo> findAssayclasss(PageInput page, SortInput sort, List<FilterInput> filters){
		return assayclassRepository.findByCriteria(AssayclassModel.class,filters,sort,page).map(r -> converter.convert(r,AssayclassTo.class));
	}

	/**
	 * 
	 * @param assayclassId
	 */
	public Optional<ServiceTo> findService(int assayclassId){
		return assayclassRepository.findById(assayclassId).map(r -> converter.convert(r.getservice(),ServiceTo.class));
	}

	/**
	 * 
	 * @param assayclass
	 */
	@Override @Transactional(readOnly = false)
	public AssayclassTo modifyAssayclass(AssayclassInput assayclass){
		AssayclassModel target= assayclassRepository.findById(assayclass.getId()).orElseThrow(() -> new RuntimeException("Assayclass not found")); 
		 AssayclassModel source= converter.convert(assayclass,AssayclassModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(assayclassRepository.save(target), AssayclassTo.class);
	}

}