///////////////////////////////////////////////////////////
//  WorkflowStatusTypeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowStatusTypeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      10-Sep-2020 10:45:20 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.repos.WorkflowStatusRepository;
import org.ebs.model.repos.WorkflowStatusTypeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.to.Input.WorkflowStatusTypeInput;
import org.ebs.model.WorkflowStatusTypeModel;
import org.ebs.services.to.WorkflowStatusTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 10-Sep-2020 10:45:20 PM
 */
@Service @Transactional(readOnly = true)
  class WorkflowStatusTypeServiceImpl implements WorkflowStatusTypeService {

	private WorkflowStatusTypeRepository workflowstatustypeRepository;
	private ConversionService converter;
	private WorkflowStatusRepository workflowstatusRepository;

	/**
	 * 
	 * @param WorkflowStatusType
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStatusTypeTo createWorkflowStatusType(WorkflowStatusTypeInput WorkflowStatusType){
		WorkflowStatusTypeModel model = converter.convert(WorkflowStatusType,WorkflowStatusTypeModel.class); 
		 model.setId(0);
		  
		 model= workflowstatustypeRepository.save(model); 
		 return converter.convert(model, WorkflowStatusTypeTo.class); 
	}

	/**
	 * 
	 * @param workflowStatusTypeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowStatusType(int workflowStatusTypeId){
		WorkflowStatusTypeModel workflowstatustype = workflowstatustypeRepository.findById(workflowStatusTypeId).orElseThrow(() -> new RuntimeException("WorkflowStatusType not found")); 
		 workflowstatustype.setDeleted(true); 
		  workflowstatustypeRepository.save(workflowstatustype); 
		 return workflowStatusTypeId;
	}

	/**
	 * 
	 * @param workflowstatustypeId
	 */
	public Set<WorkflowStatusTo> findWorkflowStatuss(int workflowstatustypeId){
		return workflowstatusRepository.findByWorkflowstatustypeId(workflowstatustypeId).stream().map(e -> converter.convert(e,WorkflowStatusTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowStatusTypeId
	 */
	@Override
	public Optional<WorkflowStatusTypeTo> findWorkflowStatusType(int workflowStatusTypeId){
		if(workflowStatusTypeId <1) 
		 {return Optional.empty();} 
		 return workflowstatustypeRepository.findById(workflowStatusTypeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowStatusTypeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowStatusTypeTo> findWorkflowStatusTypes(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowstatustypeRepository.findByCriteria(WorkflowStatusTypeModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowStatusTypeTo.class));
	}

	/**
	 * 
	 * @param workflowStatusType
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStatusTypeTo modifyWorkflowStatusType(WorkflowStatusTypeInput workflowStatusType){
		WorkflowStatusTypeModel target= workflowstatustypeRepository.findById(workflowStatusType.getId()).orElseThrow(() -> new RuntimeException("WorkflowStatusType not found")); 
		 WorkflowStatusTypeModel source= converter.convert(workflowStatusType,WorkflowStatusTypeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowstatustypeRepository.save(target), WorkflowStatusTypeTo.class);
	}

	/**
	 * 
	 * @param workflowstatusRepository
	 * @param converter
	 * @param workflowstatustypeRepository
	 */
	@Autowired
	public WorkflowStatusTypeServiceImpl(WorkflowStatusRepository workflowstatusRepository, ConversionService converter, WorkflowStatusTypeRepository workflowstatustypeRepository){
		this.workflowstatustypeRepository =workflowstatustypeRepository; 
		 this.converter = converter;
		 this.workflowstatusRepository = workflowstatusRepository;
	}

}