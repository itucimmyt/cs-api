///////////////////////////////////////////////////////////
//  DomainServiceImpl.java
//  Macromedia ActionScript Implementation of the Class DomainServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:26 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.ProductRepository;
import org.ebs.model.repos.DomainRepository;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.model.repos.EntityReferenceRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.DomainTo;
import org.ebs.services.to.Input.DomainInput;
import org.ebs.model.DomainModel;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ProductTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:26 AM
 */
@Service @Transactional(readOnly = true)
  class DomainServiceImpl implements DomainService {

	private DomainRepository domainRepository;
	private ConversionService converter;
	private HtmlTagRepository htmltagRepository;
	private ProductRepository productRepository;
	private InstanceRepository instanceRepository;
	private EntityReferenceRepository entityreferenceRepository;

	/**
	 * 
	 * @param Domain
	 */
	@Override @Transactional(readOnly = false)
	public DomainTo createDomain(DomainInput Domain){
		DomainModel model = converter.convert(Domain,DomainModel.class); 
		 model.setId(0);
		 HtmlTagModel htmltagModel = htmltagRepository.findById(Domain.getHtmltag().getId()).get(); 
		model.setHtmltag(htmltagModel); 
		 
		 model= domainRepository.save(model); 
		 return converter.convert(model, DomainTo.class); 
	}

	/**
	 * 
	 * @param domainId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteDomain(int domainId){
		DomainModel domain = domainRepository.findById(domainId).orElseThrow(() -> new RuntimeException("Domain not found")); 
		 domain.setDeleted(true); 
		  domainRepository.save(domain); 
		 return domainId;
	}

	/**
	 * 
	 * @param productRepository
	 * @param domainRepository
	 * @param converter
	 * @param instanceRepository
	 * @param entityreferenceRepository
	 * @param htmltagRepository
	 */
	@Autowired
	public DomainServiceImpl(ProductRepository productRepository, DomainRepository domainRepository, ConversionService converter, InstanceRepository instanceRepository, EntityReferenceRepository entityreferenceRepository, HtmlTagRepository htmltagRepository){
		this.domainRepository =domainRepository; 
		 this.converter = converter;
		 this.instanceRepository = instanceRepository;
		 this.entityreferenceRepository = entityreferenceRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.productRepository = productRepository;
	}

	/**
	 * 
	 * @param domainId
	 */
	@Override
	public Optional<DomainTo> findDomain(int domainId){
		if(domainId <1) 
		 {return Optional.empty();} 
		 return domainRepository.findById(domainId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,DomainTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<DomainTo> findDomains(PageInput page, SortInput sort, List<FilterInput> filters){
		return domainRepository.findByCriteria(DomainModel.class,filters,sort,page).map(r -> converter.convert(r,DomainTo.class));
	}

	/**
	 * 
	 * @param domainId
	 */
	public Set<EntityReferenceTo> findEntityReferences(int domainId){
		return domainRepository.findById(domainId).get().getEntityreferences().stream().map(e->converter.convert(e, EntityReferenceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param domainId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int domainId){
		return domainRepository.findById(domainId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param domainId
	 */
	public Set<InstanceTo> findInstances(int domainId){
		return domainRepository.findById(domainId).get().getInstances().stream().map(e->converter.convert(e, InstanceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param domainId
	 */
	public Set<ProductTo> findProducts(int domainId){
		return productRepository.findByDomainId(domainId).stream().map(e -> converter.convert(e,ProductTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param domain
	 */
	@Override @Transactional(readOnly = false)
	public DomainTo modifyDomain(DomainInput domain){
		DomainModel target= domainRepository.findById(domain.getId()).orElseThrow(() -> new RuntimeException("Domain not found")); 
		 DomainModel source= converter.convert(domain,DomainModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(domainRepository.save(target), DomainTo.class);
	}

}