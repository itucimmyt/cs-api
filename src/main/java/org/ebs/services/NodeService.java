///////////////////////////////////////////////////////////
//  NodeService.java
//  Macromedia ActionScript Implementation of the Interface NodeService
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:39 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.springframework.data.domain.Page;
import java.util.Set;
import org.ebs.services.to.NodeTo;
import org.ebs.services.to.Input.NodeInput;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.EventTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.ProductTo;
import org.ebs.services.to.NodeCfTo;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.ProductFunctionTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:39 AM
 */
public interface NodeService {

	/**
	 * 
	 * @param Node
	 */
	public NodeTo createNode(NodeInput Node);

	/**
	 * 
	 * @param nodeId
	 */
	public int deleteNode(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Set<EventTo> findEvents(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<NodeTo> findNode(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Set<NodeCfTo> findNodeCfs(int nodeId);

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<NodeTo> findNodes(PageInput page, SortInput sort, List<FilterInput> filters);

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<ProcessTo> findProcess(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<ProductTo> findProduct(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Set<ProductFunctionTo> findProductFunctions(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Set<StageTo> findStages(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<WorkflowTo> findWorkflow(int nodeId);

	/**
	 * 
	 * @param nodeId
	 */
	public Set<WorkflowTo> findWorkflows(int nodeId);

	/**
	 * 
	 * @param node
	 */
	public NodeTo modifyNode(NodeInput node);

}