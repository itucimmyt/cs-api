///////////////////////////////////////////////////////////
//  VendorImpl.java
//  Macromedia ActionScript Implementation of the Class VendorImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:33 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.CountryModel;
import org.ebs.model.repos.CountryRepository;
import org.ebs.model.DataFormatModel;
import org.ebs.model.repos.DataFormatRepository;
import org.ebs.model.PersonModel;
import org.ebs.model.repos.PersonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.VendorTo;
import org.ebs.services.to.Input.VendorInput;
import org.ebs.model.VendorModel;
import org.ebs.model.repos.VendorRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:33 PM
 */
@Service @Transactional(readOnly = true)
public class VendorImpl implements VendorService {

	private VendorRepository vendorRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private CountryRepository countryRepository;
	@Autowired
	private DataFormatRepository dataformatRepository;
	@Autowired
	private PersonRepository personRepository;

	/**
	 * 
	 * @param Vendor
	 */
	@Override @Transactional(readOnly = false)
	public VendorTo createVendor(VendorInput Vendor){
		VendorModel model = converter.convert(Vendor,VendorModel.class); 
		 model.setId(0);
		 CountryModel countryModel = countryRepository.findById(Vendor.getCountry().getId()).get(); 
		model.setCountry(countryModel); 
		DataFormatModel dataformatModel = dataformatRepository.findById(Vendor.getDataFormat().getId()).get(); 
		model.setDataFormat(dataformatModel); 
		PersonModel personModel = personRepository.findById(Vendor.getPerson().getId()).get(); 
		model.setPerson(personModel); 
		 
		 model= vendorRepository.save(model); 
		 return converter.convert(model, VendorTo.class); 
	}

	/**
	 * 
	 * @param idvendor
	 */
	@Override @Transactional(readOnly = false)
	public int deleteVendor(int idvendor){
		VendorModel vendor = vendorRepository.findById(idvendor).orElseThrow(() -> new RuntimeException("Request not found")); 
		 vendor.setDeleted(true); 
		  vendorRepository.save(vendor); 
		 return idvendor;
	}

	/**
	 * 
	 * @param vendorId
	 */
	@Override
	public Optional<VendorTo> findVendor(int vendorId){
		if(vendorId <1) 
		 {return Optional.empty();} 
		 return vendorRepository.findById(vendorId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,VendorTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<VendorTo> findVendors(PageInput page, SortInput sort, List<FilterInput> filters){
		return vendorRepository.findByCriteria(VendorModel.class,filters,sort,page).map(r -> converter.convert(r,VendorTo.class));
	}

	/**
	 * 
	 * @param vendor
	 */
	@Override @Transactional(readOnly = false)
	public VendorTo modifyVendor(VendorInput vendor){
		VendorModel target= vendorRepository.findById(vendor.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 VendorModel source= converter.convert(vendor,VendorModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(vendorRepository.save(target), VendorTo.class);
	}

	/**
	 * 
	 * @param vendorRepository
	 */
	@Autowired
	public VendorImpl(VendorRepository vendorRepository){
		this.vendorRepository =vendorRepository;
	}

}