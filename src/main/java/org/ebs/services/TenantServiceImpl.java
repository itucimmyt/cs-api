///////////////////////////////////////////////////////////
//  TenantServiceImpl.java
//  Macromedia ActionScript Implementation of the Class TenantServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:14:38 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.UserRepository;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.OrganizationModel;
import org.ebs.model.repos.OrganizationRepository;
import org.ebs.model.AuthenticationTypeModel;
import org.ebs.model.repos.AuthenticationTypeRepository;
import org.ebs.model.CustomerModel;
import org.ebs.model.repos.CustomerRepository;
import org.ebs.model.repos.TenantRepository;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.model.repos.PersonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.Input.TenantInput;
import org.ebs.model.TenantModel;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.UserTo;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.to.AuthenticationTypeTo;
import org.ebs.services.to.CustomerTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:14:38 PM
 */
@Service @Transactional(readOnly = true)
  class TenantServiceImpl implements TenantService {

	private TenantRepository tenantRepository;
	private ConversionService converter;
	private UserRepository userRepository;
	private InstanceRepository instanceRepository;
	private WorkflowRepository workflowRepository;
	private OrganizationRepository organizationRepository;
	private AuthenticationTypeRepository authenticationtypeRepository;
	private CustomerRepository customerRepository;
	public ProgramRepository programRepository;
	public PersonRepository personRepository;

	/**
	 * 
	 * @param Tenant
	 */
	@Override @Transactional(readOnly = false)
	public TenantTo createTenant(TenantInput Tenant){
		TenantModel model = converter.convert(Tenant,TenantModel.class); 
		 model.setId(0);
		 OrganizationModel organizationModel = organizationRepository.findById(Tenant.getOrganization().getId()).get(); 
		model.setOrganization(organizationModel); 
		AuthenticationTypeModel authenticationtypeModel = authenticationtypeRepository.findById(Tenant.getAuthenticationType().getId()).get(); 
		model.setAuthenticationType(authenticationtypeModel); 
		CustomerModel customerModel = customerRepository.findById(Tenant.getCustomer().getId()).get(); 
		model.setCustomer(customerModel); 
		 
		 model= tenantRepository.save(model); 
		 return converter.convert(model, TenantTo.class); 
	}

	/**
	 * 
	 * @param tenantId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTenant(int tenantId){
		TenantModel tenant = tenantRepository.findById(tenantId).orElseThrow(() -> new RuntimeException("Tenant not found")); 
		 tenant.setDeleted(true); 
		  tenantRepository.save(tenant); 
		 return tenantId;
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<AuthenticationTypeTo> findAuthenticationType(int tenantId){
		return tenantRepository.findById(tenantId).map(r -> converter.convert(r.getAuthenticationType(),AuthenticationTypeTo.class));
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<CustomerTo> findCustomer(int tenantId){
		return tenantRepository.findById(tenantId).map(r -> converter.convert(r.getCustomer(),CustomerTo.class));
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Set<InstanceTo> findInstances(int tenantId){
		return instanceRepository.findByTenantId(tenantId).stream().map(e -> converter.convert(e,InstanceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Optional<OrganizationTo> findOrganization(int tenantId){
		return tenantRepository.findById(tenantId).map(r -> converter.convert(r.getOrganization(),OrganizationTo.class));
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Set<PersonTo> findPersons(int tenantId){
		return personRepository.findByTenantId(tenantId).stream().map(e -> converter.convert(e,PersonTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Set<ProgramTo> findPrograms(int tenantId){
		return programRepository.findByTenantId(tenantId).stream().map(e -> converter.convert(e,ProgramTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantId
	 */
	@Override
	public Optional<TenantTo> findTenant(int tenantId){
		if(tenantId <1) 
		 {return Optional.empty();} 
		 return tenantRepository.findById(tenantId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TenantTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TenantTo> findTenants(PageInput page, SortInput sort, List<FilterInput> filters){
		return tenantRepository.findByCriteria(TenantModel.class,filters,sort,page).map(r -> converter.convert(r,TenantTo.class));
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Set<UserTo> findUsers(int tenantId){
		return userRepository.findByTenantId(tenantId).stream().map(e -> converter.convert(e,UserTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenantId
	 */
	public Set<WorkflowTo> findWorkflows(int tenantId){
		return workflowRepository.findByTenantId(tenantId).stream().map(e -> converter.convert(e,WorkflowTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param tenant
	 */
	@Override @Transactional(readOnly = false)
	public TenantTo modifyTenant(TenantInput tenant){
		TenantModel target= tenantRepository.findById(tenant.getId()).orElseThrow(() -> new RuntimeException("Tenant not found")); 
		 TenantModel source= converter.convert(tenant,TenantModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(tenantRepository.save(target), TenantTo.class);
	}

	/**
	 * 
	 * @param personRepository
	 * @param tenantRepository
	 * @param converter
	 * @param programRepository
	 * @param userRepository
	 * @param instanceRepository
	 * @param workflowRepository
	 * @param organizationRepository
	 * @param authenticationtypeRepository
	 * @param customerRepository
	 */
	@Autowired
	public TenantServiceImpl(PersonRepository personRepository, TenantRepository tenantRepository, ConversionService converter, ProgramRepository programRepository, UserRepository userRepository, InstanceRepository instanceRepository, WorkflowRepository workflowRepository, OrganizationRepository organizationRepository, AuthenticationTypeRepository authenticationtypeRepository, CustomerRepository customerRepository){
		this.tenantRepository =tenantRepository; 
		 this.converter = converter;
		 this.programRepository = programRepository;
		 this.userRepository = userRepository;
		 this.instanceRepository = instanceRepository;
		 this.workflowRepository = workflowRepository;
		 this.organizationRepository = organizationRepository;
		 this.authenticationtypeRepository = authenticationtypeRepository;
		 this.customerRepository = customerRepository;
		 this.personRepository = personRepository;
	}

}