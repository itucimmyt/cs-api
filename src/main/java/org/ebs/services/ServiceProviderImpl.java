///////////////////////////////////////////////////////////
//  ServiceProviderImpl.java
//  Macromedia ActionScript Implementation of the Class ServiceProviderImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:15 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.ServiceProviderModel;
import org.ebs.model.repos.ServiceProviderRepository;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.to.Input.ServiceProviderInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:15 PM
 */
@Service @Transactional(readOnly = true)
public class ServiceProviderImpl implements ServiceProviderService {

	private ServiceProviderRepository serviceproviderRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param ServiceProvider
	 */
	@Override @Transactional(readOnly = false)
	public ServiceProviderTo createServiceProvider(ServiceProviderInput ServiceProvider){
		ServiceProviderModel model = converter.convert(ServiceProvider,ServiceProviderModel.class); 
		 model.setId(0);
		  
		 model= serviceproviderRepository.save(model); 
		 return converter.convert(model, ServiceProviderTo.class); 
	}

	/**
	 * 
	 * @param idserviceprovider
	 */
	@Override @Transactional(readOnly = false)
	public int deleteServiceProvider(int idserviceprovider){
		ServiceProviderModel serviceprovider = serviceproviderRepository.findById(idserviceprovider).orElseThrow(() -> new RuntimeException("Request not found")); 
		 serviceprovider.setDeleted(true); 
		  serviceproviderRepository.save(serviceprovider); 
		 return idserviceprovider;
	}

	/**
	 * 
	 * @param serviceproviderId
	 */
	@Override
	public Optional<ServiceProviderTo> findServiceProvider(int serviceproviderId){
		if(serviceproviderId <1) 
			{return Optional.empty();} 
			return serviceproviderRepository.findById(serviceproviderId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,ServiceProviderTo.class));
		}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<ServiceProviderTo> findServiceProviders(PageInput page, SortInput sort, List<FilterInput> filters){
		return serviceproviderRepository.findByCriteria(ServiceProviderModel.class,filters,sort,page).map(r -> converter.convert(r,ServiceProviderTo.class));
	}

	/**
	 * 
	 * @param serviceprovider
	 */
	@Override @Transactional(readOnly = false)
	public ServiceProviderTo modifyServiceProvider(ServiceProviderInput serviceprovider){
		ServiceProviderModel target= serviceproviderRepository.findById(serviceprovider.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 ServiceProviderModel source= converter.convert(serviceprovider,ServiceProviderModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(serviceproviderRepository.save(target), ServiceProviderTo.class);
	}

	/**
	 * 
	 * @param serviceproviderRepository
	 */
	@Autowired
	public ServiceProviderImpl(ServiceProviderRepository serviceproviderRepository){
		this.serviceproviderRepository =serviceproviderRepository;
	}

}