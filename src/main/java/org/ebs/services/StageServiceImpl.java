///////////////////////////////////////////////////////////
//  StageServiceImpl.java
//  Macromedia ActionScript Implementation of the Class StageServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:55 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.PhaseModel;
import org.ebs.model.repos.PhaseRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.StageRepository;
import org.ebs.model.repos.ProductFunctionRepository;
import org.ebs.model.repos.EventRepository;
import org.ebs.model.repos.NodeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.Input.StageInput;
import org.ebs.model.StageModel;
import org.ebs.services.to.EventTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.NodeTo;
import org.ebs.services.to.ProductFunctionTo;
import org.ebs.services.to.PhaseTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:55 AM
 */
@Service @Transactional(readOnly = true)
  class StageServiceImpl implements StageService {

	private StageRepository stageRepository;
	private ConversionService converter;
	private PhaseRepository phaseRepository;
	private HtmlTagRepository htmltagRepository;
	private ProductFunctionRepository productfunctionRepository;
	private EventRepository eventRepository;
	private NodeRepository nodeRepository;

	/**
	 * 
	 * @param Stage
	 */
	@Override @Transactional(readOnly = false)
	public StageTo createStage(StageInput Stage){
		StageModel model = converter.convert(Stage,StageModel.class); 
		 model.setId(0);
		 PhaseModel phaseModel = phaseRepository.findById(Stage.getPhase().getId()).get(); 
		model.setPhase(phaseModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(Stage.getHtmltag().getId()).get(); 
		model.setHtmltag(htmltagModel); 
		 
		 model= stageRepository.save(model); 
		 return converter.convert(model, StageTo.class); 
	}

	/**
	 * 
	 * @param stageId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteStage(int stageId){
		StageModel stage = stageRepository.findById(stageId).orElseThrow(() -> new RuntimeException("Stage not found")); 
		 stage.setDeleted(true); 
		  stageRepository.save(stage); 
		 return stageId;
	}

	/**
	 * 
	 * @param stageId
	 */
	public Set<EventTo> findEvents(int stageId){
		return eventRepository.findByStageId(stageId).stream().map(e -> converter.convert(e,EventTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param stageId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int stageId){
		return stageRepository.findById(stageId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param stageId
	 */
	public Set<NodeTo> findNodes(int stageId){
		return stageRepository.findById(stageId).get().getNodes().stream().map(e->converter.convert(e, NodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param stageId
	 */
	public Optional<PhaseTo> findPhase(int stageId){
		return stageRepository.findById(stageId).map(r -> converter.convert(r.getPhase(),PhaseTo.class));
	}

	/**
	 * 
	 * @param stageId
	 */
	public Set<ProductFunctionTo> findProductFunctions(int stageId){
		return productfunctionRepository.findByStageId(stageId).stream().map(e -> converter.convert(e,ProductFunctionTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param stageId
	 */
	@Override
	public Optional<StageTo> findStage(int stageId){
		if(stageId <1) 
		 {return Optional.empty();} 
		 return stageRepository.findById(stageId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,StageTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<StageTo> findStages(PageInput page, SortInput sort, List<FilterInput> filters){
		return stageRepository.findByCriteria(StageModel.class,filters,sort,page).map(r -> converter.convert(r,StageTo.class));
	}

	/**
	 * 
	 * @param stage
	 */
	@Override @Transactional(readOnly = false)
	public StageTo modifyStage(StageInput stage){
		StageModel target= stageRepository.findById(stage.getId()).orElseThrow(() -> new RuntimeException("Stage not found")); 
		 StageModel source= converter.convert(stage,StageModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(stageRepository.save(target), StageTo.class);
	}

	/**
	 * 
	 * @param nodeRepository
	 * @param stageRepository
	 * @param converter
	 * @param productfunctionRepository
	 * @param phaseRepository
	 * @param eventRepository
	 * @param htmltagRepository
	 */
	@Autowired
	public StageServiceImpl(NodeRepository nodeRepository, StageRepository stageRepository, ConversionService converter, ProductFunctionRepository productfunctionRepository, PhaseRepository phaseRepository, EventRepository eventRepository, HtmlTagRepository htmltagRepository){
		this.stageRepository =stageRepository; 
		 this.converter = converter;
		 this.productfunctionRepository = productfunctionRepository;
		 this.phaseRepository = phaseRepository;
		 this.eventRepository = eventRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.nodeRepository = nodeRepository;
	}

}