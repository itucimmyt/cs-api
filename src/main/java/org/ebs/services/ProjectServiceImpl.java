///////////////////////////////////////////////////////////
//  ProjectServiceImpl.java
//  Macromedia ActionScript Implementation of the Class ProjectServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:11:51 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.ProgramModel;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.model.PersonModel;
import org.ebs.model.repos.PersonRepository;
import org.ebs.model.repos.ProjectRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.ProjectTo;
import org.ebs.services.to.Input.ProjectInput;
import org.ebs.model.ProjectModel;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:11:51 AM
 */
@Service @Transactional(readOnly = true)
  class ProjectServiceImpl implements ProjectService {

	private ProjectRepository projectRepository;
	private ConversionService converter;
	private ProgramRepository programRepository;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param Project
	 */
	@Override @Transactional(readOnly = false)
	public ProjectTo createProject(ProjectInput Project){
		ProjectModel model = converter.convert(Project,ProjectModel.class); 
		 model.setId(0);
		 ProgramModel programModel = programRepository.findById(Project.getProgram().getId()).get(); 
		model.setProgram(programModel); 
		PersonModel personModel = personRepository.findById(Project.getPerson().getId()).get(); 
		model.setPerson(personModel); 
		 
		 model= projectRepository.save(model); 
		 return converter.convert(model, ProjectTo.class); 
	}

	/**
	 * 
	 * @param projectId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteProject(int projectId){
		ProjectModel project = projectRepository.findById(projectId).orElseThrow(() -> new RuntimeException("Project not found")); 
		 project.setDeleted(true); 
		  projectRepository.save(project); 
		 return projectId;
	}

	/**
	 * 
	 * @param projectId
	 */
	public Optional<PersonTo> findPerson(int projectId){
		return projectRepository.findById(projectId).map(r -> converter.convert(r.getPerson(),PersonTo.class));
	}

	/**
	 * 
	 * @param projectId
	 */
	public Optional<ProgramTo> findProgram(int projectId){
		return projectRepository.findById(projectId).map(r -> converter.convert(r.getProgram(),ProgramTo.class));
	}

	/**
	 * 
	 * @param projectId
	 */
	@Override
	public Optional<ProjectTo> findProject(int projectId){
		if(projectId <1) 
		 {return Optional.empty();} 
		 return projectRepository.findById(projectId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,ProjectTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<ProjectTo> findProjects(PageInput page, SortInput sort, List<FilterInput> filters){
		return projectRepository.findByCriteria(ProjectModel.class,filters,sort,page).map(r -> converter.convert(r,ProjectTo.class));
	}

	/**
	 * 
	 * @param project
	 */
	@Override @Transactional(readOnly = false)
	public ProjectTo modifyProject(ProjectInput project){
		ProjectModel target= projectRepository.findById(project.getId()).orElseThrow(() -> new RuntimeException("Project not found")); 
		 ProjectModel source= converter.convert(project,ProjectModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(projectRepository.save(target), ProjectTo.class);
	}

	/**
	 * 
	 * @param personRepository
	 * @param programRepository
	 * @param converter
	 * @param projectRepository
	 */
	@Autowired
	public ProjectServiceImpl(PersonRepository personRepository, ProgramRepository programRepository, ConversionService converter, ProjectRepository projectRepository){
		this.projectRepository =projectRepository; 
		 this.converter = converter;
		 this.programRepository = programRepository;
		 this.personRepository = personRepository;
	}

}