///////////////////////////////////////////////////////////
//  WfInstanceServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WfInstanceServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:03:02 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.WfInstanceRepository;
import org.ebs.model.repos.StatusRepository;
import org.ebs.model.repos.EventRepository;
import org.ebs.model.repos.RequestRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WfInstanceTo;
import org.ebs.services.to.Input.WfInstanceInput;
import org.ebs.model.WfInstanceModel;
import org.ebs.services.to.StatusTo;
import org.ebs.services.to.EventTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.RequestTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:03:02 AM
 */
@Service @Transactional(readOnly = true)
  class WfInstanceServiceImpl implements WfInstanceService {

	private WfInstanceRepository wfinstanceRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	private StatusRepository statusRepository;
	private EventRepository eventRepository;
	private RequestRepository requestRepository;

	/**
	 * 
	 * @param WfInstance
	 */
	@Override @Transactional(readOnly = false)
	public WfInstanceTo createWfInstance(WfInstanceInput WfInstance){
		WfInstanceModel model = converter.convert(WfInstance,WfInstanceModel.class); 
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(WfInstance.getWorkflow().getId()).get(); 
		model.setWorkflow(workflowModel); 
		 
		 model= wfinstanceRepository.save(model); 
		 return converter.convert(model, WfInstanceTo.class); 
	}

	/**
	 * 
	 * @param wfInstanceId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWfInstance(int wfInstanceId){
		WfInstanceModel wfinstance = wfinstanceRepository.findById(wfInstanceId).orElseThrow(() -> new RuntimeException("WfInstance not found")); 
		 wfinstance.setDeleted(true); 
		  wfinstanceRepository.save(wfinstance); 
		 return wfInstanceId;
	}

	/**
	 * 
	 * @param wfinstanceId
	 */
	public Set<EventTo> findEvents(int wfinstanceId){
		return eventRepository.findByWfinstanceId(wfinstanceId).stream().map(e -> converter.convert(e,EventTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param wfinstanceId
	 */
	public Set<RequestTo> findRequests(int wfinstanceId){
		return requestRepository.findByWfinstanceId(wfinstanceId).stream().map(e -> converter.convert(e,RequestTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param wfinstanceId
	 */
	public Set<StatusTo> findStatuss(int wfinstanceId){
		return statusRepository.findByWfinstanceId(wfinstanceId).stream().map(e -> converter.convert(e,StatusTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param wfInstanceId
	 */
	@Override
	public Optional<WfInstanceTo> findWfInstance(int wfInstanceId){
		if(wfInstanceId <1) 
		 {return Optional.empty();} 
		 return wfinstanceRepository.findById(wfInstanceId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WfInstanceTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WfInstanceTo> findWfInstances(PageInput page, SortInput sort, List<FilterInput> filters){
		return wfinstanceRepository.findByCriteria(WfInstanceModel.class,filters,sort,page).map(r -> converter.convert(r,WfInstanceTo.class));
	}

	/**
	 * 
	 * @param wfinstanceId
	 */
	public Optional<WorkflowTo> findWorkflow(int wfinstanceId){
		return wfinstanceRepository.findById(wfinstanceId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 * 
	 * @param wfInstance
	 */
	@Override @Transactional(readOnly = false)
	public WfInstanceTo modifyWfInstance(WfInstanceInput wfInstance){
		WfInstanceModel target= wfinstanceRepository.findById(wfInstance.getId()).orElseThrow(() -> new RuntimeException("WfInstance not found")); 
		 WfInstanceModel source= converter.convert(wfInstance,WfInstanceModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(wfinstanceRepository.save(target), WfInstanceTo.class);
	}

	/**
	 * 
	 * @param requestRepository
	 * @param wfinstanceRepository
	 * @param converter
	 * @param statusRepository
	 * @param eventRepository
	 * @param workflowRepository
	 */
	@Autowired
	public WfInstanceServiceImpl(RequestRepository requestRepository, WfInstanceRepository wfinstanceRepository, ConversionService converter, StatusRepository statusRepository, EventRepository eventRepository, WorkflowRepository workflowRepository){
		this.wfinstanceRepository =wfinstanceRepository; 
		 this.converter = converter;
		 this.statusRepository = statusRepository;
		 this.eventRepository = eventRepository;
		 this.workflowRepository = workflowRepository;
		 this.requestRepository = requestRepository;
	}

}