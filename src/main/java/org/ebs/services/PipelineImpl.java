///////////////////////////////////////////////////////////
//  PipelineImpl.java
//  Macromedia ActionScript Implementation of the Class PipelineImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:55 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.PipelineModel;
import org.ebs.model.repos.PipelineRepository;
import org.ebs.services.to.PipelineTo;
import org.ebs.services.to.Input.PipelineInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:55 PM
 */
@Service @Transactional(readOnly = true)
public class PipelineImpl implements PipelineService {

	private PipelineRepository pipelineRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Pipeline
	 */
	@Override @Transactional(readOnly = false)
	public PipelineTo createPipeline(PipelineInput Pipeline){
		PipelineModel model = converter.convert(Pipeline,PipelineModel.class); 
		 model.setId(0);
		  
		 model= pipelineRepository.save(model); 
		 return converter.convert(model, PipelineTo.class); 
	}

	/**
	 * 
	 * @param idpipeline
	 */
	@Override @Transactional(readOnly = false)
	public int deletePipeline(int idpipeline){
		PipelineModel pipeline = pipelineRepository.findById(idpipeline).orElseThrow(() -> new RuntimeException("Request not found")); 
		 pipeline.setDeleted(true); 
		  pipelineRepository.save(pipeline); 
		 return idpipeline;
	}

	/**
	 * 
	 * @param pipelineId
	 */
	@Override
	public Optional<PipelineTo> findPipeline(int pipelineId){
		if(pipelineId <1) 
		 {return Optional.empty();} 
		 return pipelineRepository.findById(pipelineId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,PipelineTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<PipelineTo> findPipelines(PageInput page, SortInput sort, List<FilterInput> filters){
		return pipelineRepository.findByCriteria(PipelineModel.class,filters,sort,page).map(r -> converter.convert(r,PipelineTo.class));
	}

	/**
	 * 
	 * @param pipeline
	 */
	@Override @Transactional(readOnly = false)
	public PipelineTo modifyPipeline(PipelineInput pipeline){
		PipelineModel target= pipelineRepository.findById(pipeline.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 PipelineModel source= converter.convert(pipeline,PipelineModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(pipelineRepository.save(target), PipelineTo.class);
	}

	/**
	 * 
	 * @param pipelineRepository
	 */
	@Autowired
	public PipelineImpl(PipelineRepository pipelineRepository){
		this.pipelineRepository =pipelineRepository;
	}

}