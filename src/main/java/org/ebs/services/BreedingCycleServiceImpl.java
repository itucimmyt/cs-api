///////////////////////////////////////////////////////////
//  BreedingCycleServiceImpl.java
//  Macromedia ActionScript Implementation of the Class BreedingCycleServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:19:44 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.BreedingCycleRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.BreedingCycleTo;
import org.ebs.services.to.Input.BreedingCycleInput;
import org.ebs.model.BreedingCycleModel;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:19:44 AM
 */
@Service @Transactional(readOnly = true)
  class BreedingCycleServiceImpl implements BreedingCycleService {

	private BreedingCycleRepository breedingcycleRepository;
	private ConversionService converter;

	/**
	 * 
	 * @param converter
	 * @param breedingcycleRepository
	 */
	@Autowired
	public BreedingCycleServiceImpl(ConversionService converter, BreedingCycleRepository breedingcycleRepository){
		this.breedingcycleRepository =breedingcycleRepository; 
		 this.converter = converter;
	}

	/**
	 * 
	 * @param BreedingCycle
	 */
	@Override @Transactional(readOnly = false)
	public BreedingCycleTo createBreedingCycle(BreedingCycleInput BreedingCycle){
		BreedingCycleModel model = converter.convert(BreedingCycle,BreedingCycleModel.class); 
		 model.setId(0);
		  
		 model= breedingcycleRepository.save(model); 
		 return converter.convert(model, BreedingCycleTo.class); 
	}

	/**
	 * 
	 * @param breedingCycleId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteBreedingCycle(int breedingCycleId){
		BreedingCycleModel breedingcycle = breedingcycleRepository.findById(breedingCycleId).orElseThrow(() -> new RuntimeException("BreedingCycle not found")); 
		 breedingcycle.setDeleted(true); 
		  breedingcycleRepository.save(breedingcycle); 
		 return breedingCycleId;
	}

	/**
	 * 
	 * @param breedingCycleId
	 */
	@Override
	public Optional<BreedingCycleTo> findBreedingCycle(int breedingCycleId){
		if(breedingCycleId <1) 
		 {return Optional.empty();} 
		 return breedingcycleRepository.findById(breedingCycleId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,BreedingCycleTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<BreedingCycleTo> findBreedingCycles(PageInput page, SortInput sort, List<FilterInput> filters){
		return breedingcycleRepository.findByCriteria(BreedingCycleModel.class,filters,sort,page).map(r -> converter.convert(r,BreedingCycleTo.class));
	}

	/**
	 * 
	 * @param breedingCycle
	 */
	@Override @Transactional(readOnly = false)
	public BreedingCycleTo modifyBreedingCycle(BreedingCycleInput breedingCycle){
		BreedingCycleModel target= breedingcycleRepository.findById(breedingCycle.getId()).orElseThrow(() -> new RuntimeException("BreedingCycle not found")); 
		 BreedingCycleModel source= converter.convert(breedingCycle,BreedingCycleModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(breedingcycleRepository.save(target), BreedingCycleTo.class);
	}

}