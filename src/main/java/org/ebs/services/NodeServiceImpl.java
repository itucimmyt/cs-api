///////////////////////////////////////////////////////////
//  NodeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class NodeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:39 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.EntityReferenceModel;
import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.ProcessModel;
import org.ebs.model.repos.ProcessRepository;
import org.ebs.model.ProductModel;
import org.ebs.model.repos.ProductRepository;
import org.ebs.model.repos.NodeRepository;
import org.ebs.model.repos.StageRepository;
import org.ebs.model.repos.ProductFunctionRepository;
import org.ebs.model.repos.EventRepository;
import org.ebs.model.repos.NodeCfRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.NodeTo;
import org.ebs.services.to.Input.NodeInput;
import org.ebs.model.NodeModel;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.EventTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.ProductTo;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.ProductFunctionTo;
import org.ebs.services.to.NodeCfTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:39 AM
 */
@Service @Transactional(readOnly = true)
  class NodeServiceImpl implements NodeService {

	private NodeRepository nodeRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	private EntityReferenceRepository entityreferenceRepository;
	private HtmlTagRepository htmltagRepository;
	private ProcessRepository processRepository;
	private ProductRepository productRepository;
	private StageRepository stageRepository;
	private ProductFunctionRepository productfunctionRepository;
	private EventRepository eventRepository;
	private NodeCfRepository nodecfRepository;

	/**
	 * 
	 * @param Node
	 */
	@Override @Transactional(readOnly = false)
	public NodeTo createNode(NodeInput Node){
		NodeModel model = converter.convert(Node,NodeModel.class); 
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(Node.getWorkflow().getId()).get(); 
		model.setWorkflow(workflowModel); 
		EntityReferenceModel entityreferenceModel = entityreferenceRepository.findById(Node.getEntityreference().getId()).get(); 
		model.setEntityreference(entityreferenceModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(Node.getHtmltag().getId()).get(); 
		model.setHtmltag(htmltagModel); 
		ProcessModel processModel = processRepository.findById(Node.getProcess().getId()).get(); 
		model.setProcess(processModel); 
		ProductModel productModel = productRepository.findById(Node.getProduct().getId()).get(); 
		model.setProduct(productModel); 
		 
		 model= nodeRepository.save(model); 
		 return converter.convert(model, NodeTo.class); 
	}

	/**
	 * 
	 * @param nodeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteNode(int nodeId){
		NodeModel node = nodeRepository.findById(nodeId).orElseThrow(() -> new RuntimeException("Node not found")); 
		 node.setDeleted(true); 
		  nodeRepository.save(node); 
		 return nodeId;
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int nodeId){
		return nodeRepository.findById(nodeId).map(r -> converter.convert(r.getEntityreference(),EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Set<EventTo> findEvents(int nodeId){
		return eventRepository.findByNodeId(nodeId).stream().map(e -> converter.convert(e,EventTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int nodeId){
		return nodeRepository.findById(nodeId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	@Override
	public Optional<NodeTo> findNode(int nodeId){
		if(nodeId <1) 
		 {return Optional.empty();} 
		 return nodeRepository.findById(nodeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,NodeTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Set<NodeCfTo> findNodeCfs(int nodeId){
		return nodecfRepository.findByNodeId(nodeId).stream().map(e -> converter.convert(e,NodeCfTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<NodeTo> findNodes(PageInput page, SortInput sort, List<FilterInput> filters){
		return nodeRepository.findByCriteria(NodeModel.class,filters,sort,page).map(r -> converter.convert(r,NodeTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<ProcessTo> findProcess(int nodeId){
		return nodeRepository.findById(nodeId).map(r -> converter.convert(r.getProcess(),ProcessTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<ProductTo> findProduct(int nodeId){
		return nodeRepository.findById(nodeId).map(r -> converter.convert(r.getProduct(),ProductTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Set<ProductFunctionTo> findProductFunctions(int nodeId){
		return productfunctionRepository.findByNodeId(nodeId).stream().map(e -> converter.convert(e,ProductFunctionTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Set<StageTo> findStages(int nodeId){
		return nodeRepository.findById(nodeId).get().getStages().stream().map(e->converter.convert(e, StageTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Optional<WorkflowTo> findWorkflow(int nodeId){
		return nodeRepository.findById(nodeId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 * 
	 * @param nodeId
	 */
	public Set<WorkflowTo> findWorkflows(int nodeId){
		return workflowRepository.findByNodeId(nodeId).stream().map(e -> converter.convert(e,WorkflowTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param node
	 */
	@Override @Transactional(readOnly = false)
	public NodeTo modifyNode(NodeInput node){
		NodeModel target= nodeRepository.findById(node.getId()).orElseThrow(() -> new RuntimeException("Node not found")); 
		 NodeModel source= converter.convert(node,NodeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(nodeRepository.save(target), NodeTo.class);
	}

	/**
	 * 
	 * @param nodecfRepository
	 * @param nodeRepository
	 * @param converter
	 * @param stageRepository
	 * @param workflowRepository
	 * @param productfunctionRepository
	 * @param entityreferenceRepository
	 * @param eventRepository
	 * @param htmltagRepository
	 * @param processRepository
	 * @param productRepository
	 */
	@Autowired
	public NodeServiceImpl(NodeCfRepository nodecfRepository, NodeRepository nodeRepository, ConversionService converter, StageRepository stageRepository, WorkflowRepository workflowRepository, ProductFunctionRepository productfunctionRepository, EntityReferenceRepository entityreferenceRepository, EventRepository eventRepository, HtmlTagRepository htmltagRepository, ProcessRepository processRepository, ProductRepository productRepository){
		this.nodeRepository =nodeRepository; 
		 this.converter = converter;
		 this.stageRepository = stageRepository;
		 this.workflowRepository = workflowRepository;
		 this.productfunctionRepository = productfunctionRepository;
		 this.entityreferenceRepository = entityreferenceRepository;
		 this.eventRepository = eventRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.processRepository = processRepository;
		 this.productRepository = productRepository;
		 this.nodecfRepository = nodecfRepository;
	}

}