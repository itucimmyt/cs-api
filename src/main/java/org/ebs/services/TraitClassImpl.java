///////////////////////////////////////////////////////////
//  TraitClassImpl.java
//  Macromedia ActionScript Implementation of the Class TraitClassImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:26 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.TraitClassModel;
import org.ebs.model.repos.TraitClassRepository;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.to.Input.TraitClassInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:26 PM
 */
@Service @Transactional(readOnly = true)
public class TraitClassImpl implements TraitClassService {

	private TraitClassRepository traitclassRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param TraitClass
	 */
	@Override @Transactional(readOnly = false)
	public TraitClassTo createTraitClass(TraitClassInput TraitClass){
		TraitClassModel model = converter.convert(TraitClass,TraitClassModel.class); 
		 model.setId(0);
		  
		 model= traitclassRepository.save(model); 
		 return converter.convert(model, TraitClassTo.class); 
	}

	/**
	 * 
	 * @param idtraitclass
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTraitClass(int idtraitclass){
		TraitClassModel traitclass = traitclassRepository.findById(idtraitclass).orElseThrow(() -> new RuntimeException("Request not found")); 
		 traitclass.setDeleted(true); 
		  traitclassRepository.save(traitclass); 
		 return idtraitclass;
	}

	/**
	 * 
	 * @param traitclassId
	 */
	@Override
	public Optional<TraitClassTo> findTraitClass(int traitclassId){
		if(traitclassId <1) 
		 {return Optional.empty();} 
		 return traitclassRepository.findById(traitclassId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TraitClassTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TraitClassTo> findTraitClasss(PageInput page, SortInput sort, List<FilterInput> filters){
		return traitclassRepository.findByCriteria(TraitClassModel.class,filters,sort,page).map(r -> converter.convert(r,TraitClassTo.class));
	}

	/**
	 * 
	 * @param traitclass
	 */
	@Override @Transactional(readOnly = false)
	public TraitClassTo modifyTraitClass(TraitClassInput traitclass){
		TraitClassModel target= traitclassRepository.findById(traitclass.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 TraitClassModel source= converter.convert(traitclass,TraitClassModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(traitclassRepository.save(target), TraitClassTo.class);
	}

	/**
	 * 
	 * @param traitclassRepository
	 */
	@Autowired
	public TraitClassImpl(TraitClassRepository traitclassRepository){
		this.traitclassRepository =traitclassRepository;
	}

}