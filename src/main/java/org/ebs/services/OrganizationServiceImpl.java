///////////////////////////////////////////////////////////
//  OrganizationServiceImpl.java
//  Macromedia ActionScript Implementation of the Class OrganizationServiceImpl
//  Generated by Enterprise Architect
//  Created on:      09-Aug-2020 4:51:03 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.CustomerModel;
import org.ebs.model.repos.CustomerRepository;
import org.ebs.model.repos.OrganizationRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.repos.TenantRepository;
import org.ebs.services.to.OrganizationTo;
import org.ebs.services.to.Input.OrganizationInput;
import org.ebs.model.OrganizationModel;
import org.ebs.services.to.CustomerTo;
import org.ebs.services.to.TenantTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 09-Aug-2020 4:51:03 PM
 */
@Service @Transactional(readOnly = true)
  class OrganizationServiceImpl implements OrganizationService {

	private OrganizationRepository organizationRepository;
	private ConversionService converter;
	private TenantRepository tenantRepository;
	private CustomerRepository customerRepository;

	/**
	 * 
	 * @param Organization
	 */
	@Override @Transactional(readOnly = false)
	public OrganizationTo createOrganization(OrganizationInput Organization){
		OrganizationModel model = converter.convert(Organization,OrganizationModel.class); 
		 model.setId(0);
		 CustomerModel customerModel = customerRepository.findById(Organization.getcustomer().getId()).get(); 
		model.setcustomer(customerModel); 
		 
		 model= organizationRepository.save(model); 
		 return converter.convert(model, OrganizationTo.class); 
	}

	/**
	 * 
	 * @param organizationId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteOrganization(int organizationId){
		OrganizationModel organization = organizationRepository.findById(organizationId).orElseThrow(() -> new RuntimeException("Organization not found")); 
		 organization.setDeleted(true); 
		  organizationRepository.save(organization); 
		 return organizationId;
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Optional<CustomerTo> findCustomer(int organizationId){
		return organizationRepository.findById(organizationId).map(r -> converter.convert(r.getcustomer(),CustomerTo.class));
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Set<CustomerTo> findCustomers(int organizationId){
		return customerRepository.findByOrganizationId(organizationId).stream().map(e -> converter.convert(e,CustomerTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param organizationId
	 */
	@Override
	public Optional<OrganizationTo> findOrganization(int organizationId){
		if(organizationId <1) 
		 {return Optional.empty();} 
		 return organizationRepository.findById(organizationId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,OrganizationTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<OrganizationTo> findOrganizations(PageInput page, SortInput sort, List<FilterInput> filters){
		return organizationRepository.findByCriteria(OrganizationModel.class,filters,sort,page).map(r -> converter.convert(r,OrganizationTo.class));
	}

	/**
	 * 
	 * @param organizationId
	 */
	public Set<TenantTo> findTenants(int organizationId){
		return tenantRepository.findByOrganizationId(organizationId).stream().map(e -> converter.convert(e,TenantTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param organization
	 */
	@Override @Transactional(readOnly = false)
	public OrganizationTo modifyOrganization(OrganizationInput organization){
		OrganizationModel target= organizationRepository.findById(organization.getId()).orElseThrow(() -> new RuntimeException("Organization not found")); 
		 OrganizationModel source= converter.convert(organization,OrganizationModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(organizationRepository.save(target), OrganizationTo.class);
	}

	/**
	 * 
	 * @param customerRepository
	 * @param tenantRepository
	 * @param converter
	 * @param organizationRepository
	 */
	@Autowired
	public OrganizationServiceImpl(CustomerRepository customerRepository, TenantRepository tenantRepository, ConversionService converter, OrganizationRepository organizationRepository){
		this.organizationRepository =organizationRepository; 
		 this.converter = converter;
		 this.tenantRepository = tenantRepository;
		 this.customerRepository = customerRepository;
	}

}