///////////////////////////////////////////////////////////
//  NumberSequenceRuleSegmentServiceImpl.java
//  Macromedia ActionScript Implementation of the Class NumberSequenceRuleSegmentServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:05:29 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.NumberSequenceRuleModel;
import org.ebs.model.NumberSequenceRuleSegmentModel;
import org.ebs.model.SegmentModel;
import org.ebs.model.repos.NumberSequenceRuleRepository;
import org.ebs.model.repos.NumberSequenceRuleSegmentRepository;
import org.ebs.model.repos.SegmentRepository;
import org.ebs.services.to.NumberSequenceRuleSegmentTo;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.to.Input.NumberSequenceRuleSegmentInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:05:29 AM
 */
@Service @Transactional(readOnly = true)
  class NumberSequenceRuleSegmentServiceImpl implements NumberSequenceRuleSegmentService {

	private NumberSequenceRuleSegmentRepository numbersequencerulesegmentRepository;
	private ConversionService converter;
	private SegmentRepository segmentRepository;
	private NumberSequenceRuleRepository numbersequenceruleRepository;

	/**
	 *
	 * @param NumberSequenceRuleSegment
	 */
	@Override @Transactional(readOnly = false)
	public NumberSequenceRuleSegmentTo createnumbersequencerulesegment(NumberSequenceRuleSegmentInput NumberSequenceRuleSegment){
		NumberSequenceRuleSegmentModel model = converter.convert(NumberSequenceRuleSegment,NumberSequenceRuleSegmentModel.class);
		 model.setId(0);
		 SegmentModel segmentModel = segmentRepository.findById(NumberSequenceRuleSegment.getSegment().getId()).get();
		model.setSegment(segmentModel);
		NumberSequenceRuleModel numbersequenceruleModel = numbersequenceruleRepository.findById(NumberSequenceRuleSegment.getNumbersequencerule().getId()).get();
		model.setNumbersequencerule(numbersequenceruleModel);

		 model= numbersequencerulesegmentRepository.save(model);
		 return converter.convert(model, NumberSequenceRuleSegmentTo.class);
	}

	/**
	 *
	 * @param numbersequencerulesegmentId
	 */
	@Override @Transactional(readOnly = false)
	public int deletenumbersequencerulesegment(int numbersequencerulesegmentId){
		NumberSequenceRuleSegmentModel numbersequencerulesegment = numbersequencerulesegmentRepository.findById(numbersequencerulesegmentId).orElseThrow(() -> new RuntimeException("NumberSequenceRuleSegment not found"));
		 numbersequencerulesegment.setDeleted(true);
		  numbersequencerulesegmentRepository.save(numbersequencerulesegment);
		 return numbersequencerulesegmentId;
	}

	/**
	 *
	 * @param numbersequencerulesegmentId
	 */
	public Optional<NumberSequenceRuleTo> findnumbersequencerule(int numbersequencerulesegmentId){
		return numbersequencerulesegmentRepository.findById(numbersequencerulesegmentId).map(r -> converter.convert(r.getNumbersequencerule(),NumberSequenceRuleTo.class));
	}

	/**
	 *
	 * @param numbersequencerulesegmentId
	 */
	@Override
	public Optional<NumberSequenceRuleSegmentTo> findnumbersequencerulesegment(int numbersequencerulesegmentId){
		if(numbersequencerulesegmentId <1)
		 {return Optional.empty();}
		 return numbersequencerulesegmentRepository.findById(numbersequencerulesegmentId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,NumberSequenceRuleSegmentTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<NumberSequenceRuleSegmentTo> findnumbersequencerulesegments(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return numbersequencerulesegmentRepository.findByCriteria(NumberSequenceRuleSegmentModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,NumberSequenceRuleSegmentTo.class));
	}

	/**
	 *
	 * @param numbersequencerulesegmentId
	 */
	public Optional<SegmentTo> findsegment(int numbersequencerulesegmentId){
		return numbersequencerulesegmentRepository.findById(numbersequencerulesegmentId).map(r -> converter.convert(r.getSegment(),SegmentTo.class));
	}

	/**
	 *
	 * @param numbersequencerulesegment
	 */
	@Override @Transactional(readOnly = false)
	public NumberSequenceRuleSegmentTo modifynumbersequencerulesegment(NumberSequenceRuleSegmentInput numbersequencerulesegment){
		NumberSequenceRuleSegmentModel target= numbersequencerulesegmentRepository.findById(numbersequencerulesegment.getId()).orElseThrow(() -> new RuntimeException("NumberSequenceRuleSegment not found"));
		 NumberSequenceRuleSegmentModel source= converter.convert(numbersequencerulesegment,NumberSequenceRuleSegmentModel.class);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(numbersequencerulesegmentRepository.save(target), NumberSequenceRuleSegmentTo.class);
	}

	/**
	 *
	 * @param numbersequenceruleRepository
	 * @param segmentRepository
	 * @param converter
	 * @param numbersequencerulesegmentRepository
	 */
	@Autowired
	public NumberSequenceRuleSegmentServiceImpl(NumberSequenceRuleRepository numbersequenceruleRepository, SegmentRepository segmentRepository, ConversionService converter, NumberSequenceRuleSegmentRepository numbersequencerulesegmentRepository){
		this.numbersequencerulesegmentRepository =numbersequencerulesegmentRepository;
		 this.converter = converter;
		 this.numbersequenceruleRepository = numbersequenceruleRepository;
	}

}