///////////////////////////////////////////////////////////
//  MessageServiceImpl.java
//  Macromedia ActionScript Implementation of the Class MessageServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Jul-2020 5:06:42 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.ComponentModel;
import org.ebs.model.repos.ComponentRepository;
import org.ebs.model.repos.MessageRepository;
import org.ebs.model.repos.TranslationRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.MessageTo;
import org.ebs.services.to.Input.MessageInput;
import org.ebs.model.MessageModel;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.ComponentTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Jul-2020 5:06:42 PM
 */
@Service @Transactional(readOnly = true)
  class MessageServiceImpl implements MessageService {

	private MessageRepository messageRepository;
	private ConversionService converter;
	private ComponentRepository componentRepository;
	public TranslationRepository translationRepository;

	/**
	 * 
	 * @param Message
	 */
	@Override @Transactional(readOnly = false)
	public MessageTo createMessage(MessageInput Message){
		MessageModel model = converter.convert(Message,MessageModel.class); 
		 model.setId(0);
		 ComponentModel componentModel = componentRepository.findById(Message.getcomponent().getId()).get(); 
		model.setcomponent(componentModel); 
		 
		 model= messageRepository.save(model); 
		 return converter.convert(model, MessageTo.class); 
	}

	/**
	 * 
	 * @param messageId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteMessage(int messageId){
		MessageModel message = messageRepository.findById(messageId).orElseThrow(() -> new RuntimeException("Message not found")); 
		 message.setDeleted(true); 
		  messageRepository.save(message); 
		 return messageId;
	}

	/**
	 * 
	 * @param messageId
	 */
	public Optional<ComponentTo> findComponent(int messageId){
		return messageRepository.findById(messageId).map(r -> converter.convert(r.getcomponent(),ComponentTo.class));
	}

	/**
	 * 
	 * @param messageId
	 */
	@Override
	public Optional<MessageTo> findMessage(int messageId){
		if(messageId <1) 
		 {return Optional.empty();} 
		 return messageRepository.findById(messageId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,MessageTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<MessageTo> findMessages(PageInput page, SortInput sort, List<FilterInput> filters){
		return messageRepository.findByCriteria(MessageModel.class,filters,sort,page).map(r -> converter.convert(r,MessageTo.class));
	}

	/**
	 * 
	 * @param messageId
	 */
	public Set<TranslationTo> findTranslations(int messageId){
		return translationRepository.findByMessageId(messageId).stream().map(e -> converter.convert(e,TranslationTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param componentRepository
	 * @param translationRepository
	 * @param converter
	 * @param messageRepository
	 */
	@Autowired
	public MessageServiceImpl(ComponentRepository componentRepository, TranslationRepository translationRepository, ConversionService converter, MessageRepository messageRepository){
		this.messageRepository =messageRepository; 
		 this.converter = converter;
		 this.translationRepository = translationRepository;
		 this.componentRepository = componentRepository;
	}

	/**
	 * 
	 * @param message
	 */
	@Override @Transactional(readOnly = false)
	public MessageTo modifyMessage(MessageInput message){
		MessageModel target= messageRepository.findById(message.getId()).orElseThrow(() -> new RuntimeException("Message not found")); 
		 MessageModel source= converter.convert(message,MessageModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(messageRepository.save(target), MessageTo.class);
	}

}