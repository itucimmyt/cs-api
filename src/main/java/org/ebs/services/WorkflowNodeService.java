///////////////////////////////////////////////////////////
//  WorkflowNodeService.java
//  Macromedia ActionScript Implementation of the Interface WorkflowNodeService
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:06:41 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.springframework.data.domain.Page;
import java.util.Set;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ProcessTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:06:41 AM
 */
public interface WorkflowNodeService {

	/**
	 * 
	 * @param WorkflowNode
	 */
	public WorkflowNodeTo createworkflownode(WorkflowNodeInput WorkflowNode);

	/**
	 * 
	 * @param workflownodeId
	 */
	public int deleteworkflownode(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Set<ActionTo> findactions(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<EntityReferenceTo> findentityreference(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<HtmlTagTo> findhtmltag(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<ModuleTo> findmodule(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<ProcessTo> findprocess(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowTo> findworkflow(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Set<WorkflowEventTo> findworkflowevents(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Optional<WorkflowNodeTo> findworkflownode(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Set<WorkflowNodeCFTo> findworkflownodecfs(int workflownodeId);

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findworkflownodes(PageInput page, SortInput sort, List<FilterInput> filters);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Set<WorkflowTo> findworkflows(int workflownodeId);

	/**
	 * 
	 * @param workflownodeId
	 */
	public Set<WorkflowStageTo> findworkflowstages(int workflownodeId);

	/**
	 * 
	 * @param workflownode
	 */
	public WorkflowNodeTo modifyworkflownode(WorkflowNodeInput workflownode);

}