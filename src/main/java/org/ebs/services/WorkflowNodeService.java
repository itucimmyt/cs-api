///////////////////////////////////////////////////////////
//  WorkflowNodeService.java
//  Macromedia ActionScript Implementation of the Interface WorkflowNodeService
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:43 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.springframework.data.domain.Page;
import java.util.Set;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ProcessTo;
import org.ebs.services.to.ModuleTo;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.WorkflowNodeCFTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:43 AM
 */
public interface WorkflowNodeService {

	/**
	 * 
	 * @param WorkflowNode
	 */
	public WorkflowNodeTo createWorkflowNode(WorkflowNodeInput WorkflowNode);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public int deleteWorkflowNode(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Set<ActionTo> findActions(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Optional<ModuleTo> findModule(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Optional<ProcessTo> findProcess(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Set<WorkflowEventTo> findWorkflowEvents(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Set<WorkflowNodeCFTo> findWorkflowNodeCFs(int workflowNodeId);

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	public Page<WorkflowNodeTo> findWorkflowNodes(PageInput page, SortInput sort, List<FilterInput> filters);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Set<WorkflowTo> findWorkflows(int workflowNodeId);

	/**
	 * 
	 * @param workflowNodeId
	 */
	public Set<WorkflowStageTo> findWorkflowStages(int workflowNodeId);

	/**
	 * 
	 * @param workflowNode
	 */
	public WorkflowNodeTo modifyWorkflowNode(WorkflowNodeInput workflowNode);

}