///////////////////////////////////////////////////////////
//  TeamServiceImpl.java
//  Macromedia ActionScript Implementation of the Class TeamServiceImpl
//  Generated by Enterprise Architect
//  Created on:      10-Sep-2020 10:44:43 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.TeamRepository;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.model.repos.PersonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.TeamTo;
import org.ebs.services.to.Input.TeamInput;
import org.ebs.model.TeamModel;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 10-Sep-2020 10:44:43 PM
 */
@Service @Transactional(readOnly = true)
  class TeamServiceImpl implements TeamService {

	private TeamRepository teamRepository;
	private ConversionService converter;
	private ProgramRepository programRepository;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param Team
	 */
	@Override @Transactional(readOnly = false)
	public TeamTo createTeam(TeamInput Team){
		TeamModel model = converter.convert(Team,TeamModel.class); 
		 model.setId(0);
		  
		 model= teamRepository.save(model); 
		 return converter.convert(model, TeamTo.class); 
	}

	/**
	 * 
	 * @param teamId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTeam(int teamId){
		TeamModel team = teamRepository.findById(teamId).orElseThrow(() -> new RuntimeException("Team not found")); 
		 team.setDeleted(true); 
		  teamRepository.save(team); 
		 return teamId;
	}

	/**
	 * 
	 * @param teamId
	 */
	public Set<PersonTo> findPersons(int teamId){
		return teamRepository.findById(teamId).get().getPersons().stream().map(e->converter.convert(e, PersonTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param teamId
	 */
	public Set<ProgramTo> findPrograms(int teamId){
		return teamRepository.findById(teamId).get().getPrograms().stream().map(e->converter.convert(e, ProgramTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param teamId
	 */
	@Override
	public Optional<TeamTo> findTeam(int teamId){
		if(teamId <1) 
		 {return Optional.empty();} 
		 return teamRepository.findById(teamId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TeamTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TeamTo> findTeams(PageInput page, SortInput sort, List<FilterInput> filters){
		return teamRepository.findByCriteria(TeamModel.class,filters,sort,page).map(r -> converter.convert(r,TeamTo.class));
	}

	/**
	 * 
	 * @param team
	 */
	@Override @Transactional(readOnly = false)
	public TeamTo modifyTeam(TeamInput team){
		TeamModel target= teamRepository.findById(team.getId()).orElseThrow(() -> new RuntimeException("Team not found")); 
		 TeamModel source= converter.convert(team,TeamModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(teamRepository.save(target), TeamTo.class);
	}

	/**
	 * 
	 * @param personRepository
	 * @param programRepository
	 * @param converter
	 * @param teamRepository
	 */
	@Autowired
	public TeamServiceImpl(PersonRepository personRepository, ProgramRepository programRepository, ConversionService converter, TeamRepository teamRepository){
		this.teamRepository =teamRepository; 
		 this.converter = converter;
		 this.programRepository = programRepository;
		 this.personRepository = personRepository;
	}

}