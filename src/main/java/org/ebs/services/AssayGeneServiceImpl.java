///////////////////////////////////////////////////////////
//  AssayGeneServiceImpl.java
//  Macromedia ActionScript Implementation of the Class AssayGeneServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:10:54 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.TraitModel;
import org.ebs.model.repos.TraitRepository;
import org.ebs.model.repos.MarkerRepository;
import org.ebs.model.repos.AssayGeneRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.to.Input.AssayGeneInput;
import org.ebs.model.AssayGeneModel;
import org.ebs.services.to.TraitTo;
import org.ebs.services.to.MarkerTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:10:54 AM
 */
@Service @Transactional(readOnly = true)
  class AssayGeneServiceImpl implements AssayGeneService {

	private AssayGeneRepository assayGeneRepository;
	private ConversionService converter;
	private TraitRepository traitRepository;
	private MarkerRepository markerRepository;

	/**
	 * 
	 * @param markerRepository
	 * @param traitRepository
	 * @param converter
	 * @param assaygeneRepository
	 */
	@Autowired
	public AssayGeneServiceImpl(MarkerRepository markerRepository, TraitRepository traitRepository, ConversionService converter, AssayGeneRepository assaygeneRepository){
		this.assayGeneRepository =assaygeneRepository; 
		 this.converter = converter;
		 this.traitRepository = traitRepository;
		 this.markerRepository = markerRepository;
	}

	/**
	 * 
	 * @param AssayGene
	 */
	@Override @Transactional(readOnly = false)
	public AssayGeneTo createAssayGene(AssayGeneInput AssayGene){
		AssayGeneModel model = converter.convert(AssayGene,AssayGeneModel.class); 
		 model.setId(0);
		 TraitModel traitModel = traitRepository.findById(AssayGene.getTrait().getId()).get(); 
		model.setTrait(traitModel); 
		 
		 model= assayGeneRepository.save(model); 
		 return converter.convert(model, AssayGeneTo.class); 
	}

	/**
	 * 
	 * @param assayGeneId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteAssayGene(int assayGeneId){
		AssayGeneModel assayGene = assayGeneRepository.findById(assayGeneId).orElseThrow(() -> new RuntimeException("AssayGene not found")); 
		 assayGene.setDeleted(true); 
		  assayGeneRepository.save(assayGene); 
		 return assayGeneId;
	}

	/**
	 * 
	 * @param assayGeneId
	 */
	@Override
	public Optional<AssayGeneTo> findAssayGene(int assayGeneId){
		if(assayGeneId <1) 
		 {return Optional.empty();} 
		 return assayGeneRepository.findById(assayGeneId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,AssayGeneTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<AssayGeneTo> findAssayGenes(PageInput page, SortInput sort, List<FilterInput> filters){
		return assayGeneRepository.findByCriteria(AssayGeneModel.class,filters,sort,page).map(r -> converter.convert(r,AssayGeneTo.class));
	}

	/**
	 * 
	 * @param assayGeneId
	 */
	public Set<MarkerTo> findMarkers(int assayGeneId){
		return markerRepository.findByAssayGeneId(assayGeneId).stream().map(e -> converter.convert(e,MarkerTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param assayGeneId
	 */
	public Optional<TraitTo> findTrait(int assayGeneId){
		return assayGeneRepository.findById(assayGeneId).map(r -> converter.convert(r.getTrait(),TraitTo.class));
	}

	/**
	 * 
	 * @param assayGene
	 */
	@Override @Transactional(readOnly = false)
	public AssayGeneTo modifyAssayGene(AssayGeneInput assayGene){
		AssayGeneModel target= assayGeneRepository.findById(assayGene.getId()).orElseThrow(() -> new RuntimeException("AssayGene not found")); 
		 AssayGeneModel source= converter.convert(assayGene,AssayGeneModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(assayGeneRepository.save(target), AssayGeneTo.class);
	}

}