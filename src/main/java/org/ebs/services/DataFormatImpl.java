///////////////////////////////////////////////////////////
//  DataFormatImpl.java
//  Macromedia ActionScript Implementation of the Class DataFormatImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:31 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.DataFormatTo;
import org.ebs.services.to.Input.DataFormatInput;
import org.ebs.model.DataFormatModel;
import org.ebs.model.repos.DataFormatRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:31 PM
 */
@Service @Transactional(readOnly = true)
public class DataFormatImpl implements DataFormatService {

	private DataFormatRepository dataformatRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param DataFormat
	 */
	@Override @Transactional(readOnly = false)
	public DataFormatTo createDataFormat(DataFormatInput DataFormat){
		DataFormatModel model = converter.convert(DataFormat,DataFormatModel.class); 
		 model.setId(0);
		  
		 model= dataformatRepository.save(model); 
		 return converter.convert(model, DataFormatTo.class); 
	}

	/**
	 * 
	 * @param dataformatRepository
	 */
	@Autowired
	public DataFormatImpl(DataFormatRepository dataformatRepository){
		this.dataformatRepository =dataformatRepository;
	}

	/**
	 * 
	 * @param iddataformat
	 */
	@Override @Transactional(readOnly = false)
	public int deleteDataFormat(int iddataformat){
		DataFormatModel dataformat = dataformatRepository.findById(iddataformat).orElseThrow(() -> new RuntimeException("Request not found")); 
		 dataformat.setDeleted(true); 
		  dataformatRepository.save(dataformat); 
		 return iddataformat;
	}

	/**
	 * 
	 * @param dataformatId
	 */
	@Override
	public Optional<DataFormatTo> findDataFormat(int dataformatId){
		if(dataformatId <1) 
		 {return Optional.empty();} 
		 return dataformatRepository.findById(dataformatId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,DataFormatTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<DataFormatTo> findDataFormats(PageInput page, SortInput sort, List<FilterInput> filters){
		return dataformatRepository.findByCriteria(DataFormatModel.class,filters,sort,page).map(r -> converter.convert(r,DataFormatTo.class));
	}

	/**
	 * 
	 * @param dataformat
	 */
	@Override @Transactional(readOnly = false)
	public DataFormatTo modifyDataFormat(DataFormatInput dataformat){
		DataFormatModel target= dataformatRepository.findById(dataformat.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 DataFormatModel source= converter.convert(dataformat,DataFormatModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(dataformatRepository.save(target), DataFormatTo.class);
	}

}