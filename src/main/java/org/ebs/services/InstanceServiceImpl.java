///////////////////////////////////////////////////////////
//  InstanceServiceImpl.java
//  Macromedia ActionScript Implementation of the Class InstanceServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:19:51 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.AuditLogsRepository;
import org.ebs.model.TenantModel;
import org.ebs.model.repos.TenantRepository;
import org.ebs.model.repos.InstanceRepository;
import org.ebs.model.repos.DomainInstanceRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.InstanceTo;
import org.ebs.services.to.Input.InstanceInput;
import org.ebs.model.InstanceModel;
import org.ebs.services.to.AuditLogsTo;
import org.ebs.services.to.TenantTo;
import org.ebs.services.to.DomainInstanceTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:19:51 AM
 */
@Service @Transactional(readOnly = true)
  class InstanceServiceImpl implements InstanceService {

	private InstanceRepository instanceRepository;
	private ConversionService converter;
	private AuditLogsRepository auditlogsRepository;
	private TenantRepository tenantRepository;
	private DomainInstanceRepository domaininstanceRepository;

	/**
	 * 
	 * @param Instance
	 */
	@Override @Transactional(readOnly = false)
	public InstanceTo createInstance(InstanceInput Instance){
		InstanceModel model = converter.convert(Instance,InstanceModel.class); 
		 model.setId(0);
		 TenantModel tenantModel = tenantRepository.findById(Instance.getTenant().getId()).get(); 
		model.setTenant(tenantModel); 
		 
		 model= instanceRepository.save(model); 
		 return converter.convert(model, InstanceTo.class); 
	}

	/**
	 * 
	 * @param instanceId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteInstance(int instanceId){
		InstanceModel instance = instanceRepository.findById(instanceId).orElseThrow(() -> new RuntimeException("Instance not found")); 
		 instance.setDeleted(true); 
		  instanceRepository.save(instance); 
		 return instanceId;
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Set<AuditLogsTo> findAuditLogss(int instanceId){
		return auditlogsRepository.findByInstanceId(instanceId).stream().map(e -> converter.convert(e,AuditLogsTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Set<DomainInstanceTo> findDomainInstances(int instanceId){
		return domaininstanceRepository.findByInstanceId(instanceId).stream().map(e -> converter.convert(e,DomainInstanceTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param instanceId
	 */
	@Override
	public Optional<InstanceTo> findInstance(int instanceId){
		if(instanceId <1) 
		 {return Optional.empty();} 
		 return instanceRepository.findById(instanceId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,InstanceTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<InstanceTo> findInstances(PageInput page, SortInput sort, List<FilterInput> filters){
		return instanceRepository.findByCriteria(InstanceModel.class,filters,sort,page).map(r -> converter.convert(r,InstanceTo.class));
	}

	/**
	 * 
	 * @param instanceId
	 */
	public Optional<TenantTo> findTenant(int instanceId){
		return instanceRepository.findById(instanceId).map(r -> converter.convert(r.getTenant(),TenantTo.class));
	}

	/**
	 * 
	 * @param domaininstanceRepository
	 * @param tenantRepository
	 * @param auditlogsRepository
	 * @param converter
	 * @param instanceRepository
	 */
	@Autowired
	public InstanceServiceImpl(DomainInstanceRepository domaininstanceRepository, TenantRepository tenantRepository, AuditLogsRepository auditlogsRepository, ConversionService converter, InstanceRepository instanceRepository){
		this.instanceRepository =instanceRepository; 
		 this.converter = converter;
		 this.auditlogsRepository = auditlogsRepository;
		 this.tenantRepository = tenantRepository;
		 this.domaininstanceRepository = domaininstanceRepository;
	}

	/**
	 * 
	 * @param instance
	 */
	@Override @Transactional(readOnly = false)
	public InstanceTo modifyInstance(InstanceInput instance){
		InstanceModel target= instanceRepository.findById(instance.getId()).orElseThrow(() -> new RuntimeException("Instance not found")); 
		 InstanceModel source= converter.convert(instance,InstanceModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(instanceRepository.save(target), InstanceTo.class);
	}

}