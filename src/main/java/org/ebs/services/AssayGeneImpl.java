///////////////////////////////////////////////////////////
//  AssayGeneImpl.java
//  Macromedia ActionScript Implementation of the Class AssayGeneImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:09:16 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.AssayGeneModel;
import org.ebs.model.TraitModel;
import org.ebs.model.repos.AssayGeneRepository;
import org.ebs.model.repos.TraitRepository;
import org.ebs.services.to.AssayGeneTo;
import org.ebs.services.to.Input.AssayGeneInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:09:16 PM
 */
@Service @Transactional(readOnly = true)
public class AssayGeneImpl implements AssayGeneService {

	private AssayGeneRepository assaygeneRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private TraitRepository traitRepository;

	/**
	 * 
	 * @param assaygeneRepository
	 */
	@Autowired
	public AssayGeneImpl(AssayGeneRepository assaygeneRepository){
		this.assaygeneRepository =assaygeneRepository;
	}

	/**
	 * 
	 * @param AssayGene
	 */
	@Override @Transactional(readOnly = false)
	public AssayGeneTo createAssayGene(AssayGeneInput AssayGene){
		AssayGeneModel model = converter.convert(AssayGene,AssayGeneModel.class); 
		 model.setId(0);
		 TraitModel traitModel = traitRepository.findById(AssayGene.getTrait().getId()).get(); 
		model.setTrait(traitModel); 
		 
		 model= assaygeneRepository.save(model); 
		 return converter.convert(model, AssayGeneTo.class); 
	}

	/**
	 * 
	 * @param idassaygene
	 */
	@Override @Transactional(readOnly = false)
	public int deleteAssayGene(int idassaygene){
		AssayGeneModel assaygene = assaygeneRepository.findById(idassaygene).orElseThrow(() -> new RuntimeException("Request not found")); 
		 assaygene.setDeleted(true); 
		  assaygeneRepository.save(assaygene); 
		 return idassaygene;
	}

	/**
	 * 
	 * @param assaygeneId
	 */
	@Override
	public Optional<AssayGeneTo> findAssayGene(int assaygeneId){
		if(assaygeneId <1) 
		 {return Optional.empty();} 
		 return assaygeneRepository.findById(assaygeneId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,AssayGeneTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<AssayGeneTo> findAssayGenes(PageInput page, SortInput sort, List<FilterInput> filters){
		return assaygeneRepository.findByCriteria(AssayGeneModel.class,filters,sort,page).map(r -> converter.convert(r,AssayGeneTo.class));
	}

	/**
	 * 
	 * @param assaygene
	 */
	@Override @Transactional(readOnly = false)
	public AssayGeneTo modifyAssayGene(AssayGeneInput assaygene){
		AssayGeneModel target= assaygeneRepository.findById(assaygene.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 AssayGeneModel source= converter.convert(assaygene,AssayGeneModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(assaygeneRepository.save(target), AssayGeneTo.class);
	}

}