///////////////////////////////////////////////////////////
//  LanguageImpl.java
//  Macromedia ActionScript Implementation of the Class LanguageImpl
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 12:07:02 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.Input.LanguageInput;
import org.ebs.model.LanguageModel;
import org.ebs.model.repos.LanguageRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 12:07:02 AM
 */
@Service @Transactional(readOnly = true)
public class LanguageImpl implements LanguageService {

	private LanguageRepository languageRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Language
	 */
	@Override @Transactional(readOnly = false)
	public LanguageTo createLanguage(LanguageInput Language){
		LanguageModel model = converter.convert(Language,LanguageModel.class); 
		 model.setId(0); 
		 model= languageRepository.save(model); 
		 return converter.convert(model, LanguageTo.class); 
	}

	/**
	 * 
	 * @param idlanguage
	 */
	@Override @Transactional(readOnly = false)
	public int deleteLanguage(int idlanguage){
		LanguageModel language = languageRepository.findById(idlanguage).orElseThrow(() -> new RuntimeException("Request not found")); 
		 language.setDeleted(true); 
		  languageRepository.save(language); 
		 return idlanguage;
	}

	/**
	 * 
	 * @param languageId
	 */
	@Override
	public Optional<LanguageTo> findLanguage(int languageId){
		if(languageId <1) 
		 {return Optional.empty();} 
		 return languageRepository.findById(languageId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,LanguageTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<LanguageTo> findLanguages(PageInput page, SortInput sort, List<FilterInput> filters){
		return languageRepository.findByCriteria(LanguageModel.class,filters,sort,page).map(r -> converter.convert(r,LanguageTo.class));
	}

	/**
	 * 
	 * @param languageRepository
	 */
	@Autowired
	public LanguageImpl(LanguageRepository languageRepository){
		this.languageRepository =languageRepository;
	}

	/**
	 * 
	 * @param language
	 */
	@Override @Transactional(readOnly = false)
	public LanguageTo modifyLanguage(LanguageInput language){
		LanguageModel target= languageRepository.findById(language.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 LanguageModel source= converter.convert(language,LanguageModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(languageRepository.save(target), LanguageTo.class);
	}

}