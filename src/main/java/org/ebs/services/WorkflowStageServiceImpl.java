///////////////////////////////////////////////////////////
//  WorkflowStageServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowStageServiceImpl
//  Generated by Enterprise Architect
//  Created on:      27-Jul-2020 8:44:08 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowPhaseModel;
import org.ebs.model.repos.WorkflowPhaseRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.ebs.model.repos.WorkflowEventRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.Input.WorkflowStageInput;
import org.ebs.model.WorkflowStageModel;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.WorkflowEventTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Jul-2020 8:44:08 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowStageServiceImpl implements WorkflowStageService {

	private WorkflowStageRepository workflowstageRepository;
	private ConversionService converter;
	private WorkflowPhaseRepository workflowphaseRepository;
	private HtmlTagRepository htmltagRepository;
	public WorkflowEventRepository workfloweventRepository;
	public WorkflowNodeRepository workflownodeRepository;

	/**
	 * 
	 * @param WorkflowStage
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStageTo createWorkflowStage(WorkflowStageInput WorkflowStage){
		WorkflowStageModel model = converter.convert(WorkflowStage,WorkflowStageModel.class); 
		 model.setId(0);
		 WorkflowPhaseModel workflowphaseModel = workflowphaseRepository.findById(WorkflowStage.getworkflowphase().getId()).get(); 
		model.setworkflowphase(workflowphaseModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(WorkflowStage.gethtmltag().getId()).get(); 
		model.sethtmltag(htmltagModel); 
		 
		 model= workflowstageRepository.save(model); 
		 return converter.convert(model, WorkflowStageTo.class); 
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowStage(int workflowstageId){
		WorkflowStageModel workflowstage = workflowstageRepository.findById(workflowstageId).orElseThrow(() -> new RuntimeException("WorkflowStage not found")); 
		 workflowstage.setDeleted(true); 
		  workflowstageRepository.save(workflowstage); 
		 return workflowstageId;
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int workflowstageId){
		return workflowstageRepository.findById(workflowstageId).map(r -> converter.convert(r.gethtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	public Set<WorkflowEventTo> findWorkflowEvents(int workflowstageId){
		return workfloweventRepository.findByWorkflowstageId(workflowstageId).stream().map(e -> converter.convert(e,WorkflowEventTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	public Optional<WorkflowPhaseTo> findWorkflowPhase(int workflowstageId){
		return workflowstageRepository.findById(workflowstageId).map(r -> converter.convert(r.getworkflowphase(),WorkflowPhaseTo.class));
	}

	/**
	 * 
	 * @param workflowstageId
	 */
	@Override
	public Optional<WorkflowStageTo> findWorkflowStage(int workflowstageId){
		if(workflowstageId <1) 
		 {return Optional.empty();} 
		 return workflowstageRepository.findById(workflowstageId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowStageTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowStageTo> findWorkflowStages(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowstageRepository.findByCriteria(WorkflowStageModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowStageTo.class));
	}

	/**
	 * 
	 * @param workflowstage
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStageTo modifyWorkflowStage(WorkflowStageInput workflowstage){
		WorkflowStageModel target= workflowstageRepository.findById(workflowstage.getId()).orElseThrow(() -> new RuntimeException("WorkflowStage not found")); 
		 WorkflowStageModel source= converter.convert(workflowstage,WorkflowStageModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowstageRepository.save(target), WorkflowStageTo.class);
	}

	/**
	 * 
	 * @param htmltagRepository
	 * @param workflowstageRepository
	 * @param converter
	 * @param workflowphaseRepository
	 * @param workfloweventRepository
	 * @param workflownodeRepository
	 */
	@Autowired
	public WorkflowStageServiceImpl(HtmlTagRepository htmltagRepository, WorkflowStageRepository workflowstageRepository, ConversionService converter, WorkflowPhaseRepository workflowphaseRepository, WorkflowEventRepository workfloweventRepository, WorkflowNodeRepository workflownodeRepository){
		this.workflowstageRepository =workflowstageRepository; 
		 this.converter = converter;
		 this.workflowphaseRepository = workflowphaseRepository;
		 this.workfloweventRepository = workfloweventRepository;
		 this.workflownodeRepository = workflownodeRepository;
		 this.htmltagRepository = htmltagRepository;
	}

}