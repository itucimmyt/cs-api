///////////////////////////////////////////////////////////
//  WorkflowStageServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowStageServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:49 AM
//  Original author: EBRIONES
//  Modified by: JAROJAS 03-09-2020
///////////////////////////////////////////////////////////

package org.ebs.services;

import static java.util.stream.Collectors.toSet;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.HtmlTagModel;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.WorkflowPhaseModel;
import org.ebs.model.WorkflowStageModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.WorkflowEventRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.WorkflowPhaseRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.Input.WorkflowStageInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.WorkflowStageModel;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.Input.WorkflowStageInput;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.HtmlTagTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:49 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowStageServiceImpl implements WorkflowStageService {

	private WorkflowStageRepository workflowStageRepository;
	private ConversionService converter;
	private WorkflowPhaseRepository workflowphaseRepository;
	private HtmlTagRepository htmltagRepository;
	public ActionRepository actionRepository;
	public WorkflowPhaseRepository workflowPhaseRepository;
	public WorkflowEventRepository workflowEventRepository;
	public HtmlTagRepository htmlTagRepository;
	public WorkflowNodeRepository workflowNodeRepository;

	/**
	 * 
	 * @param workflowStage
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStageTo createWorkflowStage(WorkflowStageInput WorkflowStage){
		WorkflowStageModel model = converter.convert(WorkflowStage,WorkflowStageModel.class); 
		 model.setId(0);
		 WorkflowPhaseModel workflowphaseModel = workflowphaseRepository.findById(WorkflowStage.getWorkflowPhase().getId()).get(); 
		model.setWorkflowPhase(workflowphaseModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(WorkflowStage.getHtmlTag().getId()).get(); 
		model.setHtmlTag(htmltagModel); 
		 
		 model= workflowStageRepository.save(model); 
		 return converter.convert(model, WorkflowStageTo.class); 
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowStage(int workflowStageId){
		WorkflowStageModel workflowStage = workflowStageRepository.findById(workflowStageId).orElseThrow(() -> new RuntimeException("WorkflowStage not found")); 
		 workflowStage.setDeleted(true); 
		  workflowStageRepository.save(workflowStage); 
		 return workflowStageId;
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	public Set<ActionTo> findActions(int workflowStageId){
		return actionRepository.findByWorkflowStageId(workflowStageId).stream().map(e -> converter.convert(e,ActionTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int workflowStageId){
		return workflowStageRepository.findById(workflowStageId).map(r -> converter.convert(r.getHtmlTag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	public Set<WorkflowEventTo> findWorkflowEvents(int workflowStageId){
		return workflowEventRepository.findByWorkflowStageId(workflowStageId).stream().map(e -> converter.convert(e,WorkflowEventTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	public Set<WorkflowNodeTo> findWorkflowNodes(int workflowStageId){
		return workflowStageRepository.findById(workflowStageId).get().getWorkflowNodes().stream().map(e->converter.convert(e, WorkflowNodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	public Optional<WorkflowPhaseTo> findWorkflowPhase(int workflowStageId){
		return workflowStageRepository.findById(workflowStageId).map(r -> converter.convert(r.getWorkflowPhase(),WorkflowPhaseTo.class));
	}

	/**
	 * 
	 * @param workflowStageId
	 */
	@Override
	public Optional<WorkflowStageTo> findWorkflowStage(int workflowStageId){
		if(workflowStageId <1) 
		 {return Optional.empty();} 
		 return workflowStageRepository.findById(workflowStageId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowStageTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowStageTo> findWorkflowStages(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowStageRepository.findByCriteria(WorkflowStageModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowStageTo.class));
	}

	/**
	 * 
	 * @param workflowStage
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStageTo modifyWorkflowStage(WorkflowStageInput workflowStage){
		WorkflowStageModel target= workflowStageRepository.findById(workflowStage.getId()).orElseThrow(() -> new RuntimeException("WorkflowStage not found")); 
		 WorkflowStageModel source= converter.convert(workflowStage,WorkflowStageModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowStageRepository.save(target), WorkflowStageTo.class);
	}

	/**
	 * 
	 * @param converter
	 * @param actionRepository
	 * @param workflowphaseRepository
	 * @param workfloweventRepository
	 * @param htmltagRepository
	 * @param workflowstageRepository
	 * @param workflownodeRepository
	 */
	@Autowired
	public WorkflowStageServiceImpl(ConversionService converter, ActionRepository actionRepository, WorkflowPhaseRepository workflowphaseRepository, WorkflowEventRepository workfloweventRepository, HtmlTagRepository htmltagRepository, WorkflowStageRepository workflowstageRepository, WorkflowNodeRepository workflownodeRepository){
		this.workflowStageRepository =workflowstageRepository; 
		 this.converter = converter;
		 this.actionRepository = actionRepository;
		 this.workflowPhaseRepository = workflowphaseRepository;
		 this.workflowEventRepository = workfloweventRepository;
		 this.htmlTagRepository = htmltagRepository;
		 this.workflowNodeRepository = workflownodeRepository;
	}

	void initWorkflowStage(WorkflowStageInput input, WorkflowStageModel model) {
		Optional<WorkflowStageInput> optInput = Optional.of(input);
		WorkflowPhaseModel wfPhase = optInput.map(i -> i.getWorkflowphase())
			.map(i -> workflowphaseRepository.findById(i.getId())
				.orElseThrow(() -> new RuntimeException("workflowphase does not exist")))
			.orElse(null);
		model.setWorkflowphase(wfPhase);

		HtmlTagModel htmltag = optInput.map(i -> i.getHtmltag())
			.map(i -> htmltagRepository.findById(i.getId())
				.orElseThrow(() -> new RuntimeException("htmltag does not exist")))
			.orElse(null);
		model.setHtmltag(htmltag);

		List<WorkflowNodeModel> wfNodes = optInput
			.map(i -> i.getWorkflownodes())
			.map(n -> n.stream()
				.map(i -> i.getId())
				.collect(toSet()))
			.map(l -> workflownodeRepository.findAllById(l))
			.orElse(Collections.emptyList());

		model.setWorkflownodes(new HashSet<>(wfNodes));
	}

}