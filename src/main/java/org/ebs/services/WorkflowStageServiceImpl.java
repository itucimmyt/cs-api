///////////////////////////////////////////////////////////
//  WorkflowStageServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowStageServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:06:48 AM
//  Original author: EBRIONES
//  Modified by: JAROJAS 03-09-2020
///////////////////////////////////////////////////////////

package org.ebs.services;

import static java.util.stream.Collectors.toSet;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.HtmlTagModel;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.WorkflowPhaseModel;
import org.ebs.model.WorkflowStageModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.WorkflowEventRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.WorkflowPhaseRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.Input.WorkflowStageInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:06:48 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowStageServiceImpl implements WorkflowStageService {

	private WorkflowStageRepository workflowstageRepository;
	private ConversionService converter;
	private WorkflowPhaseRepository workflowphaseRepository;
	private HtmlTagRepository htmltagRepository;
	public ActionRepository actionRepository;
	public WorkflowEventRepository workfloweventRepository;
	public WorkflowNodeRepository workflownodeRepository;

	/**
	 *
	 * @param workflowStage
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStageTo createworkflowstage(WorkflowStageInput WorkflowStage){
		WorkflowStageModel model = converter.convert(WorkflowStage,WorkflowStageModel.class);
		 model.setId(0);
		 WorkflowPhaseModel workflowphaseModel = workflowphaseRepository.findById(WorkflowStage.getWorkflowphase().getId()).get();
		model.setWorkflowphase(workflowphaseModel);
		HtmlTagModel htmltagModel = htmltagRepository.findById(WorkflowStage.getHtmltag().getId()).get();
		model.setHtmltag(htmltagModel);

		 model= workflowstageRepository.save(model);
		 return converter.convert(model, WorkflowStageTo.class);
	}

	/**
	 *
	 * @param workflowstageId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteworkflowstage(int workflowstageId){
		WorkflowStageModel workflowstage = workflowstageRepository.findById(workflowstageId).orElseThrow(() -> new RuntimeException("WorkflowStage not found"));
		 workflowstage.setDeleted(true);
		  workflowstageRepository.save(workflowstage);
		 return workflowstageId;
	}

	/**
	 *
	 * @param workflowstageId
	 */
	public Set<ActionTo> findactions(int workflowstageId){
		return actionRepository.findByWorkflowstageId(workflowstageId).stream().map(e -> converter.convert(e,ActionTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowstageId
	 */
	public Optional<HtmlTagTo> findhtmltag(int workflowstageId){
		return workflowstageRepository.findById(workflowstageId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 *
	 * @param workflowstageId
	 */
	public Set<WorkflowEventTo> findworkflowevents(int workflowstageId){
		return workfloweventRepository.findByWorkflowstageId(workflowstageId).stream().map(e -> converter.convert(e,WorkflowEventTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowstageId
	 */
	public Set<WorkflowNodeTo> findworkflownodes(int workflowstageId){
		return workflowstageRepository.findById(workflowstageId).get().getWorkflownodes().stream().map(e->converter.convert(e, WorkflowNodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowstageId
	 */
	public Optional<WorkflowPhaseTo> findworkflowphase(int workflowstageId){
		return workflowstageRepository.findById(workflowstageId).map(r -> converter.convert(r.getWorkflowphase(),WorkflowPhaseTo.class));
	}

	/**
	 *
	 * @param workflowstageId
	 */
	@Override
	public Optional<WorkflowStageTo> findworkflowstage(int workflowstageId){
		if(workflowstageId <1)
		 {return Optional.empty();}
		 return workflowstageRepository.findById(workflowstageId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowStageTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowStageTo> findworkflowstages(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return workflowstageRepository.findByCriteria(WorkflowStageModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,WorkflowStageTo.class));
	}

	/**
	 *
	 * @param workflowstage
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStageTo modifyworkflowstage(WorkflowStageInput workflowstage){
		WorkflowStageModel target= workflowstageRepository.findById(workflowstage.getId()).orElseThrow(() -> new RuntimeException("WorkflowStage not found"));
		 WorkflowStageModel source= converter.convert(workflowstage,WorkflowStageModel.class);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(workflowstageRepository.save(target), WorkflowStageTo.class);
	}

	/**
	 *
	 * @param workflownodeRepository
	 * @param workflowstageRepository
	 * @param converter
	 * @param actionRepository
	 * @param workflowphaseRepository
	 * @param workfloweventRepository
	 * @param htmltagRepository
	 */
	@Autowired
	public WorkflowStageServiceImpl(WorkflowNodeRepository workflownodeRepository, WorkflowStageRepository workflowstageRepository, ConversionService converter, ActionRepository actionRepository, WorkflowPhaseRepository workflowphaseRepository, WorkflowEventRepository workfloweventRepository, HtmlTagRepository htmltagRepository){
		this.workflowstageRepository =workflowstageRepository;
		 this.converter = converter;
		 this.actionRepository = actionRepository;
		 this.workflowphaseRepository = workflowphaseRepository;
		 this.workfloweventRepository = workfloweventRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.workflownodeRepository = workflownodeRepository;
	}

	void initWorkflowStage(WorkflowStageInput input, WorkflowStageModel model) {
		Optional<WorkflowStageInput> optInput = Optional.of(input);
		WorkflowPhaseModel wfPhase = optInput.map(i -> i.getWorkflowphase())
			.map(i -> workflowphaseRepository.findById(i.getId())
				.orElseThrow(() -> new RuntimeException("workflowphase does not exist")))
			.orElse(null);
		model.setWorkflowphase(wfPhase);

		HtmlTagModel htmltag = optInput.map(i -> i.getHtmltag())
			.map(i -> htmltagRepository.findById(i.getId())
				.orElseThrow(() -> new RuntimeException("htmltag does not exist")))
			.orElse(null);
		model.setHtmltag(htmltag);

		List<WorkflowNodeModel> wfNodes = optInput
			.map(i -> i.getWorkflownodes())
			.map(n -> n.stream()
				.map(i -> i.getId())
				.collect(toSet()))
			.map(l -> workflownodeRepository.findAllById(l))
			.orElse(Collections.emptyList());

		model.setWorkflownodes(new HashSet<>(wfNodes));
	}

}