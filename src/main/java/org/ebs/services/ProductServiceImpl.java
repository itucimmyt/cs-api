///////////////////////////////////////////////////////////
//  ProductServiceImpl.java
//  Macromedia ActionScript Implementation of the Class ProductServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:51 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.DomainModel;
import org.ebs.model.repos.DomainRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.ProductRepository;
import org.ebs.model.repos.ProductFunctionRepository;
import org.ebs.model.repos.NodeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.ProductTo;
import org.ebs.services.to.Input.ProductInput;
import org.ebs.model.ProductModel;
import org.ebs.services.to.ProductFunctionTo;
import org.ebs.services.to.DomainTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.NodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:51 AM
 */
@Service @Transactional(readOnly = true)
  class ProductServiceImpl implements ProductService {

	private ProductRepository productRepository;
	private ConversionService converter;
	private DomainRepository domainRepository;
	private HtmlTagRepository htmltagRepository;
	private ProductFunctionRepository productfunctionRepository;
	private NodeRepository nodeRepository;

	/**
	 * 
	 * @param Product
	 */
	@Override @Transactional(readOnly = false)
	public ProductTo createProduct(ProductInput Product){
		ProductModel model = converter.convert(Product,ProductModel.class); 
		 model.setId(0);
		 DomainModel domainModel = domainRepository.findById(Product.getDomain().getId()).get(); 
		model.setDomain(domainModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(Product.getHtmltag().getId()).get(); 
		model.setHtmltag(htmltagModel); 
		 
		 model= productRepository.save(model); 
		 return converter.convert(model, ProductTo.class); 
	}

	/**
	 * 
	 * @param productId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteProduct(int productId){
		ProductModel product = productRepository.findById(productId).orElseThrow(() -> new RuntimeException("Product not found")); 
		 product.setDeleted(true); 
		  productRepository.save(product); 
		 return productId;
	}

	/**
	 * 
	 * @param productId
	 */
	public Optional<DomainTo> findDomain(int productId){
		return productRepository.findById(productId).map(r -> converter.convert(r.getDomain(),DomainTo.class));
	}

	/**
	 * 
	 * @param productId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int productId){
		return productRepository.findById(productId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param productId
	 */
	public Set<NodeTo> findNodes(int productId){
		return nodeRepository.findByProductId(productId).stream().map(e -> converter.convert(e,NodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param productId
	 */
	@Override
	public Optional<ProductTo> findProduct(int productId){
		if(productId <1) 
		 {return Optional.empty();} 
		 return productRepository.findById(productId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,ProductTo.class));
	}

	/**
	 * 
	 * @param productId
	 */
	public Set<ProductFunctionTo> findProductFunctions(int productId){
		return productfunctionRepository.findByProductId(productId).stream().map(e -> converter.convert(e,ProductFunctionTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<ProductTo> findProducts(PageInput page, SortInput sort, List<FilterInput> filters){
		return productRepository.findByCriteria(ProductModel.class,filters,sort,page).map(r -> converter.convert(r,ProductTo.class));
	}

	/**
	 * 
	 * @param product
	 */
	@Override @Transactional(readOnly = false)
	public ProductTo modifyProduct(ProductInput product){
		ProductModel target= productRepository.findById(product.getId()).orElseThrow(() -> new RuntimeException("Product not found")); 
		 ProductModel source= converter.convert(product,ProductModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(productRepository.save(target), ProductTo.class);
	}

	/**
	 * 
	 * @param nodeRepository
	 * @param productRepository
	 * @param converter
	 * @param productfunctionRepository
	 * @param domainRepository
	 * @param htmltagRepository
	 */
	@Autowired
	public ProductServiceImpl(NodeRepository nodeRepository, ProductRepository productRepository, ConversionService converter, ProductFunctionRepository productfunctionRepository, DomainRepository domainRepository, HtmlTagRepository htmltagRepository){
		this.productRepository =productRepository; 
		 this.converter = converter;
		 this.productfunctionRepository = productfunctionRepository;
		 this.domainRepository = domainRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.nodeRepository = nodeRepository;
	}

}