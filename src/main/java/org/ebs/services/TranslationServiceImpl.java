///////////////////////////////////////////////////////////
//  TranslationServiceImpl.java
//  Macromedia ActionScript Implementation of the Class TranslationServiceImpl
//  Generated by Enterprise Architect
//  Created on:      09-Aug-2020 4:51:46 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.HtmlTagModel;
import org.ebs.model.LanguageModel;
import org.ebs.model.TranslationModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.LanguageRepository;
import org.ebs.model.repos.TranslationRepository;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.Input.TranslationInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 09-Aug-2020 4:51:46 PM
 */
@Service @Transactional(readOnly = true)
  class TranslationServiceImpl implements TranslationService {

	private TranslationRepository translationRepository;
	private ConversionService converter;
	private LanguageRepository languageRepository;
	private HtmlTagRepository htmltagRepository;

	/**
	 * 
	 * @param Translation
	 */
	@Override @Transactional(readOnly = false)
	public TranslationTo createTranslation(TranslationInput Translation){
		TranslationModel model = converter.convert(Translation,TranslationModel.class); 
		 model.setId(0);
		 LanguageModel languageModel = languageRepository.findById(Translation.getlanguage().getId()).get(); 
		model.setlanguage(languageModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(Translation.gethtmltag().getId()).get(); 
		model.sethtmltag(htmltagModel); 
		 
		 model= translationRepository.save(model); 
		 return converter.convert(model, TranslationTo.class); 
	}

	/**
	 * 
	 * @param translationId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTranslation(int translationId){
		TranslationModel translation = translationRepository.findById(translationId).orElseThrow(() -> new RuntimeException("Translation not found")); 
		 translation.setDeleted(true); 
		  translationRepository.save(translation); 
		 return translationId;
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.gethtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<LanguageTo> findLanguage(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getlanguage(),LanguageTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	@Override
	public Optional<TranslationTo> findTranslation(int translationId){
		if(translationId <1) 
		 {return Optional.empty();} 
		 return translationRepository.findById(translationId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TranslationTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TranslationTo> findTranslations(PageInput page, SortInput sort, List<FilterInput> filters){
		return translationRepository.findByCriteria(TranslationModel.class,filters,sort,page).map(r -> converter.convert(r,TranslationTo.class));
	}

	/**
	 * 
	 * @param translation
	 */
	@Override @Transactional(readOnly = false)
	public TranslationTo modifyTranslation(TranslationInput translation){
		TranslationModel target= translationRepository.findById(translation.getId()).orElseThrow(() -> new RuntimeException("Translation not found")); 
		 TranslationModel source= converter.convert(translation,TranslationModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(translationRepository.save(target), TranslationTo.class);
	}

	/**
	 * 
	 * @param htmltagRepository
	 * @param languageRepository
	 * @param converter
	 * @param translationRepository
	 */
	@Autowired
	public TranslationServiceImpl(HtmlTagRepository htmltagRepository, LanguageRepository languageRepository, ConversionService converter, TranslationRepository translationRepository){
		this.translationRepository =translationRepository; 
		 this.converter = converter;
		 this.languageRepository = languageRepository;
		 this.htmltagRepository = htmltagRepository;
	}

}