///////////////////////////////////////////////////////////
//  TranslationServiceImpl.java
//  Macromedia ActionScript Implementation of the Class TranslationServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:14:44 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.AlertModel;
import org.ebs.model.repos.AlertRepository;
import org.ebs.model.AttributesModel;
import org.ebs.model.repos.AttributesRepository;
import org.ebs.model.LanguageModel;
import org.ebs.model.repos.LanguageRepository;
import org.ebs.model.MessageModel;
import org.ebs.model.repos.MessageRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.ModuleModel;
import org.ebs.model.repos.ModuleRepository;
import org.ebs.model.repos.TranslationRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.Input.TranslationInput;
import org.ebs.model.TranslationModel;
import org.ebs.services.to.AlertTo;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.LanguageTo;
import org.ebs.services.to.MessageTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.ModuleTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:14:44 PM
 */
@Service @Transactional(readOnly = true)
  class TranslationServiceImpl implements TranslationService {

	private TranslationRepository translationRepository;
	private ConversionService converter;
	private AlertRepository alertRepository;
	private AttributesRepository attributesRepository;
	private LanguageRepository languageRepository;
	private MessageRepository messageRepository;
	private HtmlTagRepository htmltagRepository;
	private ModuleRepository moduleRepository;

	/**
	 * 
	 * @param Translation
	 */
	@Override @Transactional(readOnly = false)
	public TranslationTo createTranslation(TranslationInput Translation){
		TranslationModel model = converter.convert(Translation,TranslationModel.class); 
		 model.setId(0);
		 AlertModel alertModel = alertRepository.findById(Translation.getAlert().getId()).get(); 
		model.setAlert(alertModel); 
		AttributesModel attributesModel = attributesRepository.findById(Translation.getAttributes().getId()).get(); 
		model.setAttributes(attributesModel); 
		LanguageModel languageModel = languageRepository.findById(Translation.getLanguage().getId()).get(); 
		model.setLanguage(languageModel); 
		MessageModel messageModel = messageRepository.findById(Translation.getMessage().getId()).get(); 
		model.setMessage(messageModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(Translation.getHtmlTag().getId()).get(); 
		model.setHtmlTag(htmltagModel); 
		ModuleModel moduleModel = moduleRepository.findById(Translation.getModule().getId()).get(); 
		model.setModule(moduleModel); 
		 
		 model= translationRepository.save(model); 
		 return converter.convert(model, TranslationTo.class); 
	}

	/**
	 * 
	 * @param translationId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTranslation(int translationId){
		TranslationModel translation = translationRepository.findById(translationId).orElseThrow(() -> new RuntimeException("Translation not found")); 
		 translation.setDeleted(true); 
		  translationRepository.save(translation); 
		 return translationId;
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<AlertTo> findAlert(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getAlert(),AlertTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<AttributesTo> findAttributes(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getAttributes(),AttributesTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getHtmlTag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<LanguageTo> findLanguage(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getLanguage(),LanguageTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<MessageTo> findMessage(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getMessage(),MessageTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	public Optional<ModuleTo> findModule(int translationId){
		return translationRepository.findById(translationId).map(r -> converter.convert(r.getModule(),ModuleTo.class));
	}

	/**
	 * 
	 * @param translationId
	 */
	@Override
	public Optional<TranslationTo> findTranslation(int translationId){
		if(translationId <1) 
		 {return Optional.empty();} 
		 return translationRepository.findById(translationId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TranslationTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TranslationTo> findTranslations(PageInput page, SortInput sort, List<FilterInput> filters){
		return translationRepository.findByCriteria(TranslationModel.class,filters,sort,page).map(r -> converter.convert(r,TranslationTo.class));
	}

	/**
	 * 
	 * @param translation
	 */
	@Override @Transactional(readOnly = false)
	public TranslationTo modifyTranslation(TranslationInput translation){
		TranslationModel target= translationRepository.findById(translation.getId()).orElseThrow(() -> new RuntimeException("Translation not found")); 
		 TranslationModel source= converter.convert(translation,TranslationModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(translationRepository.save(target), TranslationTo.class);
	}

	/**
	 * 
	 * @param moduleRepository
	 * @param translationRepository
	 * @param converter
	 * @param alertRepository
	 * @param attributesRepository
	 * @param languageRepository
	 * @param messageRepository
	 * @param htmltagRepository
	 */
	@Autowired
	public TranslationServiceImpl(ModuleRepository moduleRepository, TranslationRepository translationRepository, ConversionService converter, AlertRepository alertRepository, AttributesRepository attributesRepository, LanguageRepository languageRepository, MessageRepository messageRepository, HtmlTagRepository htmltagRepository){
		this.translationRepository =translationRepository; 
		 this.converter = converter;
		 this.alertRepository = alertRepository;
		 this.attributesRepository = attributesRepository;
		 this.languageRepository = languageRepository;
		 this.messageRepository = messageRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.moduleRepository = moduleRepository;
	}

}