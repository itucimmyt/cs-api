///////////////////////////////////////////////////////////
//  RoleActionServiceImpl.java
//  Macromedia ActionScript Implementation of the Class RoleActionServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:00 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.ActionModel;
import org.ebs.model.repos.ActionRepository;
import org.ebs.model.RoleModel;
import org.ebs.model.repos.RoleRepository;
import org.ebs.model.repos.RoleActionRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.RoleActionTo;
import org.ebs.services.to.Input.RoleActionInput;
import org.ebs.model.RoleActionModel;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.RoleTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:00 AM
 */
@Service @Transactional(readOnly = true)
  class RoleActionServiceImpl implements RoleActionService {

	private RoleActionRepository roleActionRepository;
	private ConversionService converter;
	private ActionRepository actionRepository;
	private RoleRepository roleRepository;

	/**
	 * 
	 * @param RoleAction
	 */
	@Override @Transactional(readOnly = false)
	public RoleActionTo createRoleAction(RoleActionInput RoleAction){
		RoleActionModel model = converter.convert(RoleAction,RoleActionModel.class); 
		 model.setId(0);
		 ActionModel actionModel = actionRepository.findById(RoleAction.getAction().getId()).get(); 
		model.setAction(actionModel); 
		RoleModel roleModel = roleRepository.findById(RoleAction.getRole().getId()).get(); 
		model.setRole(roleModel); 
		 
		 model= roleActionRepository.save(model); 
		 return converter.convert(model, RoleActionTo.class); 
	}

	/**
	 * 
	 * @param roleActionId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteRoleAction(int roleActionId){
		RoleActionModel roleAction = roleActionRepository.findById(roleActionId).orElseThrow(() -> new RuntimeException("RoleAction not found")); 
		 roleAction.setDeleted(true); 
		  roleActionRepository.save(roleAction); 
		 return roleActionId;
	}

	/**
	 * 
	 * @param roleActionId
	 */
	public Optional<ActionTo> findAction(int roleActionId){
		return roleActionRepository.findById(roleActionId).map(r -> converter.convert(r.getAction(),ActionTo.class));
	}

	/**
	 * 
	 * @param roleActionId
	 */
	public Optional<RoleTo> findRole(int roleActionId){
		return roleActionRepository.findById(roleActionId).map(r -> converter.convert(r.getRole(),RoleTo.class));
	}

	/**
	 * 
	 * @param roleActionId
	 */
	@Override
	public Optional<RoleActionTo> findRoleAction(int roleActionId){
		if(roleActionId <1) 
		 {return Optional.empty();} 
		 return roleActionRepository.findById(roleActionId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,RoleActionTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<RoleActionTo> findRoleActions(PageInput page, SortInput sort, List<FilterInput> filters){
		return roleActionRepository.findByCriteria(RoleActionModel.class,filters,sort,page).map(r -> converter.convert(r,RoleActionTo.class));
	}

	/**
	 * 
	 * @param roleAction
	 */
	@Override @Transactional(readOnly = false)
	public RoleActionTo modifyRoleAction(RoleActionInput roleAction){
		RoleActionModel target= roleActionRepository.findById(roleAction.getId()).orElseThrow(() -> new RuntimeException("RoleAction not found")); 
		 RoleActionModel source= converter.convert(roleAction,RoleActionModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(roleActionRepository.save(target), RoleActionTo.class);
	}

	/**
	 * 
	 * @param roleRepository
	 * @param actionRepository
	 * @param converter
	 * @param roleactionRepository
	 */
	@Autowired
	public RoleActionServiceImpl(RoleRepository roleRepository, ActionRepository actionRepository, ConversionService converter, RoleActionRepository roleactionRepository){
		this.roleActionRepository =roleactionRepository; 
		 this.converter = converter;
		 this.roleRepository = roleRepository;
	}

}