///////////////////////////////////////////////////////////
//  WorkflowNodeCFServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowNodeCFServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:41 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowCFTypeModel;
import org.ebs.model.repos.WorkflowCFTypeRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.EntityReferenceModel;
import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.WorkflowNodeCFRepository;
import org.ebs.model.repos.WorkflowCFValueRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowNodeCFTo;
import org.ebs.services.to.Input.WorkflowNodeCFInput;
import org.ebs.model.WorkflowNodeCFModel;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.WorkflowNodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:41 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowNodeCFServiceImpl implements WorkflowNodeCFService {

	private WorkflowNodeCFRepository workflowNodeCFRepository;
	private ConversionService converter;
	private WorkflowCFTypeRepository workflowcftypeRepository;
	private HtmlTagRepository htmltagRepository;
	private EntityReferenceRepository entityreferenceRepository;
	private WorkflowNodeRepository workflownodeRepository;
	public WorkflowCFValueRepository workflowCFValueRepository;
	public WorkflowCFTypeRepository workflowCFTypeRepository;
	public HtmlTagRepository htmlTagRepository;
	public EntityReferenceRepository entityReferenceRepository;
	public WorkflowNodeRepository workflowNodeRepository;

	/**
	 * 
	 * @param WorkflowNodeCF
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeCFTo createWorkflowNodeCF(WorkflowNodeCFInput WorkflowNodeCF){
		WorkflowNodeCFModel model = converter.convert(WorkflowNodeCF,WorkflowNodeCFModel.class); 
		 model.setId(0);
		 WorkflowCFTypeModel workflowcftypeModel = workflowcftypeRepository.findById(WorkflowNodeCF.getWorkflowCFType().getId()).get(); 
		model.setWorkflowCFType(workflowcftypeModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(WorkflowNodeCF.getHtmlTag().getId()).get(); 
		model.setHtmlTag(htmltagModel); 
		EntityReferenceModel entityreferenceModel = entityreferenceRepository.findById(WorkflowNodeCF.getEntityReference().getId()).get(); 
		model.setEntityReference(entityreferenceModel); 
		WorkflowNodeModel workflownodeModel = workflownodeRepository.findById(WorkflowNodeCF.getWorkflowNode().getId()).get(); 
		model.setWorkflowNode(workflownodeModel); 
		 
		 model= workflowNodeCFRepository.save(model); 
		 return converter.convert(model, WorkflowNodeCFTo.class); 
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowNodeCF(int workflowNodeCFId){
		WorkflowNodeCFModel workflowNodeCF = workflowNodeCFRepository.findById(workflowNodeCFId).orElseThrow(() -> new RuntimeException("WorkflowNodeCF not found")); 
		 workflowNodeCF.setDeleted(true); 
		  workflowNodeCFRepository.save(workflowNodeCF); 
		 return workflowNodeCFId;
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int workflowNodeCFId){
		return workflowNodeCFRepository.findById(workflowNodeCFId).map(r -> converter.convert(r.getEntityReference(),EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int workflowNodeCFId){
		return workflowNodeCFRepository.findById(workflowNodeCFId).map(r -> converter.convert(r.getHtmlTag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	public Optional<WorkflowCFTypeTo> findWorkflowCFType(int workflowNodeCFId){
		return workflowNodeCFRepository.findById(workflowNodeCFId).map(r -> converter.convert(r.getWorkflowCFType(),WorkflowCFTypeTo.class));
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	public Set<WorkflowCFValueTo> findWorkflowCFValues(int workflowNodeCFId){
		return workflowCFValueRepository.findByWorkflowNodeCFId(workflowNodeCFId).stream().map(e -> converter.convert(e,WorkflowCFValueTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflowNodeCFId){
		return workflowNodeCFRepository.findById(workflowNodeCFId).map(r -> converter.convert(r.getWorkflowNode(),WorkflowNodeTo.class));
	}

	/**
	 * 
	 * @param workflowNodeCFId
	 */
	@Override
	public Optional<WorkflowNodeCFTo> findWorkflowNodeCF(int workflowNodeCFId){
		if(workflowNodeCFId <1) 
		 {return Optional.empty();} 
		 return workflowNodeCFRepository.findById(workflowNodeCFId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowNodeCFTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowNodeCFTo> findWorkflowNodeCFs(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowNodeCFRepository.findByCriteria(WorkflowNodeCFModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowNodeCFTo.class));
	}

	/**
	 * 
	 * @param workflowNodeCF
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeCFTo modifyWorkflowNodeCF(WorkflowNodeCFInput workflowNodeCF){
		WorkflowNodeCFModel target= workflowNodeCFRepository.findById(workflowNodeCF.getId()).orElseThrow(() -> new RuntimeException("WorkflowNodeCF not found")); 
		 WorkflowNodeCFModel source= converter.convert(workflowNodeCF,WorkflowNodeCFModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowNodeCFRepository.save(target), WorkflowNodeCFTo.class);
	}

	/**
	 * 
	 * @param workflownodeRepository
	 * @param workflownodecfRepository
	 * @param converter
	 * @param workflowcfvalueRepository
	 * @param workflowcftypeRepository
	 * @param htmltagRepository
	 * @param entityreferenceRepository
	 */
	@Autowired
	public WorkflowNodeCFServiceImpl(WorkflowNodeRepository workflownodeRepository, WorkflowNodeCFRepository workflownodecfRepository, ConversionService converter, WorkflowCFValueRepository workflowcfvalueRepository, WorkflowCFTypeRepository workflowcftypeRepository, HtmlTagRepository htmltagRepository, EntityReferenceRepository entityreferenceRepository){
		this.workflowNodeCFRepository =workflownodecfRepository; 
		 this.converter = converter;
		 this.workflowCFValueRepository = workflowcfvalueRepository;
		 this.workflowCFTypeRepository = workflowcftypeRepository;
		 this.htmlTagRepository = htmltagRepository;
		 this.entityReferenceRepository = entityreferenceRepository;
		 this.workflowNodeRepository = workflownodeRepository;
	}

}