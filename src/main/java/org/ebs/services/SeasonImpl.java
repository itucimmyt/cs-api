///////////////////////////////////////////////////////////
//  SeasonImpl.java
//  Macromedia ActionScript Implementation of the Class SeasonImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:13 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.SeasonModel;
import org.ebs.model.repos.SeasonRepository;
import org.ebs.services.to.SeasonTo;
import org.ebs.services.to.Input.SeasonInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:13 PM
 */
@Service @Transactional(readOnly = true)
public class SeasonImpl implements SeasonService {

	private SeasonRepository seasonRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Season
	 */
	@Override @Transactional(readOnly = false)
	public SeasonTo createSeason(SeasonInput Season){
		SeasonModel model = converter.convert(Season,SeasonModel.class); 
		 model.setId(0);
		  
		 model= seasonRepository.save(model); 
		 return converter.convert(model, SeasonTo.class); 
	}

	/**
	 * 
	 * @param idseason
	 */
	@Override @Transactional(readOnly = false)
	public int deleteSeason(int idseason){
		SeasonModel season = seasonRepository.findById(idseason).orElseThrow(() -> new RuntimeException("Request not found")); 
		 season.setDeleted(true); 
		  seasonRepository.save(season); 
		 return idseason;
	}

	/**
	 * 
	 * @param seasonId
	 */
	@Override
	public Optional<SeasonTo> findSeason(int seasonId){
		if(seasonId <1) 
		 {return Optional.empty();} 
		 return seasonRepository.findById(seasonId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,SeasonTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<SeasonTo> findSeasons(PageInput page, SortInput sort, List<FilterInput> filters){
		return seasonRepository.findByCriteria(SeasonModel.class,filters,sort,page).map(r -> converter.convert(r,SeasonTo.class));
	}

	/**
	 * 
	 * @param season
	 */
	@Override @Transactional(readOnly = false)
	public SeasonTo modifySeason(SeasonInput season){
		SeasonModel target= seasonRepository.findById(season.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 SeasonModel source= converter.convert(season,SeasonModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(seasonRepository.save(target), SeasonTo.class);
	}

	/**
	 * 
	 * @param seasonRepository
	 */
	@Autowired
	public SeasonImpl(SeasonRepository seasonRepository){
		this.seasonRepository =seasonRepository;
	}

}