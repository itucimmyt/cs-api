///////////////////////////////////////////////////////////
//  FunctionalUnitServiceImpl.java
//  Macromedia ActionScript Implementation of the Class FunctionalUnitServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:19:49 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.ProgramModel;
import org.ebs.model.repos.ProgramRepository;
import org.ebs.model.repos.FunctionalUnitRepository;
import org.ebs.model.repos.UserRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.FunctionalUnitTo;
import org.ebs.services.to.Input.FunctionalUnitInput;
import org.ebs.model.FunctionalUnitModel;
import org.ebs.services.to.ProgramTo;
import org.ebs.services.to.UserTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:19:49 AM
 */
@Service @Transactional(readOnly = true)
  class FunctionalUnitServiceImpl implements FunctionalUnitService {

	private FunctionalUnitRepository functionalunitRepository;
	private ConversionService converter;
	private ProgramRepository programRepository;
	private UserRepository userRepository;

	/**
	 * 
	 * @param FunctionalUnit
	 */
	@Override @Transactional(readOnly = false)
	public FunctionalUnitTo createFunctionalUnit(FunctionalUnitInput FunctionalUnit){
		FunctionalUnitModel model = converter.convert(FunctionalUnit,FunctionalUnitModel.class); 
		 model.setId(0);
		 ProgramModel programModel = programRepository.findById(FunctionalUnit.getProgram().getId()).get(); 
		model.setProgram(programModel); 
		 
		 model= functionalunitRepository.save(model); 
		 return converter.convert(model, FunctionalUnitTo.class); 
	}

	/**
	 * 
	 * @param functionalUnitId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteFunctionalUnit(int functionalUnitId){
		FunctionalUnitModel functionalunit = functionalunitRepository.findById(functionalUnitId).orElseThrow(() -> new RuntimeException("FunctionalUnit not found")); 
		 functionalunit.setDeleted(true); 
		  functionalunitRepository.save(functionalunit); 
		 return functionalUnitId;
	}

	/**
	 * 
	 * @param functionalUnitId
	 */
	@Override
	public Optional<FunctionalUnitTo> findFunctionalUnit(int functionalUnitId){
		if(functionalUnitId <1) 
		 {return Optional.empty();} 
		 return functionalunitRepository.findById(functionalUnitId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,FunctionalUnitTo.class));
	}

	/**
	 * 
	 * @param functionalunitId
	 */
	public Set<FunctionalUnitTo> findFunctionalUnits(int functionalunitId){
		return null; //functionalunitRepository.findByFunctionalunitId(functionalunitId).stream().map(e -> converter.convert(e,FunctionalUnitTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<FunctionalUnitTo> findFunctionalUnits(PageInput page, SortInput sort, List<FilterInput> filters){
		return functionalunitRepository.findByCriteria(FunctionalUnitModel.class,filters,sort,page).map(r -> converter.convert(r,FunctionalUnitTo.class));
	}

	/**
	 * 
	 * @param functionalunitId
	 */
	public Optional<ProgramTo> findProgram(int functionalunitId){
		return functionalunitRepository.findById(functionalunitId).map(r -> converter.convert(r.getProgram(),ProgramTo.class));
	}

	/**
	 * 
	 * @param functionalunitId
	 */
	public Set<UserTo> findUsers(int functionalunitId){
		return functionalunitRepository.findById(functionalunitId).get().getUsers().stream().map(e->converter.convert(e, UserTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param userRepository
	 * @param programRepository
	 * @param converter
	 * @param functionalunitRepository
	 */
	@Autowired
	public FunctionalUnitServiceImpl(UserRepository userRepository, ProgramRepository programRepository, ConversionService converter, FunctionalUnitRepository functionalunitRepository){
		this.functionalunitRepository =functionalunitRepository; 
		 this.converter = converter;
		 this.programRepository = programRepository;
		 this.userRepository = userRepository;
	}

	/**
	 * 
	 * @param functionalUnit
	 */
	@Override @Transactional(readOnly = false)
	public FunctionalUnitTo modifyFunctionalUnit(FunctionalUnitInput functionalUnit){
		FunctionalUnitModel target= functionalunitRepository.findById(functionalUnit.getId()).orElseThrow(() -> new RuntimeException("FunctionalUnit not found")); 
		 FunctionalUnitModel source= converter.convert(functionalUnit,FunctionalUnitModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(functionalunitRepository.save(target), FunctionalUnitTo.class);
	}

}