///////////////////////////////////////////////////////////
//  WorkflowNodeImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowNodeImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:36 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.WorkflowModel;
import org.ebs.model.WorkflowNodeModel;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.Input.WorkflowNodeInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:36 PM
 */
@Service @Transactional(readOnly = true)
public class WorkflowNodeImpl implements WorkflowNodeService {

	private WorkflowNodeRepository workflownodeRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private WorkflowRepository workflowRepository;

	/**
	 * 
	 * @param WorkflowNode
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeTo createWorkflowNode(WorkflowNodeInput WorkflowNode){
		WorkflowNodeModel model = converter.convert(WorkflowNode,WorkflowNodeModel.class); 
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(WorkflowNode.getWorkflow().getId()).get(); 
		model.setWorkflow(workflowModel); 
		 
		 model= workflownodeRepository.save(model); 
		 return converter.convert(model, WorkflowNodeTo.class); 
	}

	/**
	 * 
	 * @param idworkflownode
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowNode(int idworkflownode){
		WorkflowNodeModel workflownode = workflownodeRepository.findById(idworkflownode).orElseThrow(() -> new RuntimeException("Request not found")); 
		 workflownode.setDeleted(true); 
		  workflownodeRepository.save(workflownode); 
		 return idworkflownode;
	}

	/**
	 * 
	 * @param workflownodeId
	 */
	@Override
	public Optional<WorkflowNodeTo> findWorkflowNode(int workflownodeId){
		if(workflownodeId <1) 
		 {return Optional.empty();} 
		 return workflownodeRepository.findById(workflownodeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowNodeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowNodeTo> findWorkflowNodes(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflownodeRepository.findByCriteria(WorkflowNodeModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowNodeTo.class));
	}

	/**
	 * 
	 * @param workflownode
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowNodeTo modifyWorkflowNode(WorkflowNodeInput workflownode){
		WorkflowNodeModel target= workflownodeRepository.findById(workflownode.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 WorkflowNodeModel source= converter.convert(workflownode,WorkflowNodeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflownodeRepository.save(target), WorkflowNodeTo.class);
	}

	/**
	 * 
	 * @param workflownodeRepository
	 */
	@Autowired
	public WorkflowNodeImpl(WorkflowNodeRepository workflownodeRepository){
		this.workflownodeRepository =workflownodeRepository;
	}

}