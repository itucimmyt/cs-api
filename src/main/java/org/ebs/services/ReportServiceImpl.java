///////////////////////////////////////////////////////////
//  ReportServiceImpl.java
//  Macromedia ActionScript Implementation of the Class ReportServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:20:01 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.ProductModel;
import org.ebs.model.repos.ProductRepository;
import org.ebs.model.repos.ReportRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.ReportTo;
import org.ebs.services.to.Input.ReportInput;
import org.ebs.model.ReportModel;
import org.ebs.services.to.ProductTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:20:01 AM
 */
@Service @Transactional(readOnly = true)
  class ReportServiceImpl implements ReportService {

	private ReportRepository reportRepository;
	private ConversionService converter;
	private ProductRepository productRepository;

	/**
	 * 
	 * @param Report
	 */
	@Override @Transactional(readOnly = false)
	public ReportTo createReport(ReportInput Report){
		ReportModel model = converter.convert(Report,ReportModel.class); 
		 model.setId(0);
		 ProductModel productModel = productRepository.findById(Report.getProduct().getId()).get(); 
		model.setProduct(productModel); 
		 
		 model= reportRepository.save(model); 
		 return converter.convert(model, ReportTo.class); 
	}

	/**
	 * 
	 * @param reportId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteReport(int reportId){
		ReportModel report = reportRepository.findById(reportId).orElseThrow(() -> new RuntimeException("Report not found")); 
		 report.setDeleted(true); 
		  reportRepository.save(report); 
		 return reportId;
	}

	/**
	 * 
	 * @param reportId
	 */
	public Optional<ProductTo> findProduct(int reportId){
		return reportRepository.findById(reportId).map(r -> converter.convert(r.getProduct(),ProductTo.class));
	}

	/**
	 * 
	 * @param reportId
	 */
	@Override
	public Optional<ReportTo> findReport(int reportId){
		if(reportId <1) 
		 {return Optional.empty();} 
		 return reportRepository.findById(reportId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,ReportTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<ReportTo> findReports(PageInput page, SortInput sort, List<FilterInput> filters){
		return reportRepository.findByCriteria(ReportModel.class,filters,sort,page).map(r -> converter.convert(r,ReportTo.class));
	}

	/**
	 * 
	 * @param report
	 */
	@Override @Transactional(readOnly = false)
	public ReportTo modifyReport(ReportInput report){
		ReportModel target= reportRepository.findById(report.getId()).orElseThrow(() -> new RuntimeException("Report not found")); 
		 ReportModel source= converter.convert(report,ReportModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(reportRepository.save(target), ReportTo.class);
	}

	/**
	 * 
	 * @param productRepository
	 * @param converter
	 * @param reportRepository
	 */
	@Autowired
	public ReportServiceImpl(ProductRepository productRepository, ConversionService converter, ReportRepository reportRepository){
		this.reportRepository =reportRepository; 
		 this.converter = converter;
		 this.productRepository = productRepository;
	}

}