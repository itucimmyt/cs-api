///////////////////////////////////////////////////////////
//  TraitClassServiceImpl.java
//  Macromedia ActionScript Implementation of the Class TraitClassServiceImpl
//  Generated by Enterprise Architect
//  Created on:      10-Sep-2020 12:20:31 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.TraitRepository;
import org.ebs.model.repos.TraitClassRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.TraitClassTo;
import org.ebs.services.to.Input.TraitClassInput;
import org.ebs.model.TraitClassModel;
import org.ebs.services.to.TraitTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 10-Sep-2020 12:20:31 AM
 */
@Service @Transactional(readOnly = true)
  class TraitClassServiceImpl implements TraitClassService {

	private TraitClassRepository traitClassRepository;
	private ConversionService converter;
	private TraitRepository traitRepository;
	public TraitClassRepository traitclassRepository;

	/**
	 * 
	 * @param TraitClass
	 */
	@Override @Transactional(readOnly = false)
	public TraitClassTo createTraitClass(TraitClassInput TraitClass){
		TraitClassModel model = converter.convert(TraitClass,TraitClassModel.class); 
		 model.setId(0);
		  
		 model= traitClassRepository.save(model); 
		 return converter.convert(model, TraitClassTo.class); 
	}

	/**
	 * 
	 * @param traitClassId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteTraitClass(int traitClassId){
		TraitClassModel traitClass = traitClassRepository.findById(traitClassId).orElseThrow(() -> new RuntimeException("TraitClass not found")); 
		 traitClass.setDeleted(true); 
		  traitClassRepository.save(traitClass); 
		 return traitClassId;
	}

	/**
	 * 
	 * @param traitClassId
	 */
	@Override
	public Optional<TraitClassTo> findTraitClass(int traitClassId){
		if(traitClassId <1) 
		 {return Optional.empty();} 
		 return traitClassRepository.findById(traitClassId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,TraitClassTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<TraitClassTo> findTraitClasss(PageInput page, SortInput sort, List<FilterInput> filters){
		return traitClassRepository.findByCriteria(TraitClassModel.class,filters,sort,page).map(r -> converter.convert(r,TraitClassTo.class));
	}

	/**
	 * 
	 * @param traitclassId
	 */
	public Set<TraitTo> findTraits(int traitclassId){
		return traitRepository.findByTraitclassId(traitclassId).stream().map(e -> converter.convert(e,TraitTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param traitClass
	 */
	@Override @Transactional(readOnly = false)
	public TraitClassTo modifyTraitClass(TraitClassInput traitClass){
		TraitClassModel target= traitClassRepository.findById(traitClass.getId()).orElseThrow(() -> new RuntimeException("TraitClass not found")); 
		 TraitClassModel source= converter.convert(traitClass,TraitClassModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(traitClassRepository.save(target), TraitClassTo.class);
	}

	/**
	 * 
	 * @param traitRepository
	 * @param converter
	 * @param traitclassRepository
	 */
	@Autowired
	public TraitClassServiceImpl(TraitRepository traitRepository, ConversionService converter, TraitClassRepository traitclassRepository){
		this.traitClassRepository =traitclassRepository; 
		 this.converter = converter;
		 this.traitRepository = traitRepository;
	}

}