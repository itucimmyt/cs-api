///////////////////////////////////////////////////////////
//  SchemeImpl.java
//  Macromedia ActionScript Implementation of the Class SchemeImpl
//  Generated by Enterprise Architect
//  Created on:      17-May-2020 3:10:11 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.PipelineModel;
import org.ebs.model.repos.PipelineRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.SchemeTo;
import org.ebs.services.to.Input.SchemeInput;
import org.ebs.model.SchemeModel;
import org.ebs.model.repos.SchemeRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 17-May-2020 3:10:11 PM
 */
@Service @Transactional(readOnly = true)
public class SchemeImpl implements SchemeService {

	private SchemeRepository schemeRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private PipelineRepository pipelineRepository;

	/**
	 * 
	 * @param Scheme
	 */
	@Override @Transactional(readOnly = false)
	public SchemeTo createScheme(SchemeInput Scheme){
		SchemeModel model = converter.convert(Scheme,SchemeModel.class); 
		 model.setId(0);
		 PipelineModel pipelineModel = pipelineRepository.findById(Scheme.getPipeline().getId()).get(); 
		model.setPipeline(pipelineModel); 
		 
		 model= schemeRepository.save(model); 
		 return converter.convert(model, SchemeTo.class); 
	}

	/**
	 * 
	 * @param idscheme
	 */
	@Override @Transactional(readOnly = false)
	public int deleteScheme(int idscheme){
		SchemeModel scheme = schemeRepository.findById(idscheme).orElseThrow(() -> new RuntimeException("Request not found")); 
		 scheme.setDeleted(true); 
		  schemeRepository.save(scheme); 
		 return idscheme;
	}

	/**
	 * 
	 * @param schemeId
	 */
	@Override
	public Optional<SchemeTo> findScheme(int schemeId){
		if(schemeId <1) 
		 {return Optional.empty();} 
		 return schemeRepository.findById(schemeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,SchemeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<SchemeTo> findSchemes(PageInput page, SortInput sort, List<FilterInput> filters){
		return schemeRepository.findByCriteria(SchemeModel.class,filters,sort,page).map(r -> converter.convert(r,SchemeTo.class));
	}

	/**
	 * 
	 * @param scheme
	 */
	@Override @Transactional(readOnly = false)
	public SchemeTo modifyScheme(SchemeInput scheme){
		SchemeModel target= schemeRepository.findById(scheme.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 SchemeModel source= converter.convert(scheme,SchemeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(schemeRepository.save(target), SchemeTo.class);
	}

	/**
	 * 
	 * @param schemeRepository
	 */
	@Autowired
	public SchemeImpl(SchemeRepository schemeRepository){
		this.schemeRepository =schemeRepository;
	}

}