///////////////////////////////////////////////////////////
//  NodeCfServiceImpl.java
//  Macromedia ActionScript Implementation of the Class NodeCfServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:38 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.NodeCfRepository;
import org.ebs.model.repos.CfValueRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.CfTypeModel;
import org.ebs.model.repos.CfTypeRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.EntityReferenceModel;
import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.NodeModel;
import org.ebs.model.repos.NodeRepository;
import org.ebs.services.to.NodeCfTo;
import org.ebs.services.to.Input.NodeCfInput;
import org.ebs.model.NodeCfModel;
import org.ebs.services.to.CfValueTo;
import org.ebs.services.to.CfTypeTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.NodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:38 AM
 */
@Service @Transactional(readOnly = true)
  class NodeCfServiceImpl implements NodeCfService {

	private NodeCfRepository nodecfRepository;
	private ConversionService converter;
	private CfTypeRepository cftypeRepository;
	private HtmlTagRepository htmltagRepository;
	private EntityReferenceRepository entityreferenceRepository;
	private NodeRepository nodeRepository;
	private CfValueRepository cfvalueRepository;

	/**
	 * 
	 * @param NodeCf
	 */
	@Override @Transactional(readOnly = false)
	public NodeCfTo createNodeCf(NodeCfInput NodeCf){
		NodeCfModel model = converter.convert(NodeCf,NodeCfModel.class); 
		 model.setId(0);
		 CfTypeModel cftypeModel = cftypeRepository.findById(NodeCf.getCftype().getId()).get(); 
		model.setCftype(cftypeModel); 
		HtmlTagModel htmltagModel = htmltagRepository.findById(NodeCf.getHtmltag().getId()).get(); 
		model.setHtmltag(htmltagModel); 
		EntityReferenceModel entityreferenceModel = entityreferenceRepository.findById(NodeCf.getEntityreference().getId()).get(); 
		model.setEntityreference(entityreferenceModel); 
		NodeModel nodeModel = nodeRepository.findById(NodeCf.getNode().getId()).get(); 
		model.setNode(nodeModel); 
		 
		 model= nodecfRepository.save(model); 
		 return converter.convert(model, NodeCfTo.class); 
	}

	/**
	 * 
	 * @param nodeCfId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteNodeCf(int nodeCfId){
		NodeCfModel nodecf = nodecfRepository.findById(nodeCfId).orElseThrow(() -> new RuntimeException("NodeCf not found")); 
		 nodecf.setDeleted(true); 
		  nodecfRepository.save(nodecf); 
		 return nodeCfId;
	}

	/**
	 * 
	 * @param nodecfId
	 */
	public Optional<CfTypeTo> findCfType(int nodecfId){
		return nodecfRepository.findById(nodecfId).map(r -> converter.convert(r.getCftype(),CfTypeTo.class));
	}

	/**
	 * 
	 * @param nodecfId
	 */
	public Set<CfValueTo> findCfValues(int nodecfId){
		return cfvalueRepository.findByNodecfId(nodecfId).stream().map(e -> converter.convert(e,CfValueTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param nodecfId
	 */
	public Optional<EntityReferenceTo> findEntityReference(int nodecfId){
		return nodecfRepository.findById(nodecfId).map(r -> converter.convert(r.getEntityreference(),EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param nodecfId
	 */
	public Optional<HtmlTagTo> findHtmlTag(int nodecfId){
		return nodecfRepository.findById(nodecfId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 * 
	 * @param nodecfId
	 */
	public Optional<NodeTo> findNode(int nodecfId){
		return nodecfRepository.findById(nodecfId).map(r -> converter.convert(r.getNode(),NodeTo.class));
	}

	/**
	 * 
	 * @param nodeCfId
	 */
	@Override
	public Optional<NodeCfTo> findNodeCf(int nodeCfId){
		if(nodeCfId <1) 
		 {return Optional.empty();} 
		 return nodecfRepository.findById(nodeCfId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,NodeCfTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<NodeCfTo> findNodeCfs(PageInput page, SortInput sort, List<FilterInput> filters){
		return nodecfRepository.findByCriteria(NodeCfModel.class,filters,sort,page).map(r -> converter.convert(r,NodeCfTo.class));
	}

	/**
	 * 
	 * @param nodeCf
	 */
	@Override @Transactional(readOnly = false)
	public NodeCfTo modifyNodeCf(NodeCfInput nodeCf){
		NodeCfModel target= nodecfRepository.findById(nodeCf.getId()).orElseThrow(() -> new RuntimeException("NodeCf not found")); 
		 NodeCfModel source= converter.convert(nodeCf,NodeCfModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(nodecfRepository.save(target), NodeCfTo.class);
	}

	/**
	 * 
	 * @param nodeRepository
	 * @param nodecfRepository
	 * @param converter
	 * @param cfvalueRepository
	 * @param cftypeRepository
	 * @param htmltagRepository
	 * @param entityreferenceRepository
	 */
	@Autowired
	public NodeCfServiceImpl(NodeRepository nodeRepository, NodeCfRepository nodecfRepository, ConversionService converter, CfValueRepository cfvalueRepository, CfTypeRepository cftypeRepository, HtmlTagRepository htmltagRepository, EntityReferenceRepository entityreferenceRepository){
		this.nodecfRepository =nodecfRepository; 
		 this.converter = converter;
		 this.cfvalueRepository = cfvalueRepository;
		 this.cftypeRepository = cftypeRepository;
		 this.htmltagRepository = htmltagRepository;
		 this.entityreferenceRepository = entityreferenceRepository;
		 this.nodeRepository = nodeRepository;
	}

}