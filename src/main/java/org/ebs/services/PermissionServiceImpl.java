///////////////////////////////////////////////////////////
//  PermissionServiceImpl.java
//  Macromedia ActionScript Implementation of the Class PermissionServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:13:56 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.RoleActionModel;
import org.ebs.model.repos.RoleActionRepository;
import org.ebs.model.repos.PermissionRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.PermissionTo;
import org.ebs.services.to.Input.PermissionInput;
import org.ebs.model.PermissionModel;
import org.ebs.services.to.RoleActionTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:13:56 PM
 */
@Service @Transactional(readOnly = true)
  class PermissionServiceImpl implements PermissionService {

	private PermissionRepository permissionRepository;
	private ConversionService converter;
	private RoleActionRepository roleactionRepository;

	/**
	 * 
	 * @param Permission
	 */
	@Override @Transactional(readOnly = false)
	public PermissionTo createPermission(PermissionInput Permission){
		PermissionModel model = converter.convert(Permission,PermissionModel.class); 
		 model.setId(0);
		 RoleActionModel roleactionModel = roleactionRepository.findById(Permission.getRoleAction().getId()).get(); 
		model.setRoleAction(roleactionModel); 
		 
		 model= permissionRepository.save(model); 
		 return converter.convert(model, PermissionTo.class); 
	}

	/**
	 * 
	 * @param permissionId
	 */
	@Override @Transactional(readOnly = false)
	public int deletePermission(int permissionId){
		PermissionModel permission = permissionRepository.findById(permissionId).orElseThrow(() -> new RuntimeException("Permission not found")); 
		 permission.setDeleted(true); 
		  permissionRepository.save(permission); 
		 return permissionId;
	}

	/**
	 * 
	 * @param permissionId
	 */
	@Override
	public Optional<PermissionTo> findPermission(int permissionId){
		if(permissionId <1) 
		 {return Optional.empty();} 
		 return permissionRepository.findById(permissionId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,PermissionTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<PermissionTo> findPermissions(PageInput page, SortInput sort, List<FilterInput> filters){
		return permissionRepository.findByCriteria(PermissionModel.class,filters,sort,page).map(r -> converter.convert(r,PermissionTo.class));
	}

	/**
	 * 
	 * @param permissionId
	 */
	public Optional<RoleActionTo> findRoleAction(int permissionId){
		return permissionRepository.findById(permissionId).map(r -> converter.convert(r.getRoleAction(),RoleActionTo.class));
	}

	/**
	 * 
	 * @param permission
	 */
	@Override @Transactional(readOnly = false)
	public PermissionTo modifyPermission(PermissionInput permission){
		PermissionModel target= permissionRepository.findById(permission.getId()).orElseThrow(() -> new RuntimeException("Permission not found")); 
		 PermissionModel source= converter.convert(permission,PermissionModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(permissionRepository.save(target), PermissionTo.class);
	}

	/**
	 * 
	 * @param roleactionRepository
	 * @param converter
	 * @param permissionRepository
	 */
	@Autowired
	public PermissionServiceImpl(RoleActionRepository roleactionRepository, ConversionService converter, PermissionRepository permissionRepository){
		this.permissionRepository =permissionRepository; 
		 this.converter = converter;
		 this.roleactionRepository = roleactionRepository;
	}

}