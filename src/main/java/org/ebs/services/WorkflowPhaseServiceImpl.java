///////////////////////////////////////////////////////////
//  WorkflowPhaseServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowPhaseServiceImpl
//  Generated by Enterprise Architect
//  Created on:      23-Jul-2020 10:47:40 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.WorkflowPhaseRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.Input.WorkflowPhaseInput;
import org.ebs.model.WorkflowPhaseModel;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.WorkflowStageTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 23-Jul-2020 10:47:40 PM
 */
@Service @Transactional(readOnly = true)
  class WorkflowPhaseServiceImpl implements WorkflowPhaseService {

	private WorkflowPhaseRepository workflowphaseRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	public WorkflowStageRepository workflowstageRepository;

	/**
	 * 
	 * @param WorkflowPhase
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowPhaseTo createWorkflowPhase(WorkflowPhaseInput WorkflowPhase){
		WorkflowPhaseModel model = converter.convert(WorkflowPhase,WorkflowPhaseModel.class); 
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(WorkflowPhase.getworkflow().getId()).get(); 
		model.setworkflow(workflowModel); 
		 
		 model= workflowphaseRepository.save(model); 
		 return converter.convert(model, WorkflowPhaseTo.class); 
	}

	/**
	 * 
	 * @param workflowphaseId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowPhase(int workflowphaseId){
		WorkflowPhaseModel workflowphase = workflowphaseRepository.findById(workflowphaseId).orElseThrow(() -> new RuntimeException("WorkflowPhase not found")); 
		 workflowphase.setDeleted(true); 
		  workflowphaseRepository.save(workflowphase); 
		 return workflowphaseId;
	}

	/**
	 * 
	 * @param workflowphaseId
	 */
	public Optional<WorkflowTo> findWorkflow(int workflowphaseId){
		return workflowphaseRepository.findById(workflowphaseId).map(r -> converter.convert(r.getworkflow(),WorkflowTo.class));
	}

	/**
	 * 
	 * @param workflowphaseId
	 */
	@Override
	public Optional<WorkflowPhaseTo> findWorkflowPhase(int workflowphaseId){
		if(workflowphaseId <1) 
		 {return Optional.empty();} 
		 return workflowphaseRepository.findById(workflowphaseId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowPhaseTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowPhaseTo> findWorkflowPhases(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowphaseRepository.findByCriteria(WorkflowPhaseModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowPhaseTo.class));
	}

	/**
	 * 
	 * @param workflowphaseId
	 */
	public Set<WorkflowStageTo> findWorkflowStages(int workflowphaseId){
		return workflowstageRepository.findByWorkflowphaseId(workflowphaseId).stream().map(e -> converter.convert(e,WorkflowStageTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param workflowphase
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowPhaseTo modifyWorkflowPhase(WorkflowPhaseInput workflowphase){
		WorkflowPhaseModel target= workflowphaseRepository.findById(workflowphase.getId()).orElseThrow(() -> new RuntimeException("WorkflowPhase not found")); 
		 WorkflowPhaseModel source= converter.convert(workflowphase,WorkflowPhaseModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowphaseRepository.save(target), WorkflowPhaseTo.class);
	}

	/**
	 * 
	 * @param workflowRepository
	 * @param workflowstageRepository
	 * @param converter
	 * @param workflowphaseRepository
	 */
	@Autowired
	public WorkflowPhaseServiceImpl(WorkflowRepository workflowRepository, WorkflowStageRepository workflowstageRepository, ConversionService converter, WorkflowPhaseRepository workflowphaseRepository){
		this.workflowphaseRepository =workflowphaseRepository; 
		 this.converter = converter;
		 this.workflowstageRepository = workflowstageRepository;
		 this.workflowRepository = workflowRepository;
	}

}