///////////////////////////////////////////////////////////
//  WorkflowPhaseServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowPhaseServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:06:44 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.WorkflowPhaseRepository;
import org.ebs.model.repos.WorkflowStageRepository;
import org.springframework.transaction.annotation.Transactional;

import lombok.RequiredArgsConstructor;

import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowPhaseTo;
import org.ebs.services.to.Input.WorkflowPhaseInput;
import org.ebs.model.WorkflowPhaseModel;
import org.ebs.services.to.WorkflowStageTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.HtmlTagTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:06:44 AM
 * Modified JAROJAS 2020-09-08
 */
@Service @Transactional(readOnly = true)
@RequiredArgsConstructor(onConstructor = @__({@Autowired}))
  class WorkflowPhaseServiceImpl implements WorkflowPhaseService {

	private final WorkflowPhaseRepository workflowphaseRepository;
	private final ConversionService converter;
	private final WorkflowRepository workflowRepository;
	private final HtmlTagRepository htmltagRepository;
	private final WorkflowStageRepository workflowstageRepository;

	/**
	 *
	 * @param workflowPhase
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowPhaseTo createworkflowphase(WorkflowPhaseInput workflowPhase){
		WorkflowPhaseModel model = converter.convert(workflowPhase,WorkflowPhaseModel.class);
		model.setId(0);
		initWorkflowPhaseModel(workflowPhase, model);

		model= workflowphaseRepository.save(model);
		return converter.convert(model, WorkflowPhaseTo.class);
	}

	void initWorkflowPhaseModel(WorkflowPhaseInput input, WorkflowPhaseModel model) {
		Optional<WorkflowPhaseInput> optInput = Optional.of(input);

		WorkflowModel workflowModel = optInput.map(i -> i.getWorkflow())
			.map(w -> workflowRepository.findById(w.getId())
				.orElseThrow(() -> new RuntimeException("workflow does not exist")))
			.orElse(null);
		model.setWorkflow(workflowModel);

		HtmlTagModel htmltagModel = optInput.map(i -> i.getHtmltag())
			.map(w -> htmltagRepository.findById(w.getId())
				.orElseThrow(() -> new RuntimeException("htmltag does not exist")))
			.orElse(null);
		model.setHtmltag(htmltagModel);
	}

	/**
	 *
	 * @param workflowphaseId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteworkflowphase(int workflowphaseId){
		WorkflowPhaseModel workflowphase = workflowphaseRepository.findById(workflowphaseId).orElseThrow(() -> new RuntimeException("WorkflowPhase not found"));
		 workflowphase.setDeleted(true);
		  workflowphaseRepository.save(workflowphase);
		 return workflowphaseId;
	}

	/**
	 *
	 * @param workflowphaseId
	 */
	public Optional<HtmlTagTo> findhtmltag(int workflowphaseId){
		return workflowphaseRepository.findById(workflowphaseId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 *
	 * @param workflowphaseId
	 */
	public Optional<WorkflowTo> findworkflow(int workflowphaseId){
		return workflowphaseRepository.findById(workflowphaseId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 *
	 * @param workflowphaseId
	 */
	@Override
	public Optional<WorkflowPhaseTo> findworkflowphase(int workflowphaseId){
		if(workflowphaseId <1)
		 {return Optional.empty();}
		 return workflowphaseRepository.findById(workflowphaseId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowPhaseTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowPhaseTo> findworkflowphases(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return workflowphaseRepository.findByCriteria(WorkflowPhaseModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,WorkflowPhaseTo.class));
	}

	/**
	 *
	 * @param workflowphaseId
	 */
	public Set<WorkflowStageTo> findworkflowstages(int workflowphaseId){
		return workflowstageRepository.findByWorkflowphaseId(workflowphaseId).stream().map(e -> converter.convert(e,WorkflowStageTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowphase
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowPhaseTo modifyworkflowphase(WorkflowPhaseInput workflowphase){
		WorkflowPhaseModel target= workflowphaseRepository.findById(workflowphase.getId()).orElseThrow(() -> new RuntimeException("WorkflowPhase not found"));
		 WorkflowPhaseModel source= converter.convert(workflowphase,WorkflowPhaseModel.class);
		 initWorkflowPhaseModel(workflowphase, source);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(workflowphaseRepository.save(target), WorkflowPhaseTo.class);
	}
}