///////////////////////////////////////////////////////////
//  RequestServiceImpl.java
//  Macromedia ActionScript Implementation of the Class RequestServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:05:52 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.ebs.model.PersonModel;
import org.ebs.model.RequestModel;
import org.ebs.model.WorkflowInstanceModel;
import org.ebs.model.repos.PersonRepository;
import org.ebs.model.repos.RequestRepository;
import org.ebs.model.repos.WorkflowCFValueRepository;
import org.ebs.model.repos.WorkflowInstanceRepository;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.RequestTo;
import org.ebs.services.to.WorkflowCFValueTo;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.to.Input.RequestInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:05:52 AM
 */
@Service @Transactional(readOnly = true)
  class RequestServiceImpl implements RequestService {

	private RequestRepository requestRepository;
	private ConversionService converter;
	private WorkflowInstanceRepository workflowinstanceRepository;
	private PersonRepository personRepository;
	public WorkflowCFValueRepository workflowcfvalueRepository;

	/**
	 *
	 * @param Request
	 */
	@Override @Transactional(readOnly = false)
	public RequestTo createrequest(RequestInput Request){
		RequestModel model = converter.convert(Request,RequestModel.class);
		 model.setId(0);
		WorkflowInstanceModel workflowinstanceModel = workflowinstanceRepository.findById(Request.getWorkflowinstance().getId()).get();
		model.setWorkflowinstance(workflowinstanceModel);
		PersonModel personModel = personRepository.findById(Request.getPerson().getId()).get();
		model.setPerson(personModel);

		 model= requestRepository.save(model);
		 return converter.convert(model, RequestTo.class);
	}

	/**
	 *
	 * @param requestId
	 */
	@Override @Transactional(readOnly = false)
	public int deleterequest(int requestId){
		RequestModel request = requestRepository.findById(requestId).orElseThrow(() -> new RuntimeException("Request not found"));
		 request.setDeleted(true);
		  requestRepository.save(request);
		 return requestId;
	}

	/**
	 *
	 * @param requestId
	 */
	public Optional<PersonTo> findperson(int requestId){
		return requestRepository.findById(requestId).map(r -> converter.convert(r.getPerson(),PersonTo.class));
	}


	/**
	 *
	 * @param requestId
	 */
	@Override
	public Optional<RequestTo> findrequest(int requestId){
		if(requestId <1)
		 {return Optional.empty();}
		 return requestRepository.findById(requestId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,RequestTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<RequestTo> findrequests(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return requestRepository.findByCriteria(RequestModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,RequestTo.class));
	}

	/**
	 *
	 * @param requestId
	 */
	public Set<WorkflowCFValueTo> findworkflowcfvalues(int requestId){
		return workflowcfvalueRepository.findByRequestId(requestId).stream().map(e -> converter.convert(e,WorkflowCFValueTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param requestId
	 */
	public Optional<WorkflowInstanceTo> findworkflowinstance(int requestId){
		return requestRepository.findById(requestId).map(r -> converter.convert(r.getWorkflowinstance(),WorkflowInstanceTo.class));
	}

	/**
	 *
	 * @param request
	 */
	@Override @Transactional(readOnly = false)
	public RequestTo modifyrequest(RequestInput request){
		RequestModel target= requestRepository.findById(request.getId()).orElseThrow(() -> new RuntimeException("Request not found"));
		 RequestModel source= converter.convert(request,RequestModel.class);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(requestRepository.save(target), RequestTo.class);
	}

	/**
	 *
	 * @param personRepository
	 * @param requestRepository
	 * @param converter
	 * @param purposeRepository
	 * @param workflowcfvalueRepository
	 * @param workflowinstanceRepository
	 */
	@Autowired
	public RequestServiceImpl(PersonRepository personRepository, RequestRepository requestRepository, ConversionService converter, WorkflowCFValueRepository workflowcfvalueRepository, WorkflowInstanceRepository workflowinstanceRepository){
		this.requestRepository =requestRepository;
		 this.converter = converter;
		 this.workflowcfvalueRepository = workflowcfvalueRepository;
		 this.workflowinstanceRepository = workflowinstanceRepository;
		 this.personRepository = personRepository;
	}

}