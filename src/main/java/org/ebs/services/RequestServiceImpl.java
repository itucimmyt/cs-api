///////////////////////////////////////////////////////////
//  RequestServiceImpl.java
//  Macromedia ActionScript Implementation of the Class RequestServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:14:15 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.ServiceProviderModel;
import org.ebs.model.repos.ServiceProviderRepository;
import org.ebs.model.ServiceModel;
import org.ebs.model.repos.ServiceRepository;
import org.ebs.model.PurposeModel;
import org.ebs.model.repos.PurposeRepository;
import org.ebs.model.WorkflowInstanceModel;
import org.ebs.model.repos.WorkflowInstanceRepository;
import org.ebs.model.repos.RequestRepository;
import org.ebs.model.repos.RequestCFValueRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.RequestTo;
import org.ebs.services.to.Input.RequestInput;
import org.ebs.model.RequestModel;
import org.ebs.services.to.ServiceProviderTo;
import org.ebs.services.to.ServiceTo;
import org.ebs.services.to.PurposeTo;
import org.ebs.services.to.RequestCFValueTo;
import org.ebs.services.to.WorkflowInstanceTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:14:15 PM
 */
@Service @Transactional(readOnly = true)
  class RequestServiceImpl implements RequestService {

	private RequestRepository requestRepository;
	private ConversionService converter;
	private ServiceProviderRepository serviceproviderRepository;
	private ServiceRepository serviceRepository;
	private PurposeRepository purposeRepository;
	private WorkflowInstanceRepository workflowinstanceRepository;
	public RequestCFValueRepository requestcfvalueRepository;

	/**
	 * 
	 * @param Request
	 */
	@Override @Transactional(readOnly = false)
	public RequestTo createRequest(RequestInput Request){
		RequestModel model = converter.convert(Request,RequestModel.class); 
		 model.setId(0);
		 ServiceProviderModel serviceproviderModel = serviceproviderRepository.findById(Request.getServiceProvider().getId()).get(); 
		model.setServiceProvider(serviceproviderModel); 
		ServiceModel serviceModel = serviceRepository.findById(Request.getService().getId()).get(); 
		model.setService(serviceModel); 
		PurposeModel purposeModel = purposeRepository.findById(Request.getPurpose().getId()).get(); 
		model.setPurpose(purposeModel); 
		WorkflowInstanceModel workflowinstanceModel = workflowinstanceRepository.findById(Request.getWorkflowInstance().getId()).get(); 
		model.setWorkflowInstance(workflowinstanceModel); 
		 
		 model= requestRepository.save(model); 
		 return converter.convert(model, RequestTo.class); 
	}

	/**
	 * 
	 * @param requestId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteRequest(int requestId){
		RequestModel request = requestRepository.findById(requestId).orElseThrow(() -> new RuntimeException("Request not found")); 
		 request.setDeleted(true); 
		  requestRepository.save(request); 
		 return requestId;
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<PurposeTo> findPurpose(int requestId){
		return requestRepository.findById(requestId).map(r -> converter.convert(r.getPurpose(),PurposeTo.class));
	}

	/**
	 * 
	 * @param requestId
	 */
	@Override
	public Optional<RequestTo> findRequest(int requestId){
		if(requestId <1) 
		 {return Optional.empty();} 
		 return requestRepository.findById(requestId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,RequestTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<RequestTo> findRequests(PageInput page, SortInput sort, List<FilterInput> filters){
		return requestRepository.findByCriteria(RequestModel.class,filters,sort,page).map(r -> converter.convert(r,RequestTo.class));
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<ServiceTo> findService(int requestId){
		return requestRepository.findById(requestId).map(r -> converter.convert(r.getService(),ServiceTo.class));
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<ServiceProviderTo> findServiceProvider(int requestId){
		return requestRepository.findById(requestId).map(r -> converter.convert(r.getServiceProvider(),ServiceProviderTo.class));
	}

	/**
	 * 
	 * @param requestId
	 */
	public Optional<WorkflowInstanceTo> findWorkflowInstance(int requestId){
		return requestRepository.findById(requestId).map(r -> converter.convert(r.getWorkflowInstance(),WorkflowInstanceTo.class));
	}

	/**
	 * 
	 * @param request
	 */
	@Override @Transactional(readOnly = false)
	public RequestTo modifyRequest(RequestInput request){
		RequestModel target= requestRepository.findById(request.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 RequestModel source= converter.convert(request,RequestModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(requestRepository.save(target), RequestTo.class);
	}

	/**
	 * 
	 * @param workflowinstanceRepository
	 * @param requestRepository
	 * @param converter
	 * @param serviceproviderRepository
	 * @param serviceRepository
	 * @param purposeRepository
	 * @param requestcfvalueRepository
	 */
	@Autowired
	public RequestServiceImpl(WorkflowInstanceRepository workflowinstanceRepository, RequestRepository requestRepository, ConversionService converter, ServiceProviderRepository serviceproviderRepository, ServiceRepository serviceRepository, PurposeRepository purposeRepository, RequestCFValueRepository requestcfvalueRepository){
		this.requestRepository =requestRepository; 
		 this.converter = converter;
		 this.serviceproviderRepository = serviceproviderRepository;
		 this.serviceRepository = serviceRepository;
		 this.purposeRepository = purposeRepository;
		 this.requestcfvalueRepository = requestcfvalueRepository;
		 this.workflowinstanceRepository = workflowinstanceRepository;
	}

}