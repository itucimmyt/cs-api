///////////////////////////////////////////////////////////
//  EventServiceImpl.java
//  Macromedia ActionScript Implementation of the Class EventServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:29 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.StageModel;
import org.ebs.model.repos.StageRepository;
import org.ebs.model.WfInstanceModel;
import org.ebs.model.repos.WfInstanceRepository;
import org.ebs.model.NodeModel;
import org.ebs.model.repos.NodeRepository;
import org.ebs.model.repos.EventRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.EventTo;
import org.ebs.services.to.Input.EventInput;
import org.ebs.model.EventModel;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.WfInstanceTo;
import org.ebs.services.to.NodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:29 AM
 */
@Service @Transactional(readOnly = true)
  class EventServiceImpl implements EventService {

	private EventRepository eventRepository;
	private ConversionService converter;
	private StageRepository stageRepository;
	private WfInstanceRepository wfinstanceRepository;
	private NodeRepository nodeRepository;

	/**
	 * 
	 * @param Event
	 */
	@Override @Transactional(readOnly = false)
	public EventTo createEvent(EventInput Event){
		EventModel model = converter.convert(Event,EventModel.class); 
		 model.setId(0);
		 StageModel stageModel = stageRepository.findById(Event.getStage().getId()).get(); 
		model.setStage(stageModel); 
		WfInstanceModel wfinstanceModel = wfinstanceRepository.findById(Event.getWfinstance().getId()).get(); 
		model.setWfinstance(wfinstanceModel); 
		NodeModel nodeModel = nodeRepository.findById(Event.getNode().getId()).get(); 
		model.setNode(nodeModel); 
		 
		 model= eventRepository.save(model); 
		 return converter.convert(model, EventTo.class); 
	}

	/**
	 * 
	 * @param eventId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteEvent(int eventId){
		EventModel event = eventRepository.findById(eventId).orElseThrow(() -> new RuntimeException("Event not found")); 
		 event.setDeleted(true); 
		  eventRepository.save(event); 
		 return eventId;
	}

	/**
	 * 
	 * @param nodeRepository
	 * @param wfinstanceRepository
	 * @param stageRepository
	 * @param converter
	 * @param eventRepository
	 */
	@Autowired
	public EventServiceImpl(NodeRepository nodeRepository, WfInstanceRepository wfinstanceRepository, StageRepository stageRepository, ConversionService converter, EventRepository eventRepository){
		this.eventRepository =eventRepository; 
		 this.converter = converter;
		 this.stageRepository = stageRepository;
		 this.wfinstanceRepository = wfinstanceRepository;
		 this.nodeRepository = nodeRepository;
	}

	/**
	 * 
	 * @param eventId
	 */
	@Override
	public Optional<EventTo> findEvent(int eventId){
		if(eventId <1) 
		 {return Optional.empty();} 
		 return eventRepository.findById(eventId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,EventTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<EventTo> findEvents(PageInput page, SortInput sort, List<FilterInput> filters){
		return eventRepository.findByCriteria(EventModel.class,filters,sort,page).map(r -> converter.convert(r,EventTo.class));
	}

	/**
	 * 
	 * @param eventId
	 */
	public Optional<NodeTo> findNode(int eventId){
		return eventRepository.findById(eventId).map(r -> converter.convert(r.getNode(),NodeTo.class));
	}

	/**
	 * 
	 * @param eventId
	 */
	public Optional<StageTo> findStage(int eventId){
		return eventRepository.findById(eventId).map(r -> converter.convert(r.getStage(),StageTo.class));
	}

	/**
	 * 
	 * @param eventId
	 */
	public Optional<WfInstanceTo> findWfInstance(int eventId){
		return eventRepository.findById(eventId).map(r -> converter.convert(r.getWfinstance(),WfInstanceTo.class));
	}

	/**
	 * 
	 * @param event
	 */
	@Override @Transactional(readOnly = false)
	public EventTo modifyEvent(EventInput event){
		EventModel target= eventRepository.findById(event.getId()).orElseThrow(() -> new RuntimeException("Event not found")); 
		 EventModel source= converter.convert(event,EventModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(eventRepository.save(target), EventTo.class);
	}

}