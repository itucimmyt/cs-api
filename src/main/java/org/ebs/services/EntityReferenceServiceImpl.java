///////////////////////////////////////////////////////////
//  EntityReferenceServiceImpl.java
//  Macromedia ActionScript Implementation of the Class EntityReferenceServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:11:17 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.repos.AttributesRepository;
import org.ebs.model.repos.EmailTemplateRepository;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.SegmentRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.ebs.model.repos.NumberSequenceRuleRepository;
import org.ebs.model.repos.WorkflowNodeCFRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.EntityReferenceModel;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.Input.EntityReferenceInput;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.EmailTemplateTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.to.WorkflowNodeTo;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.to.WorkflowNodeCFTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:11:17 AM
 */
@Service @Transactional(readOnly = true)
  class EntityReferenceServiceImpl implements EntityReferenceService {

	private EntityReferenceRepository entityReferenceRepository;
	private ConversionService converter;
	public AttributesRepository attributesRepository;
	public EmailTemplateRepository emailTemplateRepository;
	public WorkflowRepository workflowRepository;
	public SegmentRepository segmentRepository;
	public WorkflowNodeRepository workflowNodeRepository;
	public NumberSequenceRuleRepository numberSequenceRuleRepository;
	public WorkflowNodeCFRepository workflowNodeCFRepository;

	/**
	 * 
	 * @param EntityReference
	 */
	@Override @Transactional(readOnly = false)
	public EntityReferenceTo createEntityReference(EntityReferenceInput EntityReference){
		EntityReferenceModel model = converter.convert(EntityReference,EntityReferenceModel.class); 
		 model.setId(0);
		  
		 model= entityReferenceRepository.save(model); 
		 return converter.convert(model, EntityReferenceTo.class); 
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteEntityReference(int entityReferenceId){
		EntityReferenceModel entityReference = entityReferenceRepository.findById(entityReferenceId).orElseThrow(() -> new RuntimeException("EntityReference not found")); 
		 entityReference.setDeleted(true); 
		  entityReferenceRepository.save(entityReference); 
		 return entityReferenceId;
	}

	/**
	 * 
	 * @param workflownodecfRepository
	 * @param entityreferenceRepository
	 * @param converter
	 * @param attributesRepository
	 * @param emailtemplateRepository
	 * @param workflowRepository
	 * @param segmentRepository
	 * @param workflownodeRepository
	 * @param numbersequenceruleRepository
	 */
	@Autowired
	public EntityReferenceServiceImpl(WorkflowNodeCFRepository workflownodecfRepository, EntityReferenceRepository entityreferenceRepository, ConversionService converter, AttributesRepository attributesRepository, EmailTemplateRepository emailtemplateRepository, WorkflowRepository workflowRepository, SegmentRepository segmentRepository, WorkflowNodeRepository workflownodeRepository, NumberSequenceRuleRepository numbersequenceruleRepository){
		this.entityReferenceRepository =entityreferenceRepository; 
		 this.converter = converter;
		 this.attributesRepository = attributesRepository;
		 this.emailTemplateRepository = emailtemplateRepository;
		 this.workflowRepository = workflowRepository;
		 this.segmentRepository = segmentRepository;
		 this.workflowNodeRepository = workflownodeRepository;
		 this.numberSequenceRuleRepository = numbersequenceruleRepository;
		 this.workflowNodeCFRepository = workflownodecfRepository;
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<AttributesTo> findAttributess(int entityReferenceId){
		return attributesRepository.findByEntityReferenceId(entityReferenceId).stream().map(e -> converter.convert(e,AttributesTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<EmailTemplateTo> findEmailTemplates(int entityReferenceId){
		return entityReferenceRepository.findById(entityReferenceId).get().getEmailTemplates().stream().map(e->converter.convert(e, EmailTemplateTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	@Override
	public Optional<EntityReferenceTo> findEntityReference(int entityReferenceId){
		if(entityReferenceId <1) 
		 {return Optional.empty();} 
		 return entityReferenceRepository.findById(entityReferenceId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<EntityReferenceTo> findEntityReferences(PageInput page, SortInput sort, List<FilterInput> filters){
		return entityReferenceRepository.findByCriteria(EntityReferenceModel.class,filters,sort,page).map(r -> converter.convert(r,EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<NumberSequenceRuleTo> findNumberSequenceRules(int entityReferenceId){
		return entityReferenceRepository.findById(entityReferenceId).get().getNumberSequenceRules().stream().map(e->converter.convert(e, NumberSequenceRuleTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<SegmentTo> findSegments(int entityReferenceId){
		return segmentRepository.findByEntityReferenceId(entityReferenceId).stream().map(e -> converter.convert(e,SegmentTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<WorkflowNodeCFTo> findWorkflowNodeCFs(int entityReferenceId){
		return workflowNodeCFRepository.findByEntityReferenceId(entityReferenceId).stream().map(e -> converter.convert(e,WorkflowNodeCFTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<WorkflowNodeTo> findWorkflowNodes(int entityReferenceId){
		return workflowNodeRepository.findByEntityReferenceId(entityReferenceId).stream().map(e -> converter.convert(e,WorkflowNodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	public Set<WorkflowTo> findWorkflows(int entityReferenceId){
		return workflowRepository.findByEntityReferenceId(entityReferenceId).stream().map(e -> converter.convert(e,WorkflowTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReference
	 */
	@Override @Transactional(readOnly = false)
	public EntityReferenceTo modifyEntityReference(EntityReferenceInput entityReference){
		EntityReferenceModel target= entityReferenceRepository.findById(entityReference.getId()).orElseThrow(() -> new RuntimeException("EntityReference not found")); 
		 EntityReferenceModel source= converter.convert(entityReference,EntityReferenceModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(entityReferenceRepository.save(target), EntityReferenceTo.class);
	}

}