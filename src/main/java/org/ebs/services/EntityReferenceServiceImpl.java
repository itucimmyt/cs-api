///////////////////////////////////////////////////////////
//  EntityReferenceServiceImpl.java
//  Macromedia ActionScript Implementation of the Class EntityReferenceServiceImpl
//  Generated by Enterprise Architect
//  Created on:      02-May-2021 6:19:48 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.repos.AttributesRepository;
import org.ebs.model.repos.EmailTemplateRepository;
import org.ebs.model.repos.DomainRepository;
import org.ebs.model.repos.SegmentRepository;
import org.ebs.model.repos.NumberSequenceRuleRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.Input.EntityReferenceInput;
import org.ebs.model.EntityReferenceModel;
import org.ebs.services.to.DomainTo;
import org.ebs.services.to.SegmentTo;
import org.ebs.services.to.NumberSequenceRuleTo;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.EmailTemplateTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 02-May-2021 6:19:48 AM
 */
@Service @Transactional(readOnly = true)
  class EntityReferenceServiceImpl implements EntityReferenceService {

	private EntityReferenceRepository entityreferenceRepository;
	private ConversionService converter;
	private AttributesRepository attributesRepository;
	private EmailTemplateRepository emailtemplateRepository;
	private DomainRepository domainRepository;
	private SegmentRepository segmentRepository;
	private NumberSequenceRuleRepository numbersequenceruleRepository;

	/**
	 * 
	 * @param EntityReference
	 */
	@Override @Transactional(readOnly = false)
	public EntityReferenceTo createEntityReference(EntityReferenceInput EntityReference){
		EntityReferenceModel model = converter.convert(EntityReference,EntityReferenceModel.class); 
		 model.setId(0);
		  
		 model= entityreferenceRepository.save(model); 
		 return converter.convert(model, EntityReferenceTo.class); 
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteEntityReference(int entityReferenceId){
		EntityReferenceModel entityreference = entityreferenceRepository.findById(entityReferenceId).orElseThrow(() -> new RuntimeException("EntityReference not found")); 
		 entityreference.setDeleted(true); 
		  entityreferenceRepository.save(entityreference); 
		 return entityReferenceId;
	}

	/**
	 * 
	 * @param numbersequenceruleRepository
	 * @param entityreferenceRepository
	 * @param converter
	 * @param attributesRepository
	 * @param emailtemplateRepository
	 * @param domainRepository
	 * @param segmentRepository
	 */
	@Autowired
	public EntityReferenceServiceImpl(NumberSequenceRuleRepository numbersequenceruleRepository, EntityReferenceRepository entityreferenceRepository, ConversionService converter, AttributesRepository attributesRepository, EmailTemplateRepository emailtemplateRepository, DomainRepository domainRepository, SegmentRepository segmentRepository){
		this.entityreferenceRepository =entityreferenceRepository; 
		 this.converter = converter;
		 this.attributesRepository = attributesRepository;
		 this.emailtemplateRepository = emailtemplateRepository;
		 this.domainRepository = domainRepository;
		 this.segmentRepository = segmentRepository;
		 this.numbersequenceruleRepository = numbersequenceruleRepository;
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Set<AttributesTo> findAttributess(int entityreferenceId){
		return attributesRepository.findByEntityreferenceId(entityreferenceId).stream().map(e -> converter.convert(e,AttributesTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Set<DomainTo> findDomains(int entityreferenceId){
		return entityreferenceRepository.findById(entityreferenceId).get().getDomains().stream().map(e->converter.convert(e, DomainTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Set<EmailTemplateTo> findEmailTemplates(int entityreferenceId){
		return entityreferenceRepository.findById(entityreferenceId).get().getEmailtemplates().stream().map(e->converter.convert(e, EmailTemplateTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReferenceId
	 */
	@Override
	public Optional<EntityReferenceTo> findEntityReference(int entityReferenceId){
		if(entityReferenceId <1) 
		 {return Optional.empty();} 
		 return entityreferenceRepository.findById(entityReferenceId).filter(r -> !r.isDeleted()).map(r -> converter.convert(r,EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<EntityReferenceTo> findEntityReferences(PageInput page, SortInput sort, List<FilterInput> filters){
		return entityreferenceRepository.findByCriteria(EntityReferenceModel.class,filters,sort,page).map(r -> converter.convert(r,EntityReferenceTo.class));
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Set<NumberSequenceRuleTo> findNumberSequenceRules(int entityreferenceId){
		return entityreferenceRepository.findById(entityreferenceId).get().getNumbersequencerules().stream().map(e->converter.convert(e, NumberSequenceRuleTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityreferenceId
	 */
	public Set<SegmentTo> findSegments(int entityreferenceId){
		return segmentRepository.findByEntityreferenceId(entityreferenceId).stream().map(e -> converter.convert(e,SegmentTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param entityReference
	 */
	@Override @Transactional(readOnly = false)
	public EntityReferenceTo modifyEntityReference(EntityReferenceInput entityReference){
		EntityReferenceModel target= entityreferenceRepository.findById(entityReference.getId()).orElseThrow(() -> new RuntimeException("EntityReference not found")); 
		 EntityReferenceModel source= converter.convert(entityReference,EntityReferenceModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(entityreferenceRepository.save(target), EntityReferenceTo.class);
	}

}