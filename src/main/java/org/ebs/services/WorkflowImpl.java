///////////////////////////////////////////////////////////
//  WorkflowImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowImpl
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 12:07:18 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.Input.WorkflowInput;
import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 12:07:18 AM
 */
@Service @Transactional(readOnly = true)
public class WorkflowImpl implements WorkflowService {

	private WorkflowRepository workflowRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Workflow
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowTo createWorkflow(WorkflowInput Workflow){
		WorkflowModel model = converter.convert(Workflow,WorkflowModel.class); 
		 model.setId(0); 
		 model= workflowRepository.save(model); 
		 return converter.convert(model, WorkflowTo.class); 
	}

	/**
	 * 
	 * @param idworkflow
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflow(int idworkflow){
		WorkflowModel workflow = workflowRepository.findById(idworkflow).orElseThrow(() -> new RuntimeException("Request not found")); 
		 workflow.setDeleted(true); 
		  workflowRepository.save(workflow); 
		 return idworkflow;
	}

	/**
	 * 
	 * @param workflowId
	 */
	@Override
	public Optional<WorkflowTo> findWorkflow(int workflowId){
		if(workflowId <1) 
		 {return Optional.empty();} 
		 return workflowRepository.findById(workflowId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowTo> findWorkflows(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowRepository.findByCriteria(WorkflowModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowTo.class));
	}

	/**
	 * 
	 * @param workflow
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowTo modifyWorkflow(WorkflowInput workflow){
		WorkflowModel target= workflowRepository.findById(workflow.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 WorkflowModel source= converter.convert(workflow,WorkflowModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowRepository.save(target), WorkflowTo.class);
	}

	/**
	 * 
	 * @param workflowRepository
	 */
	@Autowired
	public WorkflowImpl(WorkflowRepository workflowRepository){
		this.workflowRepository =workflowRepository;
	}

}