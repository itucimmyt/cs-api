///////////////////////////////////////////////////////////
//  ActionImpl.java
//  Macromedia ActionScript Implementation of the Class ActionImpl
//  Generated by Enterprise Architect
//  Created on:      27-Apr-2020 9:47:29 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.ActionTo;
import org.ebs.services.to.Input.ActionInput;
import org.ebs.model.ActionModel;
import org.ebs.model.repos.ActionRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 27-Apr-2020 9:47:29 AM
 */
@Service @Transactional(readOnly = true)
public class ActionImpl implements ActionService {

	private ActionRepository actionRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param actionRepository
	 */
	@Autowired
	public ActionImpl(ActionRepository actionRepository){
		this.actionRepository =actionRepository;
	}

	/**
	 * 
	 * @param Action
	 */
	@Override @Transactional(readOnly = false)
	public ActionTo createAction(ActionInput Action){
		ActionModel model = converter.convert(Action,ActionModel.class); 
		 model.setId(0); 
		 model= actionRepository.save(model); 
		 return converter.convert(model, ActionTo.class); 
	}

	/**
	 * 
	 * @param idaction
	 */
	@Override @Transactional(readOnly = false)
	public int deleteAction(int idaction){
		ActionModel action = actionRepository.findById(idaction).orElseThrow(() -> new RuntimeException("Request not found")); 
		 action.setDeleted(true); 
		  actionRepository.save(action); 
		 return idaction;
	}

	/**
	 * 
	 * @param actionId
	 */
	@Override
	public Optional<ActionTo> findAction(int actionId){
		if(actionId <1) 
		 {return Optional.empty();} 
		 return actionRepository.findById(actionId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,ActionTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<ActionTo> findActions(PageInput page, SortInput sort, List<FilterInput> filters){
		return actionRepository.findByCriteria(ActionModel.class,filters,sort,page).map(r -> converter.convert(r,ActionTo.class));
	}

	/**
	 * 
	 * @param action
	 */
	@Override @Transactional(readOnly = false)
	public ActionTo modifyAction(ActionInput action){
		ActionModel target= actionRepository.findById(action.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 ActionModel source= converter.convert(action,ActionModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(actionRepository.save(target), ActionTo.class);
	}

}