///////////////////////////////////////////////////////////
//  PersonStatusServiceImpl.java
//  Macromedia ActionScript Implementation of the Class PersonStatusServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:46 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.PersonStatusRepository;
import org.ebs.model.repos.PersonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.PersonStatusTo;
import org.ebs.services.to.Input.PersonStatusInput;
import org.ebs.model.PersonStatusModel;
import org.ebs.services.to.PersonTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:46 AM
 */
@Service @Transactional(readOnly = true)
  class PersonStatusServiceImpl implements PersonStatusService {

	private PersonStatusRepository personstatusRepository;
	private ConversionService converter;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param PersonStatus
	 */
	@Override @Transactional(readOnly = false)
	public PersonStatusTo createPersonStatus(PersonStatusInput PersonStatus){
		PersonStatusModel model = converter.convert(PersonStatus,PersonStatusModel.class); 
		 model.setId(0);
		  
		 model= personstatusRepository.save(model); 
		 return converter.convert(model, PersonStatusTo.class); 
	}

	/**
	 * 
	 * @param personStatusId
	 */
	@Override @Transactional(readOnly = false)
	public int deletePersonStatus(int personStatusId){
		PersonStatusModel personstatus = personstatusRepository.findById(personStatusId).orElseThrow(() -> new RuntimeException("PersonStatus not found")); 
		 personstatus.setDeleted(true); 
		  personstatusRepository.save(personstatus); 
		 return personStatusId;
	}

	/**
	 * 
	 * @param personstatusId
	 */
	public Set<PersonTo> findPersons(int personstatusId){
		return personRepository.findByPersonstatusId(personstatusId).stream().map(e -> converter.convert(e,PersonTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param personStatusId
	 */
	@Override
	public Optional<PersonStatusTo> findPersonStatus(int personStatusId){
		if(personStatusId <1) 
		 {return Optional.empty();} 
		 return personstatusRepository.findById(personStatusId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,PersonStatusTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<PersonStatusTo> findPersonStatuss(PageInput page, SortInput sort, List<FilterInput> filters){
		return personstatusRepository.findByCriteria(PersonStatusModel.class,filters,sort,page).map(r -> converter.convert(r,PersonStatusTo.class));
	}

	/**
	 * 
	 * @param personStatus
	 */
	@Override @Transactional(readOnly = false)
	public PersonStatusTo modifyPersonStatus(PersonStatusInput personStatus){
		PersonStatusModel target= personstatusRepository.findById(personStatus.getId()).orElseThrow(() -> new RuntimeException("PersonStatus not found")); 
		 PersonStatusModel source= converter.convert(personStatus,PersonStatusModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(personstatusRepository.save(target), PersonStatusTo.class);
	}

	/**
	 * 
	 * @param personRepository
	 * @param converter
	 * @param personstatusRepository
	 */
	@Autowired
	public PersonStatusServiceImpl(PersonRepository personRepository, ConversionService converter, PersonStatusRepository personstatusRepository){
		this.personstatusRepository =personstatusRepository; 
		 this.converter = converter;
		 this.personRepository = personRepository;
	}

}