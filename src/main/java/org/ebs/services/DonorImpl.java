///////////////////////////////////////////////////////////
//  DonorImpl.java
//  Macromedia ActionScript Implementation of the Class DonorImpl
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 11:58:13 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.PearsonModel;
import org.ebs.model.repos.PearsonRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.DonorTo;
import org.ebs.services.to.Input.DonorInput;
import org.ebs.model.DonorModel;
import org.ebs.model.repos.DonorRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 11:58:13 PM
 */
@Service @Transactional(readOnly = true)
public class DonorImpl implements DonorService {

	private DonorRepository donorRepository;
	@Autowired
	private ConversionService converter;
	@Autowired
	private PearsonRepository pearsonRepository;

	/**
	 * 
	 * @param Donor
	 */
	@Override @Transactional(readOnly = false)
	public DonorTo createDonor(DonorInput Donor){
		DonorModel model = converter.convert(Donor,DonorModel.class); 
		 model.setId(0);
		 PearsonModel pearsonModel = pearsonRepository.findById(Donor.getPearson().getId()).get(); 
		model.setPearson(pearsonModel); 
		 
		 model= donorRepository.save(model); 
		 return converter.convert(model, DonorTo.class); 
	}

	/**
	 * 
	 * @param iddonor
	 */
	@Override @Transactional(readOnly = false)
	public int deleteDonor(int iddonor){
		DonorModel donor = donorRepository.findById(iddonor).orElseThrow(() -> new RuntimeException("Request not found")); 
		 donor.setDeleted(true); 
		  donorRepository.save(donor); 
		 return iddonor;
	}

	/**
	 * 
	 * @param donorRepository
	 */
	@Autowired
	public DonorImpl(DonorRepository donorRepository){
		this.donorRepository =donorRepository;
	}

	/**
	 * 
	 * @param donorId
	 */
	@Override
	public Optional<DonorTo> findDonor(int donorId){
		if(donorId <1) 
		 {return Optional.empty();} 
		 return donorRepository.findById(donorId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,DonorTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<DonorTo> findDonors(PageInput page, SortInput sort, List<FilterInput> filters){
		return donorRepository.findByCriteria(DonorModel.class,filters,sort,page).map(r -> converter.convert(r,DonorTo.class));
	}

	/**
	 * 
	 * @param donor
	 */
	@Override @Transactional(readOnly = false)
	public DonorTo modifyDonor(DonorInput donor){
		DonorModel target= donorRepository.findById(donor.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 DonorModel source= converter.convert(donor,DonorModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(donorRepository.save(target), DonorTo.class);
	}

}