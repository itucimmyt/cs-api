///////////////////////////////////////////////////////////
//  CfTypeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class CfTypeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:23 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.CfTypeRepository;
import org.ebs.model.repos.NodeCfRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.CfTypeTo;
import org.ebs.services.to.Input.CfTypeInput;
import org.ebs.model.CfTypeModel;
import org.ebs.services.to.NodeCfTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:23 AM
 */
@Service @Transactional(readOnly = true)
  class CfTypeServiceImpl implements CfTypeService {

	private CfTypeRepository cftypeRepository;
	private ConversionService converter;
	private NodeCfRepository nodecfRepository;

	/**
	 * 
	 * @param nodecfRepository
	 * @param converter
	 * @param cftypeRepository
	 */
	@Autowired
	public CfTypeServiceImpl(NodeCfRepository nodecfRepository, ConversionService converter, CfTypeRepository cftypeRepository){
		this.cftypeRepository =cftypeRepository; 
		 this.converter = converter;
		 this.nodecfRepository = nodecfRepository;
	}

	/**
	 * 
	 * @param CfType
	 */
	@Override @Transactional(readOnly = false)
	public CfTypeTo createCfType(CfTypeInput CfType){
		CfTypeModel model = converter.convert(CfType,CfTypeModel.class); 
		 model.setId(0);
		  
		 model= cftypeRepository.save(model); 
		 return converter.convert(model, CfTypeTo.class); 
	}

	/**
	 * 
	 * @param cfTypeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteCfType(int cfTypeId){
		CfTypeModel cftype = cftypeRepository.findById(cfTypeId).orElseThrow(() -> new RuntimeException("CfType not found")); 
		 cftype.setDeleted(true); 
		  cftypeRepository.save(cftype); 
		 return cfTypeId;
	}

	/**
	 * 
	 * @param cfTypeId
	 */
	@Override
	public Optional<CfTypeTo> findCfType(int cfTypeId){
		if(cfTypeId <1) 
		 {return Optional.empty();} 
		 return cftypeRepository.findById(cfTypeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,CfTypeTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<CfTypeTo> findCfTypes(PageInput page, SortInput sort, List<FilterInput> filters){
		return cftypeRepository.findByCriteria(CfTypeModel.class,filters,sort,page).map(r -> converter.convert(r,CfTypeTo.class));
	}

	/**
	 * 
	 * @param cftypeId
	 */
	public Set<NodeCfTo> findNodeCfs(int cftypeId){
		return nodecfRepository.findByCftypeId(cftypeId).stream().map(e -> converter.convert(e,NodeCfTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param cfType
	 */
	@Override @Transactional(readOnly = false)
	public CfTypeTo modifyCfType(CfTypeInput cfType){
		CfTypeModel target= cftypeRepository.findById(cfType.getId()).orElseThrow(() -> new RuntimeException("CfType not found")); 
		 CfTypeModel source= converter.convert(cfType,CfTypeModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(cftypeRepository.save(target), CfTypeTo.class);
	}

}