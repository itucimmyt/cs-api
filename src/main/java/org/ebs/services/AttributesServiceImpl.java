///////////////////////////////////////////////////////////
//  AttributesServiceImpl.java
//  Macromedia ActionScript Implementation of the Class AttributesServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:04:43 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.AttributesModel;
import org.ebs.model.EntityReferenceModel;
import org.ebs.model.HtmlTagModel;
import org.ebs.model.repos.AttributesRepository;
import org.ebs.model.repos.EntityReferenceRepository;
import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.EntityReferenceTo;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.Input.AttributesInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:04:43 AM
 */
@Service @Transactional(readOnly = true)
  class AttributesServiceImpl implements AttributesService {

	private AttributesRepository attributesRepository;
	private ConversionService converter;
	private EntityReferenceRepository entityreferenceRepository;
	private HtmlTagRepository htmltagRepository;

	/**
	 *
	 * @param htmltagRepository
	 * @param entityreferenceRepository
	 * @param converter
	 * @param attributesRepository
	 */
	@Autowired
	public AttributesServiceImpl(HtmlTagRepository htmltagRepository, EntityReferenceRepository entityreferenceRepository, ConversionService converter, AttributesRepository attributesRepository){
		this.attributesRepository =attributesRepository;
		 this.converter = converter;
		 this.entityreferenceRepository = entityreferenceRepository;
		 this.htmltagRepository = htmltagRepository;
	}

	/**
	 *
	 * @param Attributes
	 */
	@Override @Transactional(readOnly = false)
	public AttributesTo createattributes(AttributesInput Attributes){
		AttributesModel model = converter.convert(Attributes,AttributesModel.class);
		 model.setId(0);
		 EntityReferenceModel entityreferenceModel = entityreferenceRepository.findById(Attributes.getEntityreference().getId()).get();
		model.setEntityreference(entityreferenceModel);
		HtmlTagModel htmltagModel = htmltagRepository.findById(Attributes.getHtmltag().getId()).get();
		model.setHtmltag(htmltagModel);

		 model= attributesRepository.save(model);
		 return converter.convert(model, AttributesTo.class);
	}

	/**
	 *
	 * @param attributesId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteattributes(int attributesId){
		AttributesModel attributes = attributesRepository.findById(attributesId).orElseThrow(() -> new RuntimeException("Attributes not found"));
		 attributes.setDeleted(true);
		  attributesRepository.save(attributes);
		 return attributesId;
	}

	/**
	 *
	 * @param attributesId
	 */
	@Override
	public Optional<AttributesTo> findattributes(int attributesId){
		if(attributesId <1)
		 {return Optional.empty();}
		 return attributesRepository.findById(attributesId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,AttributesTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<AttributesTo> findattributess(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return attributesRepository.findByCriteria(AttributesModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,AttributesTo.class));
	}

	/**
	 *
	 * @param attributesId
	 */
	public Optional<EntityReferenceTo> findentityreference(int attributesId){
		return attributesRepository.findById(attributesId).map(r -> converter.convert(r.getEntityreference(),EntityReferenceTo.class));
	}

	/**
	 *
	 * @param attributesId
	 */
	public Optional<HtmlTagTo> findhtmltag(int attributesId){
		return attributesRepository.findById(attributesId).map(r -> converter.convert(r.getHtmltag(),HtmlTagTo.class));
	}

	/**
	 *
	 * @param attributes
	 */
	@Override @Transactional(readOnly = false)
	public AttributesTo modifyattributes(AttributesInput attributes){
		AttributesModel target= attributesRepository.findById(attributes.getId()).orElseThrow(() -> new RuntimeException("Attributes not found"));
		 AttributesModel source= converter.convert(attributes,AttributesModel.class);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(attributesRepository.save(target), AttributesTo.class);
	}

}