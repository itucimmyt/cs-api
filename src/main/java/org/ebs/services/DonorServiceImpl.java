///////////////////////////////////////////////////////////
//  DonorServiceImpl.java
//  Macromedia ActionScript Implementation of the Class DonorServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:05:03 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.DonorModel;
import org.ebs.model.PersonModel;
import org.ebs.model.repos.DonorRepository;
import org.ebs.model.repos.PersonRepository;
import org.ebs.services.to.DonorTo;
import org.ebs.services.to.PersonTo;
import org.ebs.services.to.Input.DonorInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:05:03 AM
 */
@Service @Transactional(readOnly = true)
  class DonorServiceImpl implements DonorService {

	private DonorRepository donorRepository;
	private ConversionService converter;
	private PersonRepository personRepository;

	/**
	 * 
	 * @param Donor
	 */
	@Override @Transactional(readOnly = false)
	public DonorTo createdonor(DonorInput Donor){
		DonorModel model = converter.convert(Donor,DonorModel.class); 
		 model.setId(0);
		 PersonModel personModel = personRepository.findById(Donor.getPerson().getId()).get(); 
		model.setPerson(personModel); 
		 
		 model= donorRepository.save(model); 
		 return converter.convert(model, DonorTo.class); 
	}

	/**
	 * 
	 * @param donorId
	 */
	@Override @Transactional(readOnly = false)
	public int deletedonor(int donorId){
		DonorModel donor = donorRepository.findById(donorId).orElseThrow(() -> new RuntimeException("Donor not found")); 
		 donor.setDeleted(true); 
		  donorRepository.save(donor); 
		 return donorId;
	}

	/**
	 * 
	 * @param personRepository
	 * @param converter
	 * @param donorRepository
	 */
	@Autowired
	public DonorServiceImpl(PersonRepository personRepository, ConversionService converter, DonorRepository donorRepository){
		this.donorRepository =donorRepository; 
		 this.converter = converter;
		 this.personRepository = personRepository;
	}

	/**
	 * 
	 * @param donorId
	 */
	@Override
	public Optional<DonorTo> finddonor(int donorId){
		if(donorId <1) 
		 {return Optional.empty();} 
		 return donorRepository.findById(donorId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,DonorTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<DonorTo> finddonors(PageInput page, SortInput sort, List<FilterInput> filters){
		return donorRepository.findByCriteria(DonorModel.class,filters,sort,page).map(r -> converter.convert(r,DonorTo.class));
	}

	/**
	 * 
	 * @param donorId
	 */
	public Optional<PersonTo> findperson(int donorId){
		return donorRepository.findById(donorId).map(r -> converter.convert(r.getPerson(),PersonTo.class));
	}

	/**
	 * 
	 * @param donor
	 */
	@Override @Transactional(readOnly = false)
	public DonorTo modifydonor(DonorInput donor){
		DonorModel target= donorRepository.findById(donor.getId()).orElseThrow(() -> new RuntimeException("Donor not found")); 
		 DonorModel source= converter.convert(donor,DonorModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(donorRepository.save(target), DonorTo.class);
	}

}