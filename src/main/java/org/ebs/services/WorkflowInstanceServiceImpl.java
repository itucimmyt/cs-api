///////////////////////////////////////////////////////////
//  WorkflowInstanceServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowInstanceServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:06:36 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WorkflowModel;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.WorkflowInstanceRepository;
import org.ebs.model.repos.WorkflowStatusRepository;
import org.ebs.model.repos.WorkflowEventRepository;
import org.ebs.model.repos.RequestRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.to.Input.WorkflowInstanceInput;
import org.ebs.model.WorkflowInstanceModel;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.to.WorkflowEventTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.RequestTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:06:36 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowInstanceServiceImpl implements WorkflowInstanceService {

	private WorkflowInstanceRepository workflowinstanceRepository;
	private ConversionService converter;
	private WorkflowRepository workflowRepository;
	public WorkflowStatusRepository workflowstatusRepository;
	public WorkflowEventRepository workfloweventRepository;
	public RequestRepository requestRepository;

	/**
	 *
	 * @param WorkflowInstance
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowInstanceTo createworkflowinstance(WorkflowInstanceInput WorkflowInstance){
		WorkflowInstanceModel model = converter.convert(WorkflowInstance,WorkflowInstanceModel.class);
		 model.setId(0);
		 WorkflowModel workflowModel = workflowRepository.findById(WorkflowInstance.getWorkflow().getId()).get();
		model.setWorkflow(workflowModel);

		 model= workflowinstanceRepository.save(model);
		 return converter.convert(model, WorkflowInstanceTo.class);
	}

	/**
	 *
	 * @param workflowinstanceId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteworkflowinstance(int workflowinstanceId){
		WorkflowInstanceModel workflowinstance = workflowinstanceRepository.findById(workflowinstanceId).orElseThrow(() -> new RuntimeException("WorkflowInstance not found"));
		 workflowinstance.setDeleted(true);
		  workflowinstanceRepository.save(workflowinstance);
		 return workflowinstanceId;
	}

	/**
	 *
	 * @param workflowinstanceId
	 */
	public Set<RequestTo> findrequests(int workflowinstanceId){
		return requestRepository.findByWorkflowinstanceId(workflowinstanceId).stream().map(e -> converter.convert(e,RequestTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowinstanceId
	 */
	public Optional<WorkflowTo> findworkflow(int workflowinstanceId){
		return workflowinstanceRepository.findById(workflowinstanceId).map(r -> converter.convert(r.getWorkflow(),WorkflowTo.class));
	}

	/**
	 *
	 * @param workflowinstanceId
	 */
	public Set<WorkflowEventTo> findworkflowevents(int workflowinstanceId){
		return workfloweventRepository.findByWorkflowinstanceId(workflowinstanceId).stream().map(e -> converter.convert(e,WorkflowEventTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowinstanceId
	 */
	@Override
	public Optional<WorkflowInstanceTo> findworkflowinstance(int workflowinstanceId){
		if(workflowinstanceId <1)
		 {return Optional.empty();}
		 return workflowinstanceRepository.findById(workflowinstanceId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowInstanceTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowInstanceTo> findworkflowinstances(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return workflowinstanceRepository.findByCriteria(WorkflowInstanceModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,WorkflowInstanceTo.class));
	}

	/**
	 *
	 * @param workflowinstanceId
	 */
	public Set<WorkflowStatusTo> findworkflowstatuss(int workflowinstanceId){
		return workflowstatusRepository.findByWorkflowinstanceId(workflowinstanceId).stream().map(e -> converter.convert(e,WorkflowStatusTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowinstance
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowInstanceTo modifyworkflowinstance(WorkflowInstanceInput workflowinstance){
		WorkflowInstanceModel target= workflowinstanceRepository.findById(workflowinstance.getId()).orElseThrow(() -> new RuntimeException("WorkflowInstance not found"));
		 WorkflowInstanceModel source= converter.convert(workflowinstance,WorkflowInstanceModel.class);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(workflowinstanceRepository.save(target), WorkflowInstanceTo.class);
	}

	/**
	 *
	 * @param requestRepository
	 * @param workflowinstanceRepository
	 * @param converter
	 * @param workflowstatusRepository
	 * @param workfloweventRepository
	 * @param workflowRepository
	 */
	@Autowired
	public WorkflowInstanceServiceImpl(RequestRepository requestRepository, WorkflowInstanceRepository workflowinstanceRepository, ConversionService converter, WorkflowStatusRepository workflowstatusRepository, WorkflowEventRepository workfloweventRepository, WorkflowRepository workflowRepository){
		this.workflowinstanceRepository =workflowinstanceRepository;
		 this.converter = converter;
		 this.workflowstatusRepository = workflowstatusRepository;
		 this.workfloweventRepository = workfloweventRepository;
		 this.workflowRepository = workflowRepository;
		 this.requestRepository = requestRepository;
	}

}