///////////////////////////////////////////////////////////
//  HtmlTagServiceImpl.java
//  Macromedia ActionScript Implementation of the Class HtmlTagServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Jul-2020 5:06:36 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.TranslationRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.model.HtmlTagModel;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.Input.HtmlTagInput;
import org.ebs.services.to.TranslationTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Jul-2020 5:06:36 PM
 */
@Service @Transactional(readOnly = true)
  class HtmlTagServiceImpl implements HtmlTagService {

	private HtmlTagRepository htmltagRepository;
	private ConversionService converter;
	public TranslationRepository translationRepository;

	/**
	 * 
	 * @param HtmlTag
	 */
	@Override @Transactional(readOnly = false)
	public HtmlTagTo createHtmlTag(HtmlTagInput HtmlTag){
		HtmlTagModel model = converter.convert(HtmlTag,HtmlTagModel.class); 
		 model.setId(0);
		  
		 model= htmltagRepository.save(model); 
		 return converter.convert(model, HtmlTagTo.class); 
	}

	/**
	 * 
	 * @param htmltagId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteHtmlTag(int htmltagId){
		HtmlTagModel htmltag = htmltagRepository.findById(htmltagId).orElseThrow(() -> new RuntimeException("HtmlTag not found")); 
		 htmltag.setDeleted(true); 
		  htmltagRepository.save(htmltag); 
		 return htmltagId;
	}

	/**
	 * 
	 * @param htmltagId
	 */
	@Override
	public Optional<HtmlTagTo> findHtmlTag(int htmltagId){
		if(htmltagId <1) 
		 {return Optional.empty();} 
		 return htmltagRepository.findById(htmltagId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,HtmlTagTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<HtmlTagTo> findHtmlTags(PageInput page, SortInput sort, List<FilterInput> filters){
		return htmltagRepository.findByCriteria(HtmlTagModel.class,filters,sort,page).map(r -> converter.convert(r,HtmlTagTo.class));
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<TranslationTo> findTranslations(int htmltagId){
		return translationRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,TranslationTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param translationRepository
	 * @param converter
	 * @param htmltagRepository
	 */
	@Autowired
	public HtmlTagServiceImpl(TranslationRepository translationRepository, ConversionService converter, HtmlTagRepository htmltagRepository){
		this.htmltagRepository =htmltagRepository; 
		 this.converter = converter;
		 this.translationRepository = translationRepository;
	}

	/**
	 * 
	 * @param htmltag
	 */
	@Override @Transactional(readOnly = false)
	public HtmlTagTo modifyHtmlTag(HtmlTagInput htmltag){
		HtmlTagModel target= htmltagRepository.findById(htmltag.getId()).orElseThrow(() -> new RuntimeException("HtmlTag not found")); 
		 HtmlTagModel source= converter.convert(htmltag,HtmlTagModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(htmltagRepository.save(target), HtmlTagTo.class);
	}

}