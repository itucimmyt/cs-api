///////////////////////////////////////////////////////////
//  HtmlTagServiceImpl.java
//  Macromedia ActionScript Implementation of the Class HtmlTagServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:31 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.HtmlTagRepository;
import org.ebs.model.repos.AttributesRepository;
import org.ebs.model.repos.MessageRepository;
import org.ebs.model.repos.DomainRepository;
import org.ebs.model.repos.WorkflowRepository;
import org.ebs.model.repos.PhaseRepository;
import org.ebs.model.repos.AlertRepository;
import org.ebs.model.repos.StageRepository;
import org.ebs.model.repos.TranslationRepository;
import org.ebs.model.repos.NodeRepository;
import org.ebs.model.repos.ProductRepository;
import org.ebs.model.repos.NodeCfRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.HtmlTagTo;
import org.ebs.services.to.Input.HtmlTagInput;
import org.ebs.model.HtmlTagModel;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.TranslationTo;
import org.ebs.services.to.NodeTo;
import org.ebs.services.to.ProductTo;
import org.ebs.services.to.NodeCfTo;
import org.ebs.services.to.AttributesTo;
import org.ebs.services.to.MessageTo;
import org.ebs.services.to.DomainTo;
import org.ebs.services.to.WorkflowTo;
import org.ebs.services.to.PhaseTo;
import org.ebs.services.to.AlertTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:31 AM
 */
@Service @Transactional(readOnly = true)
  class HtmlTagServiceImpl implements HtmlTagService {

	private HtmlTagRepository htmltagRepository;
	private ConversionService converter;
	private AttributesRepository attributesRepository;
	private MessageRepository messageRepository;
	private DomainRepository domainRepository;
	private WorkflowRepository workflowRepository;
	private PhaseRepository phaseRepository;
	private AlertRepository alertRepository;
	private StageRepository stageRepository;
	private TranslationRepository translationRepository;
	private NodeRepository nodeRepository;
	private ProductRepository productRepository;
	private NodeCfRepository nodecfRepository;

	/**
	 * 
	 * @param HtmlTag
	 */
	@Override @Transactional(readOnly = false)
	public HtmlTagTo createHtmlTag(HtmlTagInput HtmlTag){
		HtmlTagModel model = converter.convert(HtmlTag,HtmlTagModel.class); 
		 model.setId(0);
		  
		 model= htmltagRepository.save(model); 
		 return converter.convert(model, HtmlTagTo.class); 
	}

	/**
	 * 
	 * @param htmlTagId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteHtmlTag(int htmlTagId){
		HtmlTagModel htmltag = htmltagRepository.findById(htmlTagId).orElseThrow(() -> new RuntimeException("HtmlTag not found")); 
		 htmltag.setDeleted(true); 
		  htmltagRepository.save(htmltag); 
		 return htmlTagId;
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<AlertTo> findAlerts(int htmltagId){
		return alertRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,AlertTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<AttributesTo> findAttributess(int htmltagId){
		return attributesRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,AttributesTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<DomainTo> findDomains(int htmltagId){
		return domainRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,DomainTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmlTagId
	 */
	@Override
	public Optional<HtmlTagTo> findHtmlTag(int htmlTagId){
		if(htmlTagId <1) 
		 {return Optional.empty();} 
		 return htmltagRepository.findById(htmlTagId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,HtmlTagTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<HtmlTagTo> findHtmlTags(PageInput page, SortInput sort, List<FilterInput> filters){
		return htmltagRepository.findByCriteria(HtmlTagModel.class,filters,sort,page).map(r -> converter.convert(r,HtmlTagTo.class));
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<MessageTo> findMessages(int htmltagId){
		return messageRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,MessageTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<NodeCfTo> findNodeCfs(int htmltagId){
		return nodecfRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,NodeCfTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<NodeTo> findNodes(int htmltagId){
		return nodeRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,NodeTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<PhaseTo> findPhases(int htmltagId){
		return phaseRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,PhaseTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<ProductTo> findProducts(int htmltagId){
		return productRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,ProductTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<StageTo> findStages(int htmltagId){
		return stageRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,StageTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<TranslationTo> findTranslations(int htmltagId){
		return translationRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,TranslationTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param htmltagId
	 */
	public Set<WorkflowTo> findWorkflows(int htmltagId){
		return workflowRepository.findByHtmltagId(htmltagId).stream().map(e -> converter.convert(e,WorkflowTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param domainRepository
	 * @param productRepository
	 * @param nodeRepository
	 * @param translationRepository
	 * @param stageRepository
	 * @param alertRepository
	 * @param workflowRepository
	 * @param messageRepository
	 * @param attributesRepository
	 * @param converter
	 * @param htmltagRepository
	 * @param nodecfRepository
	 * @param phaseRepository
	 */
	@Autowired
	public HtmlTagServiceImpl(DomainRepository domainRepository, ProductRepository productRepository, NodeRepository nodeRepository, TranslationRepository translationRepository, StageRepository stageRepository, AlertRepository alertRepository, WorkflowRepository workflowRepository, MessageRepository messageRepository, AttributesRepository attributesRepository, ConversionService converter, HtmlTagRepository htmltagRepository, NodeCfRepository nodecfRepository, PhaseRepository phaseRepository){
		this.htmltagRepository =htmltagRepository; 
		 this.converter = converter;
		 this.attributesRepository = attributesRepository;
		 this.messageRepository = messageRepository;
		 this.domainRepository = domainRepository;
		 this.workflowRepository = workflowRepository;
		 this.phaseRepository = phaseRepository;
		 this.alertRepository = alertRepository;
		 this.stageRepository = stageRepository;
		 this.translationRepository = translationRepository;
		 this.nodeRepository = nodeRepository;
		 this.productRepository = productRepository;
		 this.nodecfRepository = nodecfRepository;
	}

	/**
	 * 
	 * @param htmlTag
	 */
	@Override @Transactional(readOnly = false)
	public HtmlTagTo modifyHtmlTag(HtmlTagInput htmlTag){
		HtmlTagModel target= htmltagRepository.findById(htmlTag.getId()).orElseThrow(() -> new RuntimeException("HtmlTag not found")); 
		 HtmlTagModel source= converter.convert(htmlTag,HtmlTagModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(htmltagRepository.save(target), HtmlTagTo.class);
	}

}