///////////////////////////////////////////////////////////
//  StatusServiceImpl.java
//  Macromedia ActionScript Implementation of the Class StatusServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:56 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.WfInstanceModel;
import org.ebs.model.repos.WfInstanceRepository;
import org.ebs.model.repos.StatusRepository;
import org.ebs.model.repos.StatusTypeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.StatusTo;
import org.ebs.services.to.Input.StatusInput;
import org.ebs.model.StatusModel;
import org.ebs.services.to.StatusTypeTo;
import org.ebs.services.to.WfInstanceTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:56 AM
 */
@Service @Transactional(readOnly = true)
  class StatusServiceImpl implements StatusService {

	private StatusRepository statusRepository;
	private ConversionService converter;
	private WfInstanceRepository wfinstanceRepository;
	private StatusTypeRepository statustypeRepository;

	/**
	 * 
	 * @param Status
	 */
	@Override @Transactional(readOnly = false)
	public StatusTo createStatus(StatusInput Status){
		StatusModel model = converter.convert(Status,StatusModel.class); 
		 model.setId(0);
		 WfInstanceModel wfinstanceModel = wfinstanceRepository.findById(Status.getWfinstance().getId()).get(); 
		model.setWfinstance(wfinstanceModel); 
		 
		 model= statusRepository.save(model); 
		 return converter.convert(model, StatusTo.class); 
	}

	/**
	 * 
	 * @param statusId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteStatus(int statusId){
		StatusModel status = statusRepository.findById(statusId).orElseThrow(() -> new RuntimeException("Status not found")); 
		 status.setDeleted(true); 
		  statusRepository.save(status); 
		 return statusId;
	}

	/**
	 * 
	 * @param statusId
	 */
	@Override
	public Optional<StatusTo> findStatus(int statusId){
		if(statusId <1) 
		 {return Optional.empty();} 
		 return statusRepository.findById(statusId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,StatusTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<StatusTo> findStatuss(PageInput page, SortInput sort, List<FilterInput> filters){
		return statusRepository.findByCriteria(StatusModel.class,filters,sort,page).map(r -> converter.convert(r,StatusTo.class));
	}

	/**
	 * 
	 * @param statusId
	 */
	public Optional<StatusTypeTo> findStatusType(int statusId){
		return statusRepository.findById(statusId).map(r -> converter.convert(r.getStatustype(),StatusTypeTo.class));
	}

	/**
	 * 
	 * @param statusId
	 */
	public Optional<WfInstanceTo> findWfInstance(int statusId){
		return statusRepository.findById(statusId).map(r -> converter.convert(r.getWfinstance(),WfInstanceTo.class));
	}

	/**
	 * 
	 * @param status
	 */
	@Override @Transactional(readOnly = false)
	public StatusTo modifyStatus(StatusInput status){
		StatusModel target= statusRepository.findById(status.getId()).orElseThrow(() -> new RuntimeException("Status not found")); 
		 StatusModel source= converter.convert(status,StatusModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(statusRepository.save(target), StatusTo.class);
	}

	/**
	 * 
	 * @param wfinstanceRepository
	 * @param statustypeRepository
	 * @param converter
	 * @param statusRepository
	 */
	@Autowired
	public StatusServiceImpl(WfInstanceRepository wfinstanceRepository, StatusTypeRepository statustypeRepository, ConversionService converter, StatusRepository statusRepository){
		this.statusRepository =statusRepository; 
		 this.converter = converter;
		 this.statustypeRepository = statustypeRepository;
		 this.wfinstanceRepository = wfinstanceRepository;
	}

}