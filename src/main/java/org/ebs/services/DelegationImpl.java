///////////////////////////////////////////////////////////
//  DelegationImpl.java
//  Macromedia ActionScript Implementation of the Class DelegationImpl
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2020 12:06:58 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import org.ebs.services.to.DelegationTo;
import org.ebs.services.to.Input.DelegationInput;
import org.ebs.model.DelegationModel;
import org.ebs.model.repos.DelegationRepository;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 28-Apr-2020 12:06:58 AM
 */
@Service @Transactional(readOnly = true)
public class DelegationImpl implements DelegationService {

	private DelegationRepository delegationRepository;
	@Autowired
	private ConversionService converter;

	/**
	 * 
	 * @param Delegation
	 */
	@Override @Transactional(readOnly = false)
	public DelegationTo createDelegation(DelegationInput Delegation){
		DelegationModel model = converter.convert(Delegation,DelegationModel.class); 
		 model.setId(0); 
		 model= delegationRepository.save(model); 
		 return converter.convert(model, DelegationTo.class); 
	}

	/**
	 * 
	 * @param delegationRepository
	 */
	@Autowired
	public DelegationImpl(DelegationRepository delegationRepository){
		this.delegationRepository =delegationRepository;
	}

	/**
	 * 
	 * @param iddelegation
	 */
	@Override @Transactional(readOnly = false)
	public int deleteDelegation(int iddelegation){
		DelegationModel delegation = delegationRepository.findById(iddelegation).orElseThrow(() -> new RuntimeException("Request not found")); 
		 delegation.setDeleted(true); 
		  delegationRepository.save(delegation); 
		 return iddelegation;
	}

	/**
	 * 
	 * @param delegationId
	 */
	@Override
	public Optional<DelegationTo> findDelegation(int delegationId){
		if(delegationId <1) 
		 {return Optional.empty();} 
		 return delegationRepository.findById(delegationId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,DelegationTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<DelegationTo> findDelegations(PageInput page, SortInput sort, List<FilterInput> filters){
		return delegationRepository.findByCriteria(DelegationModel.class,filters,sort,page).map(r -> converter.convert(r,DelegationTo.class));
	}

	/**
	 * 
	 * @param delegation
	 */
	@Override @Transactional(readOnly = false)
	public DelegationTo modifyDelegation(DelegationInput delegation){
		DelegationModel target= delegationRepository.findById(delegation.getId()).orElseThrow(() -> new RuntimeException("Request not found")); 
		 DelegationModel source= converter.convert(delegation,DelegationModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(delegationRepository.save(target), DelegationTo.class);
	}

}