///////////////////////////////////////////////////////////
//  ProductFunctionServiceImpl.java
//  Macromedia ActionScript Implementation of the Class ProductFunctionServiceImpl
//  Generated by Enterprise Architect
//  Created on:      13-Mar-2021 12:02:50 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.StageModel;
import org.ebs.model.repos.StageRepository;
import org.ebs.model.NodeModel;
import org.ebs.model.repos.NodeRepository;
import org.ebs.model.ProductModel;
import org.ebs.model.repos.ProductRepository;
import org.ebs.model.repos.ProductFunctionRepository;
import org.ebs.model.repos.RoleRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.ProductFunctionTo;
import org.ebs.services.to.Input.ProductFunctionInput;
import org.ebs.model.ProductFunctionModel;
import org.ebs.services.to.ProductTo;
import org.ebs.services.to.StageTo;
import org.ebs.services.to.NodeTo;
import org.ebs.services.to.RoleTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 13-Mar-2021 12:02:50 AM
 */
@Service @Transactional(readOnly = true)
  class ProductFunctionServiceImpl implements ProductFunctionService {

	private ProductFunctionRepository productfunctionRepository;
	private ConversionService converter;
	private StageRepository stageRepository;
	private NodeRepository nodeRepository;
	private ProductRepository productRepository;
	private RoleRepository roleRepository;

	/**
	 * 
	 * @param ProductFunction
	 */
	@Override @Transactional(readOnly = false)
	public ProductFunctionTo createProductFunction(ProductFunctionInput ProductFunction){
		ProductFunctionModel model = converter.convert(ProductFunction,ProductFunctionModel.class); 
		 model.setId(0);
		 StageModel stageModel = stageRepository.findById(ProductFunction.getStage().getId()).get(); 
		model.setStage(stageModel); 
		NodeModel nodeModel = nodeRepository.findById(ProductFunction.getNode().getId()).get(); 
		model.setNode(nodeModel); 
		ProductModel productModel = productRepository.findById(ProductFunction.getProduct().getId()).get(); 
		model.setProduct(productModel); 
		 
		 model= productfunctionRepository.save(model); 
		 return converter.convert(model, ProductFunctionTo.class); 
	}

	/**
	 * 
	 * @param productFunctionId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteProductFunction(int productFunctionId){
		ProductFunctionModel productfunction = productfunctionRepository.findById(productFunctionId).orElseThrow(() -> new RuntimeException("ProductFunction not found")); 
		 productfunction.setDeleted(true); 
		  productfunctionRepository.save(productfunction); 
		 return productFunctionId;
	}

	/**
	 * 
	 * @param productfunctionId
	 */
	public Optional<NodeTo> findNode(int productfunctionId){
		return productfunctionRepository.findById(productfunctionId).map(r -> converter.convert(r.getNode(),NodeTo.class));
	}

	/**
	 * 
	 * @param productfunctionId
	 */
	public Optional<ProductTo> findProduct(int productfunctionId){
		return productfunctionRepository.findById(productfunctionId).map(r -> converter.convert(r.getProduct(),ProductTo.class));
	}

	/**
	 * 
	 * @param productFunctionId
	 */
	@Override
	public Optional<ProductFunctionTo> findProductFunction(int productFunctionId){
		if(productFunctionId <1) 
		 {return Optional.empty();} 
		 return productfunctionRepository.findById(productFunctionId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,ProductFunctionTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<ProductFunctionTo> findProductFunctions(PageInput page, SortInput sort, List<FilterInput> filters){
		return productfunctionRepository.findByCriteria(ProductFunctionModel.class,filters,sort,page).map(r -> converter.convert(r,ProductFunctionTo.class));
	}

	/**
	 * 
	 * @param productfunctionId
	 */
	public Set<RoleTo> findRoles(int productfunctionId){
		return productfunctionRepository.findById(productfunctionId).get().getRoles().stream().map(e->converter.convert(e, RoleTo.class)).collect(Collectors.toSet());
	}

	/**
	 * 
	 * @param productfunctionId
	 */
	public Optional<StageTo> findStage(int productfunctionId){
		return productfunctionRepository.findById(productfunctionId).map(r -> converter.convert(r.getStage(),StageTo.class));
	}

	/**
	 * 
	 * @param productFunction
	 */
	@Override @Transactional(readOnly = false)
	public ProductFunctionTo modifyProductFunction(ProductFunctionInput productFunction){
		ProductFunctionModel target= productfunctionRepository.findById(productFunction.getId()).orElseThrow(() -> new RuntimeException("ProductFunction not found")); 
		 ProductFunctionModel source= converter.convert(productFunction,ProductFunctionModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(productfunctionRepository.save(target), ProductFunctionTo.class);
	}

	/**
	 * 
	 * @param productRepository
	 * @param productfunctionRepository
	 * @param converter
	 * @param stageRepository
	 * @param nodeRepository
	 * @param roleRepository
	 */
	@Autowired
	public ProductFunctionServiceImpl(ProductRepository productRepository, ProductFunctionRepository productfunctionRepository, ConversionService converter, StageRepository stageRepository, NodeRepository nodeRepository, RoleRepository roleRepository){
		this.productfunctionRepository =productfunctionRepository; 
		 this.converter = converter;
		 this.stageRepository = stageRepository;
		 this.nodeRepository = nodeRepository;
		 this.roleRepository = roleRepository;
		 this.productRepository = productRepository;
	}

}