///////////////////////////////////////////////////////////
//  WorkflowStatusServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowStatusServiceImpl
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2020 5:15:08 PM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.WorkflowStatusRepository;
import org.ebs.model.repos.WorkflowStatusTypeRepository;
import org.ebs.model.repos.WorkflowNodeRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.to.Input.WorkflowStatusInput;
import org.ebs.model.WorkflowStatusModel;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.to.WorkflowNodeTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 15-Jun-2020 5:15:08 PM
 */
@Service @Transactional(readOnly = true)
  class WorkflowStatusServiceImpl implements WorkflowStatusService {

	private WorkflowStatusRepository workflowstatusRepository;
	private ConversionService converter;
	public WorkflowStatusTypeRepository workflowstatustypeRepository;
	public WorkflowNodeRepository workflownodeRepository;

	/**
	 * 
	 * @param WorkflowStatus
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStatusTo createWorkflowStatus(WorkflowStatusInput WorkflowStatus){
		WorkflowStatusModel model = converter.convert(WorkflowStatus,WorkflowStatusModel.class); 
		 model.setId(0);
		  
		 model= workflowstatusRepository.save(model); 
		 return converter.convert(model, WorkflowStatusTo.class); 
	}

	/**
	 * 
	 * @param workflowstatusId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowStatus(int workflowstatusId){
		WorkflowStatusModel workflowstatus = workflowstatusRepository.findById(workflowstatusId).orElseThrow(() -> new RuntimeException("WorkflowStatus not found")); 
		 workflowstatus.setDeleted(true); 
		  workflowstatusRepository.save(workflowstatus); 
		 return workflowstatusId;
	}

	/**
	 * 
	 * @param workflowstatusId
	 */
	@Override
	public Optional<WorkflowStatusTo> findWorkflowStatus(int workflowstatusId){
		if(workflowstatusId <1) 
		 {return Optional.empty();} 
		 return workflowstatusRepository.findById(workflowstatusId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowStatusTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowStatusTo> findWorkflowStatuss(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowstatusRepository.findByCriteria(WorkflowStatusModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowStatusTo.class));
	}

	/**
	 * 
	 * @param workflowstatusId
	 */
	public Optional<WorkflowStatusTypeTo> findWorkflowStatusType(int workflowstatusId){
		return workflowstatusRepository.findById(workflowstatusId).map(r -> converter.convert(r.getWorkflowStatusType(),WorkflowStatusTypeTo.class));
	}

	/**
	 * 
	 * @param workflowstatus
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStatusTo modifyWorkflowStatus(WorkflowStatusInput workflowstatus){
		WorkflowStatusModel target= workflowstatusRepository.findById(workflowstatus.getId()).orElseThrow(() -> new RuntimeException("WorkflowStatus not found")); 
		 WorkflowStatusModel source= converter.convert(workflowstatus,WorkflowStatusModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowstatusRepository.save(target), WorkflowStatusTo.class);
	}

	/**
	 * 
	 * @param workflownodeRepository
	 * @param workflowstatustypeRepository
	 * @param converter
	 * @param workflowstatusRepository
	 */
	@Autowired
	public WorkflowStatusServiceImpl(WorkflowNodeRepository workflownodeRepository, WorkflowStatusTypeRepository workflowstatustypeRepository, ConversionService converter, WorkflowStatusRepository workflowstatusRepository){
		this.workflowstatusRepository =workflowstatusRepository; 
		 this.converter = converter;
		 this.workflowstatustypeRepository = workflowstatustypeRepository;
		 this.workflownodeRepository = workflownodeRepository;
	}

}