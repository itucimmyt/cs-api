///////////////////////////////////////////////////////////
//  WorkflowStatusServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowStatusServiceImpl
//  Generated by Enterprise Architect
//  Created on:      07-Sep-2020 8:12:51 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import java.util.List;
import java.util.Optional;

import org.ebs.model.WorkflowInstanceModel;
import org.ebs.model.WorkflowStatusModel;
import org.ebs.model.WorkflowStatusTypeModel;
import org.ebs.model.repos.WorkflowInstanceRepository;
import org.ebs.model.repos.WorkflowStatusRepository;
import org.ebs.model.repos.WorkflowStatusTypeRepository;
import org.ebs.services.to.WorkflowInstanceTo;
import org.ebs.services.to.WorkflowStatusTo;
import org.ebs.services.to.WorkflowStatusTypeTo;
import org.ebs.services.to.Input.WorkflowStatusInput;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 07-Sep-2020 8:12:51 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowStatusServiceImpl implements WorkflowStatusService {

	private WorkflowStatusRepository workflowStatusRepository;
	private ConversionService converter;
	private WorkflowInstanceRepository workflowinstanceRepository;
	public WorkflowStatusTypeRepository workflowStatusTypeRepository;
	public WorkflowInstanceRepository workflowInstanceRepository;

	/**
	 * 
	 * @param workflowStatus
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStatusTo createWorkflowStatus(WorkflowStatusInput WorkflowStatus){
		WorkflowStatusModel model = converter.convert(WorkflowStatus,WorkflowStatusModel.class); 
		 model.setId(0);
		 WorkflowInstanceModel workflowinstanceModel = workflowinstanceRepository.findById(WorkflowStatus.getWorkflowInstance().getId()).get(); 
		model.setWorkflowInstance(workflowinstanceModel); 
		 
		 model= workflowStatusRepository.save(model); 
		 return converter.convert(model, WorkflowStatusTo.class); 
	}

	/**
	 * 
	 * @param workflowStatusId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteWorkflowStatus(int workflowStatusId){
		WorkflowStatusModel workflowStatus = workflowStatusRepository.findById(workflowStatusId).orElseThrow(() -> new RuntimeException("WorkflowStatus not found")); 
		 workflowStatus.setDeleted(true); 
		  workflowStatusRepository.save(workflowStatus); 
		 return workflowStatusId;
	}

	/**
	 * 
	 * @param workflowStatusId
	 */
	public Optional<WorkflowInstanceTo> findWorkflowInstance(int workflowStatusId){
		return workflowStatusRepository.findById(workflowStatusId).map(r -> converter.convert(r.getWorkflowInstance(),WorkflowInstanceTo.class));
	}

	/**
	 * 
	 * @param workflowStatusId
	 */
	@Override
	public Optional<WorkflowStatusTo> findWorkflowStatus(int workflowStatusId){
		if(workflowStatusId <1) 
		 {return Optional.empty();} 
		 return workflowStatusRepository.findById(workflowStatusId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowStatusTo.class));
	}

	/**
	 * 
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowStatusTo> findWorkflowStatuss(PageInput page, SortInput sort, List<FilterInput> filters){
		return workflowStatusRepository.findByCriteria(WorkflowStatusModel.class,filters,sort,page).map(r -> converter.convert(r,WorkflowStatusTo.class));
	}

	/**
	 * 
	 * @param workflowStatusId
	 */
	public Optional<WorkflowStatusTypeTo> findWorkflowStatusType(int workflowStatusId){
		return workflowStatusRepository.findById(workflowStatusId).map(r -> converter.convert(r.getWorkflowStatusType(),WorkflowStatusTypeTo.class));
	}

	/**
	 * 
	 * @param workflowStatus
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowStatusTo modifyWorkflowStatus(WorkflowStatusInput workflowStatus){
		WorkflowStatusModel target= workflowStatusRepository.findById(workflowStatus.getId()).orElseThrow(() -> new RuntimeException("WorkflowStatus not found")); 
		 WorkflowStatusModel source= converter.convert(workflowStatus,WorkflowStatusModel.class); 
		 Utils.copyNotNulls(source,target); 
		 return converter.convert(workflowStatusRepository.save(target), WorkflowStatusTo.class);
	}

	/**
	 * 
	 * @param workflowinstanceRepository
	 * @param workflowstatustypeRepository
	 * @param converter
	 * @param workflowstatusRepository
	 */
	@Autowired
	public WorkflowStatusServiceImpl(WorkflowInstanceRepository workflowinstanceRepository, WorkflowStatusTypeRepository workflowstatustypeRepository, ConversionService converter, WorkflowStatusRepository workflowstatusRepository){
		this.workflowStatusRepository =workflowstatusRepository; 
		 this.converter = converter;
		 this.workflowStatusTypeRepository = workflowstatustypeRepository;
		 this.workflowInstanceRepository = workflowinstanceRepository;
	}

}