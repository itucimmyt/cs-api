///////////////////////////////////////////////////////////
//  WorkflowCFTypeServiceImpl.java
//  Macromedia ActionScript Implementation of the Class WorkflowCFTypeServiceImpl
//  Generated by Enterprise Architect
//  Created on:      04-Sep-2020 10:06:30 AM
//  Original author: EBRIONES
///////////////////////////////////////////////////////////

package org.ebs.services;

import org.ebs.model.repos.WorkflowCFTypeRepository;
import org.ebs.model.repos.WorkflowNodeCFRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Optional;
import org.ebs.util.FilterInput;
import org.ebs.util.PageInput;
import org.ebs.util.SortInput;
import org.ebs.util.Utils;
import org.springframework.core.convert.ConversionService;
import java.util.stream.Collectors;
import java.util.Set;
import org.ebs.services.to.WorkflowCFTypeTo;
import org.ebs.services.to.Input.WorkflowCFTypeInput;
import org.ebs.model.WorkflowCFTypeModel;
import org.ebs.services.to.WorkflowNodeCFTo;

/**
 * @author EBRIONES
 * @version 1.0
 * @created 04-Sep-2020 10:06:30 AM
 */
@Service @Transactional(readOnly = true)
  class WorkflowCFTypeServiceImpl implements WorkflowCFTypeService {

	private WorkflowCFTypeRepository workflowcftypeRepository;
	private ConversionService converter;
	public WorkflowNodeCFRepository workflownodecfRepository;

	/**
	 *
	 * @param WorkflowCFType
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowCFTypeTo createworkflowcftype(WorkflowCFTypeInput WorkflowCFType){
		WorkflowCFTypeModel model = converter.convert(WorkflowCFType,WorkflowCFTypeModel.class);
		 model.setId(0);

		 model= workflowcftypeRepository.save(model);
		 return converter.convert(model, WorkflowCFTypeTo.class);
	}

	/**
	 *
	 * @param workflowcftypeId
	 */
	@Override @Transactional(readOnly = false)
	public int deleteworkflowcftype(int workflowcftypeId){
		WorkflowCFTypeModel workflowcftype = workflowcftypeRepository.findById(workflowcftypeId).orElseThrow(() -> new RuntimeException("WorkflowCFType not found"));
		 workflowcftype.setDeleted(true);
		  workflowcftypeRepository.save(workflowcftype);
		 return workflowcftypeId;
	}

	/**
	 *
	 * @param workflowcftypeId
	 */
	@Override
	public Optional<WorkflowCFTypeTo> findworkflowcftype(int workflowcftypeId){
		if(workflowcftypeId <1)
		 {return Optional.empty();}
		 return workflowcftypeRepository.findById(workflowcftypeId).filter(r -> !r.getDeleted().booleanValue()).map(r -> converter.convert(r,WorkflowCFTypeTo.class));
	}

	/**
	 *
	 * @param page
	 * @param sort
	 * @param filters
	 */
	@Override
	public Page<WorkflowCFTypeTo> findworkflowcftypes(PageInput page, SortInput sort, List<FilterInput> filters, boolean disjunctionFilters){
		return workflowcftypeRepository.findByCriteria(WorkflowCFTypeModel.class,filters,sort,page,disjunctionFilters).map(r -> converter.convert(r,WorkflowCFTypeTo.class));
	}

	/**
	 *
	 * @param workflowcftypeId
	 */
	public Set<WorkflowNodeCFTo> findworkflownodecfs(int workflowcftypeId){
		return workflownodecfRepository.findByWorkflowcftypeId(workflowcftypeId).stream().map(e -> converter.convert(e,WorkflowNodeCFTo.class)).collect(Collectors.toSet());
	}

	/**
	 *
	 * @param workflowcftype
	 */
	@Override @Transactional(readOnly = false)
	public WorkflowCFTypeTo modifyworkflowcftype(WorkflowCFTypeInput workflowcftype){
		WorkflowCFTypeModel target= workflowcftypeRepository.findById(workflowcftype.getId()).orElseThrow(() -> new RuntimeException("WorkflowCFType not found"));
		 WorkflowCFTypeModel source= converter.convert(workflowcftype,WorkflowCFTypeModel.class);
		 Utils.copyNotNulls(source,target);
		 return converter.convert(workflowcftypeRepository.save(target), WorkflowCFTypeTo.class);
	}

	/**
	 *
	 * @param workflownodecfRepository
	 * @param converter
	 * @param workflowcftypeRepository
	 */
	@Autowired
	public WorkflowCFTypeServiceImpl(WorkflowNodeCFRepository workflownodecfRepository, ConversionService converter, WorkflowCFTypeRepository workflowcftypeRepository){
		this.workflowcftypeRepository =workflowcftypeRepository;
		 this.converter = converter;
		 this.workflownodecfRepository = workflownodecfRepository;
	}

}